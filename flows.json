[
    {
        "id": "ee8e44366662d029",
        "type": "tab",
        "label": "微信模板消息",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7c14288f4889ff67",
        "type": "tab",
        "label": "高铁厂",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "859f41f963de2747",
        "type": "tab",
        "label": "进出水数据",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "4a8b9d9bc600415f",
        "type": "tab",
        "label": "二号氧化沟",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "e69701cd31309cd3",
        "type": "tab",
        "label": "中水",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "6c0ea9e8463e36cf",
        "type": "tab",
        "label": "5000吨处理站",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b5398a90c32509d2",
        "type": "tab",
        "label": "殷庄",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4d8e8b950659ca7e",
        "type": "tab",
        "label": "西地亚处理站",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c37c10683bca74ac",
        "type": "tab",
        "label": "亚琦处理站",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "057ffacb44126a80",
        "type": "tab",
        "label": "外翻泵",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d7d388fe2f857d05",
        "type": "tab",
        "label": "站点信息",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1eef49bcba059fc5",
        "type": "tab",
        "label": "评论与分配",
        "disabled": false,
        "info": "处理工单评论和分配"
    },
    {
        "id": "0e92ae84089ec318",
        "type": "tab",
        "label": "工单管理系统",
        "disabled": false,
        "info": "完整的工单管理流程",
        "env": []
    },
    {
        "id": "pushNotificationFlow",
        "type": "tab",
        "label": "推送通知服务",
        "disabled": false,
        "info": "处理工单系统的通知推送"
    },
    {
        "id": "diet-app-flows",
        "type": "tab",
        "label": "减脂食谱应用流程",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b5991e6b.6c1f3",
        "type": "tab",
        "label": "Notion 日报监控",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "514ec94e7d382f6a",
        "type": "tab",
        "label": "用户管理",
        "disabled": false,
        "info": "用于处理认证相关的流程",
        "env": []
    },
    {
        "id": "f2c8135e089accd7",
        "type": "tab",
        "label": "生产报告",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7eee9f5f113f7a64",
        "type": "tab",
        "label": "系统性参数",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "db-api-flow",
        "type": "tab",
        "label": "web项目查询API",
        "disabled": false,
        "info": "数据库API流程，使用node-red-node-mysql2节点实现"
    },
    {
        "id": "api-configs-individual-flow",
        "type": "tab",
        "label": "API配置单条记录管理",
        "disabled": false,
        "info": "用于管理API配置的Node-RED流程，每个API作为单独的一条记录保存到MySQL数据库中，支持CORS",
        "env": []
    },
    {
        "id": "1dbac401a15b31e3",
        "type": "subflow",
        "name": "设备控制",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 580,
                "y": 280,
                "wires": [
                    {
                        "id": "c1d478caf831f014"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 860,
                "y": 280,
                "wires": [
                    {
                        "id": "2390afa3622f2177",
                        "port": 0
                    },
                    {
                        "id": "2b835fb0a40b9010",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3d7e0dd7494b5059",
        "type": "group",
        "z": "859f41f963de2747",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "0d2afbdaacbc9ec7",
            "73ea2090dc046035",
            "fe7656e0a0bf41d6",
            "d9720ac441841114",
            "ac90f8718c55b903"
        ],
        "x": 14,
        "y": 679,
        "w": 592,
        "h": 142
    },
    {
        "id": "dce4f4c7863810d7",
        "type": "group",
        "z": "859f41f963de2747",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "45017919c27f0221",
            "788272edcd02c78f",
            "0337f44d70ac8848",
            "47401130466a20e4",
            "60d0881fbe64afc1",
            "6935f0af7720c3f9",
            "8927495ef57377e8",
            "49afcd617fe4ef7c",
            "f79184186e2efdf9",
            "b2f3a153d3598181",
            "4a60f6368cbd431b",
            "700b832f82557648",
            "7d3ad12f0ea69b2c",
            "6b4b694d71507124",
            "38fbe01efd508d29",
            "0b283ac9b65c6564",
            "0cafb06ffa026ded",
            "8bfdcaecafba49b9",
            "e5d56f6b314ee621",
            "dc69055ae8ee8d7f",
            "cb449478c70f4958",
            "48ae1d224562247a",
            "ec2687c4131f9667",
            "57ad95dedf04f818",
            "4a2aaa1df436721f",
            "8ddcdd36dedc2bd1",
            "efb83ec4c360401e",
            "3e160965dab344fe",
            "e3f0e3b6a513fc29",
            "d88635f9f41d9130",
            "31d7e2b8baf63d07",
            "844605cb2a732c33"
        ],
        "x": 14,
        "y": 2019,
        "w": 1442,
        "h": 602
    },
    {
        "id": "913a2b275611eaf8",
        "type": "group",
        "z": "859f41f963de2747",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6823b1ca63511eb3",
            "b043a0435003b89b",
            "5db1b09ceda0269a",
            "3a6c1a455ba0b647",
            "b0544daa6f7e3c67",
            "d8abf4063d35c4e4",
            "590a07c83fe4d39e",
            "c511ae5bcca670ad",
            "fd416af4d1cbd0df",
            "220c83d51faef72e",
            "86095c16894b7bae",
            "b858e9de541f7931",
            "68bd631901de9de3",
            "964ad252eeac10af",
            "bec92288fc2ac3c5",
            "1dd39f081aa23548",
            "41fd8115f0c55055",
            "84687ec2d4d8da56",
            "df32bbb85910d8b3",
            "48a1dc1263af22c2",
            "39ef05505d2198ab",
            "b84c078b8265459e",
            "87f6bc058a7c8a70",
            "6a9f2c2962f90de9",
            "3cdd44f6f0b5d488",
            "b13f1e39c4353685",
            "b9f8cf1cd7f7dd3b",
            "e6a5a28273f1fa78",
            "654a2896c9c1d351",
            "d9513f72f0470339",
            "1e079a26f3095336",
            "6920c9cce927f292",
            "6a6500eedc2344cc",
            "b1454abe06c88df7",
            "ce3d7cdcc8012901",
            "e6d29878675f95df",
            "26466d791d5295fd",
            "a94ac040e42d0511",
            "e1a216b495b323f5",
            "11fd5794cfb10282"
        ],
        "x": 14,
        "y": -1,
        "w": 1592,
        "h": 642
    },
    {
        "id": "25a241c4883c1792",
        "type": "group",
        "z": "859f41f963de2747",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "e948e0b22931a686",
            "2afba5a996010628",
            "e61e9dd3429bc15c",
            "d75c324845ee0d03",
            "73f9f78b4eb0a8e0",
            "25ef232beb7c497e",
            "8dbad5eb1c5c29f3",
            "62f82f9ff7d5a228",
            "dff087d3172488ab",
            "c5d6854ba00afb08",
            "5db4cbcb3617bec7",
            "dbe019a4c55be8e4",
            "d3c01d12208c953c",
            "74b27db631a2ced9",
            "c4eb3a7254055a52",
            "f9a90d4c114e8da3",
            "b0f54e297ede388b",
            "0a18670e736b871a",
            "85ddcb6dd773e22b",
            "99c896abb280af44",
            "62af1dd31302449f",
            "13bd6f491b586e02",
            "1c91285106e36e9c",
            "247993ecb829e9f2",
            "5d9f0b2568f4f429",
            "7436fd2eb1c81efe",
            "3e4de147d709770a",
            "679522b38227656a",
            "e8262bcaf6e0bcfb",
            "59e9e17a5a96919b"
        ],
        "x": 14,
        "y": 1379,
        "w": 1212,
        "h": 622
    },
    {
        "id": "10dfa72cd40e7f8d",
        "type": "group",
        "z": "859f41f963de2747",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a5645ca8e9f2431e",
            "5b2b32d9f5ea8a91",
            "afd250e99fb20bc2",
            "2c50b1d87fb4e93a",
            "2b4e7a90385f2ddb",
            "43b7570c621aec1d",
            "ba3691366db1051c",
            "3a94ee9e4a1ae20a"
        ],
        "x": 3134,
        "y": 799,
        "w": 732,
        "h": 262
    },
    {
        "id": "e926111792e0afb7",
        "type": "group",
        "z": "859f41f963de2747",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "34937b355cab2fe1",
            "87073ce4c7cdabeb",
            "92b132ff51a29d53",
            "267dad21311cf6f1",
            "a091cbd82ca7192b",
            "23bd7deebdec71bd",
            "0ceaf26ff27a7dca",
            "5789484545f9c375",
            "b97abbefb6301a79",
            "ca5e40b671907fe3",
            "10b113e3b56ce477"
        ],
        "x": 1294,
        "y": 1639,
        "w": 1032,
        "h": 182
    },
    {
        "id": "a4d78c1c37c8fd91",
        "type": "group",
        "z": "4a8b9d9bc600415f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3fa15ae0a3d6e6c3",
            "5d74578c37f176b9",
            "21e45a5ce2bfeaa9",
            "cae54cc02a22cc69",
            "0f694f3c9d354d82",
            "d57e4934846d02eb",
            "a05f5d965a6873ca",
            "1b69da30dddcefd0",
            "e815864018ed0e7c",
            "72ddedb7470378a4",
            "c19994b511408ecc",
            "10de2f7047c256bc",
            "6c0aeec4d202837c",
            "f291735a6badd02c"
        ],
        "x": 1714,
        "y": 219,
        "w": 1032,
        "h": 222
    },
    {
        "id": "bebffb8be31ecc1a",
        "type": "group",
        "z": "4a8b9d9bc600415f",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "135cc70bd025b235",
            "a8b4ac95a7d3a406",
            "c51cd1417358bfcb",
            "4373ce7897cbb4bf",
            "4096c69b358ce6ec",
            "1e57cb1d97a4e4c9",
            "a754afc68cbdd3a7",
            "53382a1301362b26",
            "0a7c1e21fdea9e73",
            "9e1f21928b89f55e",
            "1723989c6ea68737",
            "889b73ed1c9ef4a7",
            "0d7eece39b3df80a",
            "9c64b22d1803c61b",
            "d60a8235d3428c91",
            "843dd70231981aaa",
            "634c8fce983e7fcf",
            "eadeecdc93c81eba",
            "b164edbd73d50e69",
            "765399ccd696c53e",
            "b78c25f95400e15c",
            "1679c704b2633884",
            "359802380d9eaf3f",
            "360d417c52119f2e",
            "e908189f44a62160",
            "463766892ed2ebbf",
            "76e5859d5a6a8903",
            "3611b0294495c7d3",
            "04b5d06012f01fda",
            "33d29784be1d3a7d",
            "b6315c446b194ed1",
            "184ccfc66eac21be",
            "08700ee926c9eff9",
            "5c800a8bd8bb3890",
            "db6d1e645df9ca55",
            "ac717cf069c1a471",
            "9b24c968db21e23f",
            "38e984285fbbcbd4",
            "9b18392e91dbc48a",
            "60e0f4c27c790546"
        ],
        "x": 34,
        "y": 659,
        "w": 1072,
        "h": 862
    },
    {
        "id": "485b149079079899",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.173",
        "tcpPort": "23",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d02c1445644c9ae1",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.186",
        "tcpPort": "26",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "d2e2ab916062464c",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.105",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "6fe5fef749706568",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.106",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": false,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "364713192c0f1178",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.108",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e3d5e9572467c502",
        "type": "MySQLdatabase",
        "name": "",
        "host": "192.168.1.108",
        "port": "13307",
        "db": "nodered",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "806ba83c98eb2e99",
        "type": "MySQLdatabase",
        "name": "",
        "host": "192.168.1.108",
        "port": "13307",
        "db": "users",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "c313a047e3c638f1",
        "type": "websocket-listener",
        "path": "/xidiya",
        "wholemsg": "false"
    },
    {
        "id": "bf84fe50fb7a72d9",
        "type": "websocket-listener",
        "path": "/yaqi1",
        "wholemsg": "false"
    },
    {
        "id": "04c53f3b80e4883c",
        "type": "websocket-listener",
        "path": "/vgyuan",
        "wholemsg": "false"
    },
    {
        "id": "9c1d2fe6feb24f0c",
        "type": "websocket-listener",
        "path": "/vsuv",
        "wholemsg": "false"
    },
    {
        "id": "66af7c552a144e23",
        "type": "websocket-listener",
        "path": "/yin",
        "wholemsg": "false"
    },
    {
        "id": "b14678bf90eaa9c2",
        "type": "websocket-listener",
        "path": "/waifan",
        "wholemsg": "false"
    },
    {
        "id": "db931e1580de4804",
        "type": "websocket-listener",
        "path": "/twoyhg",
        "wholemsg": "false"
    },
    {
        "id": "d60221e42718cf36",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.108",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "edd8df3ebc515e19",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "192.168.1.100",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": 2,
        "cycletime": "3000",
        "timeout": 2000,
        "name": "",
        "vartable": [
            {
                "addr": "DB1,REAL0",
                "name": "YW"
            },
            {
                "addr": "DB1,REAL2100",
                "name": "IN_PH"
            },
            {
                "addr": "DB1,REAL3180",
                "name": "IN_SS"
            },
            {
                "addr": "DB1,REAL2160",
                "name": "OUT_PH"
            },
            {
                "addr": "DB1,REAL3240",
                "name": "OUT_SS"
            }
        ]
    },
    {
        "id": "2c17e4a73d5171ff",
        "type": "websocket-listener",
        "path": "/ws/site/4",
        "wholemsg": "false"
    },
    {
        "id": "50fcbda9bec92cec",
        "type": "MySQLdatabase",
        "name": "",
        "host": "192.168.1.108",
        "port": "13307",
        "db": "foots",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "85bc2088d91de0e1",
        "type": "websocket-listener",
        "path": "/ws/device2",
        "wholemsg": "false"
    },
    {
        "id": "8487e0e6a7497948",
        "type": "websocket-listener",
        "path": "/ws/device1",
        "wholemsg": "false"
    },
    {
        "id": "3ae3711f927f22fc",
        "type": "mysql2-server",
        "host": "192.168.1.108",
        "port": "13307",
        "username": "root",
        "password": "008027",
        "db": "nodered",
        "servername": ""
    },
    {
        "id": "328d33290f226639",
        "type": "MySQLdatabase",
        "name": "",
        "host": "192.168.1.108",
        "port": "13307",
        "db": "gtweb",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "0e2a1edf01b6f98a",
        "type": "function",
        "z": "1dbac401a15b31e3",
        "name": "gate切换器",
        "func": "// 控制开关的逻辑\nif (msg.payload === 'open') {\n    return { topic: 'control', payload: 'open' };\n} else if (msg.payload === 'close') {\n    return { topic: 'control', payload: 'close' };\n} else if (msg.payload === 'toggle') {\n    return { topic: 'control', payload: 'toggle' };\n}\nreturn null; // 不发送其他消息\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f006442aa2d4a412",
        "type": "function",
        "z": "1dbac401a15b31e3",
        "name": "function 33",
        "func": "// 初始化全局变量存储客户端连接\nif (global.wsClients === undefined) {\n    global.wsClients = {};\n}\n\n// 取得客户端ID (使用WebSocket ID)\nconst clientId = msg._session.id;\n\n// 检查连接状态事件\nif (msg.payload === 'connected') {\n    node.log('新WebSocket客户端连接: ' + clientId);\n    \n    // 为新客户端创建状态对象\n    global.wsClients[clientId] = {\n        id: clientId,\n        connected: true,\n        lastActive: Date.now(),\n        siteId: null,\n        clientInfo: {}\n    };\n    \n    return null;\n}\n\nif (msg.payload === 'disconnected') {\n    node.log('WebSocket客户端断开连接: ' + clientId);\n    \n    if (global.wsClients[clientId]) {\n        delete global.wsClients[clientId];\n    }\n    \n    return null;\n}\n\n// 解析消息\nlet messageData;\ntry {\n    if (typeof msg.payload === 'string') {\n        messageData = JSON.parse(msg.payload);\n    } else {\n        messageData = msg.payload;\n    }\n} catch (e) {\n    node.warn('无效的JSON消息: ' + msg.payload);\n    return null;\n}\n\n// 记录收到的消息\nnode.log('收到WebSocket消息: ' + JSON.stringify(messageData));\n\n// 确保客户端记录存在\nif (!global.wsClients[clientId]) {\n    global.wsClients[clientId] = {\n        id: clientId,\n        connected: true,\n        lastActive: Date.now(),\n        siteId: null,\n        clientInfo: {}\n    };\n}\n\n// 更新客户端活跃时间\nglobal.wsClients[clientId].lastActive = Date.now();\n\n// 如果消息包含siteId，更新客户端记录\nif (messageData.siteId) {\n    global.wsClients[clientId].siteId = messageData.siteId;\n}\n\n// 如果是初始化消息，保存客户端信息\nif (messageData.type === 'init' && messageData.clientInfo) {\n    global.wsClients[clientId].clientInfo = messageData.clientInfo;\n}\n\n// 统一消息格式\nmsg._clientId = clientId;\nmsg.messageType = messageData.type;\nmsg.payload = messageData;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 80,
        "wires": [
            [
                "7b5caa9dd245e9f1"
            ]
        ]
    },
    {
        "id": "2390afa3622f2177",
        "type": "websocket in",
        "z": "1dbac401a15b31e3",
        "name": "Device WebSocket",
        "server": "85bc2088d91de0e1",
        "client": "",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "f006442aa2d4a412"
            ]
        ]
    },
    {
        "id": "7b5caa9dd245e9f1",
        "type": "switch",
        "z": "1dbac401a15b31e3",
        "name": "路由消息",
        "property": "messageType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_device_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "command",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "init",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "client_close",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 440,
        "y": 80,
        "wires": [
            [
                "a51fd8d62126e943"
            ],
            [
                "53e9eb64efa4a8cd"
            ],
            [
                "2b835fb0a40b9010"
            ],
            [
                "f2c6324b2a00816e"
            ],
            [
                "da86880b0ce1cebd"
            ]
        ]
    },
    {
        "id": "a51fd8d62126e943",
        "type": "function",
        "z": "1dbac401a15b31e3",
        "name": "处理心跳",
        "func": "// 发送pong响应\nmsg.payload = {\n    type: 'pong',\n    timestamp: Date.now(),\n    serverTime: new Date().toISOString()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 20,
        "wires": [
            [
                "c1d478caf831f014",
                "465f4bdf7f1ec167"
            ]
        ]
    },
    {
        "id": "2b835fb0a40b9010",
        "type": "function",
        "z": "1dbac401a15b31e3",
        "name": "处理控制命令",
        "func": "// 命令处理函数 - 将前端命令转换为设备控制指令\nconst command = msg.payload;\nconst clientId = msg._clientId;\nconst siteId = command.siteId;\n\nif (!siteId) {\n    node.warn('命令没有指定siteId');\n    return null;\n}\n\n// 记录命令信息\nnode.log('收到WebSocket命令: ' + JSON.stringify(command));\n\n// 对收到的命令进行分类处理\nlet controlType, deviceId, action, feedbackMessage;\nlet deviceParams = {};\n\n// 根据前端发送的命令格式提取关键信息\nif (command.type === 'command') {\n    // 判断具体是哪种控制类型\n    if (command.deviceName && (command.action === 'start' || command.action === 'stop')) {\n        // 设备启停控制\n        controlType = 'device_control';\n        deviceId = command.deviceName;\n        action = command.action;\n        feedbackMessage = `设备 ${deviceId} ${action === 'start' ? '启动' : '停止'} 命令已接收`;\n        \n        // 构建设备控制参数 - 这里根据实际设备接口定义\n        deviceParams = {\n            device: deviceId,\n            operation: action,\n            siteId:siteId\n            // 可添加特定设备所需参数\n        };\n    } \n    else if (command.valveName && (command.action === 'open' || command.action === 'close')) {\n        // 阀门控制\n        controlType = 'valve_control';\n        deviceId = command.valveName;\n        action = command.action;\n        feedbackMessage = `阀门 ${deviceId} ${action === 'open' ? '打开' : '关闭'} 命令已接收`;\n        \n        // 构建阀门控制参数\n        deviceParams = {\n            valve: deviceId,\n            operation: action,\n            openKey: command.openKey,  // 前端传递的特定开阀键值\n            closeKey: command.closeKey // 前端传递的特定关阀键值\n        };\n    }\n    else if (command.deviceName && command.frequency !== undefined) {\n        // 频率设置\n        controlType = 'set_frequency';\n        deviceId = command.deviceName;\n        action = 'set_frequency';\n        const frequency = parseFloat(command.frequency);\n        feedbackMessage = `设备 ${deviceId} 频率设置为 ${frequency} Hz 命令已接收`;\n        \n        // 构建频率设置参数\n        deviceParams = {\n            device: deviceId,\n            frequency: frequency\n        };\n    }\n    else {\n        // 未知命令类型\n        node.warn('无法识别的命令格式: ' + JSON.stringify(command));\n        \n        // 返回错误反馈\n        msg.payload = {\n            type: 'command_feedback',\n            siteId: siteId,\n            deviceName: command.deviceName || command.valveName,\n            success: false,\n            message: '无法识别的命令格式',\n            timestamp: Date.now()\n        };\n        return msg;\n    }\n    \n    // 设置控制信息到上下文，可用于其他节点\n    flow.set('lastControlCommand', {\n        type: controlType,\n        deviceId: deviceId,\n        action: action,\n        params: deviceParams,\n        timestamp: Date.now()\n    });\n    \n    // 创建设备控制输出 - 这将连接到实际设备控制节点\n    const deviceControlMsg = {\n        topic: controlType,\n        payload: deviceParams\n    };\n    \n    // 创建客户端反馈\n    const feedbackMsg = {\n        payload: {\n            type: 'command_feedback',\n            siteId: siteId,\n            deviceName: command.deviceName || command.valveName,\n            action: action,\n            success: true,\n            message: feedbackMessage,\n            timestamp: Date.now()\n        },\n        _clientId: clientId\n    };\n    \n    // 发送两个输出：[0]客户端反馈, [1]设备控制命令\n    return [feedbackMsg, deviceControlMsg];\n}\nelse {\n    // 非控制类型命令\n    node.warn('接收到非控制类型命令: ' + command.type);\n    return null;\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 100,
        "wires": [
            [
                "c1d478caf831f014"
            ],
            []
        ]
    },
    {
        "id": "f2c6324b2a00816e",
        "type": "function",
        "z": "1dbac401a15b31e3",
        "name": "处理初始化消息",
        "func": "const clientId = msg._clientId;\nconst siteId = msg.payload.siteId;\nconst clientInfo = msg.payload.clientInfo || {};\n\nnode.log(`客户端 ${clientId} 初始化连接，站点ID: ${siteId}`);\n\n// 发送确认初始化成功的消息\nmsg.payload = {\n    type: 'init_confirmed',\n    siteId: siteId,\n    message: '初始化成功',\n    timestamp: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 140,
        "wires": [
            [
                "c1d478caf831f014"
            ]
        ]
    },
    {
        "id": "da86880b0ce1cebd",
        "type": "function",
        "z": "1dbac401a15b31e3",
        "name": "处理客户端关闭",
        "func": "const clientId = msg._clientId;\nconst closeReason = msg.payload.reason || 'unknown';\n\nnode.log('客户端通知关闭: ' + clientId + ', 原因: ' + closeReason);\n\n// 从客户端列表中移除\nif (global.wsClients && global.wsClients[clientId]) {\n    delete global.wsClients[clientId];\n}\n\n// 发送确认关闭的消息\nmsg.payload = {\n    type: 'close_confirmed',\n    message: '连接已正常关闭',\n    timestamp: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 180,
        "wires": [
            [
                "c1d478caf831f014"
            ]
        ]
    },
    {
        "id": "c1d478caf831f014",
        "type": "websocket out",
        "z": "1dbac401a15b31e3",
        "name": "WebSocket输出",
        "server": "85bc2088d91de0e1",
        "client": "",
        "x": 1020,
        "y": 100,
        "wires": []
    },
    {
        "id": "7d7258b01b793332",
        "type": "inject",
        "z": "1dbac401a15b31e3",
        "name": "定时清理客户端",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "7705e88ce139688c"
            ]
        ]
    },
    {
        "id": "7705e88ce139688c",
        "type": "function",
        "z": "1dbac401a15b31e3",
        "name": "清理断开的客户端",
        "func": "// 此函数定期执行，清理长时间不活跃的客户端\nif (!global.wsClients) {\n    return null;\n}\n\nconst now = Date.now();\nconst inactiveThreshold = 60000; // 60秒不活跃视为断开\n\nlet cleanCount = 0;\nfor (let clientId in global.wsClients) {\n    const client = global.wsClients[clientId];\n    const lastActiveTime = client.lastActive || 0;\n    \n    // 如果客户端超过60秒没有活动，认为已断开\n    if (now - lastActiveTime > inactiveThreshold) {\n        delete global.wsClients[clientId];\n        cleanCount++;\n    }\n}\n\nif (cleanCount > 0) {\n    node.log('已清理 ' + cleanCount + ' 个不活跃的客户端连接');\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "465f4bdf7f1ec167",
        "type": "debug",
        "z": "1dbac401a15b31e3",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 20,
        "wires": []
    },
    {
        "id": "53e9eb64efa4a8cd",
        "type": "function",
        "z": "1dbac401a15b31e3",
        "name": "处理设备状态请求",
        "func": "const siteId = msg.payload.siteId;\nif (!siteId) {\n    node.warn('没有指定siteId，无法获取设备状态');\n    return null;\n}\n\n// 首先确认收到状态请求\nmsg.payload = {\n    type: 'status_request_received',\n    siteId: siteId,\n    message: '状态请求已接收，正在处理',\n    timestamp: Date.now()\n};\n\n// 发送确认消息\nnode.send(msg);\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 60,
        "wires": [
            [
                "c1d478caf831f014"
            ]
        ]
    },
    {
        "id": "b7e1683f6a1c0b24",
        "type": "http request",
        "z": "ee8e44366662d029",
        "name": "获取Access Token",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=wx3531b08f52f87d34&secret=8702f5bb0af9b4b2342df184a5f81e8e",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 100,
        "wires": [
            [
                "b80043ab55446f9f"
            ]
        ]
    },
    {
        "id": "b80043ab55446f9f",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "存储Access Token",
        "func": "global.set('access_token', msg.payload.access_token);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "ae9d4cdffa305e24",
        "type": "http request",
        "z": "ee8e44366662d029",
        "name": "发送模板消息",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 840,
        "y": 260,
        "wires": [
            [
                "896f89eab1a5808c"
            ]
        ]
    },
    {
        "id": "7d49feab20d42d9b",
        "type": "inject",
        "z": "ee8e44366662d029",
        "name": "定时获取Access Token",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 310,
        "y": 100,
        "wires": [
            [
                "b7e1683f6a1c0b24"
            ]
        ]
    },
    {
        "id": "c91cdd1c4c6ddf2f",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "构建模板消息",
        "func": "var access_token = global.get('access_token');\nmsg.url = `https://api.weixin.qq.com/cgi-bin/user/get?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 40,
        "wires": [
            [
                "3fa19becfc365286"
            ]
        ]
    },
    {
        "id": "d5463d1c5ac2a301",
        "type": "inject",
        "z": "ee8e44366662d029",
        "name": "发送模板消息按钮",
        "props": [],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 190,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "3fa19becfc365286",
        "type": "http request",
        "z": "ee8e44366662d029",
        "name": "发送模板消息",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 740,
        "y": 40,
        "wires": [
            [
                "b4ef69d2a871de54"
            ]
        ]
    },
    {
        "id": "b4ef69d2a871de54",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "function 36",
        "func": "var openid = msg.payload.data.openid;\nmsg.payload = openid;\nglobal.set(\"openid\",openid);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 40,
        "wires": [
            [
                "896f89eab1a5808c"
            ]
        ]
    },
    {
        "id": "768bfd2d902db3ee",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "获取时间并转换格式",
        "func": "// 获取当前时间\nvar now = new Date();\n\n// 将时间增加 8 小时\nnow.setHours(now.getHours() + 8);\n\n// 获取年、月、日、小时和分钟\nvar year = now.getFullYear();\nvar month = (\"0\" + (now.getMonth() + 1)).slice(-2); // 月份从0开始，所以加1，并确保两位数\nvar day = (\"0\" + now.getDate()).slice(-2); // 确保两位数\nvar hours = (\"0\" + now.getHours()).slice(-2); // 确保两位数\nvar minutes = (\"0\" + now.getMinutes()).slice(-2); // 确保两位数\n\n// 格式化时间为 \"YYYY-MM-DD HH:mm\"\nvar formattedTime = `${year}-${month}-${day} ${hours}:${minutes}`;\n\n// 将格式化后的时间添加到消息 payload 中\nmsg.payload = formattedTime;\nglobal.set('time',formattedTime);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6791b9e180e9a19f",
        "type": "inject",
        "z": "ee8e44366662d029",
        "name": "获取时间并转换格式",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 300,
        "y": 160,
        "wires": [
            [
                "768bfd2d902db3ee"
            ]
        ]
    },
    {
        "id": "db0917885d27da09",
        "type": "split",
        "z": "ee8e44366662d029",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 450,
        "y": 260,
        "wires": [
            [
                "bb6f8c54648c5b26"
            ]
        ]
    },
    {
        "id": "7e93a2e5cad595ea",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 260,
        "wires": [
            [
                "db0917885d27da09"
            ]
        ]
    },
    {
        "id": "bb6f8c54648c5b26",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "设备告警通知",
        "func": "var access_token = global.get('access_token');\nvar time = global.get('time');\nvar openid = msg.payload;\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"ZpAloMkEaIjcdtW9dRQmFy8RoxdtvpOnDEDvr8jNOrs\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing1\": {\n            \"value\": \"正泽物联平台\",\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": \"公众号推送测试\",\n            \"color\": \"#173177\"\n        },\n        \"thing3\": {\n            \"value\": \"请忽略推送信息\",\n            \"color\": \"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 260,
        "wires": [
            [
                "ae9d4cdffa305e24"
            ]
        ]
    },
    {
        "id": "22f130bb656221fe",
        "type": "inject",
        "z": "ee8e44366662d029",
        "name": "系统通知",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 260,
        "wires": [
            [
                "7e93a2e5cad595ea"
            ]
        ]
    },
    {
        "id": "896f89eab1a5808c",
        "type": "debug",
        "z": "ee8e44366662d029",
        "name": "debug 69",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 260,
        "wires": []
    },
    {
        "id": "6e43081a2d8c403a",
        "type": "inject",
        "z": "ee8e44366662d029",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "c240bf74c1f53cef"
            ]
        ]
    },
    {
        "id": "98eb9f4e34515d6f",
        "type": "http request",
        "z": "ee8e44366662d029",
        "name": "发送模板消息",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1040,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "884c6da764360d3f",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "设备离线告警",
        "func": "var access_token = global.get('access_token');\nvar time = global.get('time');\nvar openid = msg.payload;\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": \"oVhgJ6T94nhHMRkTgItNrRwMnNIY\",\n    \"template_id\": \"vpks8dx3GNykOuZPNUKeBYB9v0C6ZOXoOkysC1DNWVY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing7\": {\n            \"value\": \"亚琦处理站\",\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": \"控制终端\",\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": \"离线\",\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 420,
        "wires": [
            [
                "98eb9f4e34515d6f",
                "cc2e7b86e8fdc12b"
            ]
        ]
    },
    {
        "id": "e00aa034f6da8dd2",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "设备上线告警",
        "func": "var access_token = global.get('access_token');\nvar time = global.get('time');\nvar openid = msg.payload;\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": \"oVhgJ6T94nhHMRkTgItNrRwMnNIY\",\n    \"template_id\": \"-nOwSKt3OHr4NZd0gKG5uJ7YgDa1EI57Qb5Sz2BR_lY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing11\": {\n            \"value\": \"亚琦处理站\",\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": \"控制终端\",\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": \"上线\",\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 340,
        "wires": [
            [
                "98eb9f4e34515d6f",
                "cc2e7b86e8fdc12b"
            ]
        ]
    },
    {
        "id": "b6021f85c4871a1f",
        "type": "switch",
        "z": "ee8e44366662d029",
        "name": "设备状态切换",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "设备在线",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备离线",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 380,
        "wires": [
            [
                "5cd42b5e26b1cb46",
                "e00aa034f6da8dd2"
            ],
            [
                "884c6da764360d3f",
                "03e3e1491cd838e7"
            ]
        ]
    },
    {
        "id": "ba9c4cc09e09e4b2",
        "type": "split",
        "z": "ee8e44366662d029",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 930,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "5cd42b5e26b1cb46",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 300,
        "wires": [
            [
                "ba9c4cc09e09e4b2"
            ]
        ]
    },
    {
        "id": "03e3e1491cd838e7",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 460,
        "wires": [
            [
                "14389d87ac71d820"
            ]
        ]
    },
    {
        "id": "14389d87ac71d820",
        "type": "split",
        "z": "ee8e44366662d029",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 950,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c240bf74c1f53cef",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "设备状态",
        "func": "const TIMEOUT_DURATION = 1 * 60 * 1000; // 10分钟\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('lastMessageTime', null);\n    context.set('timeoutId', null);\n    context.set('isOnline', null); // 初始状态设置为 null\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    if (context.get('isOnline') !== false) { // 仅在状态不是离线时执行\n        context.set('isOnline', false);\n        node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n        node.send({ payload: \"设备离线\", topic: \"device/status\" });\n    }\n}\n\n// 如果有现有的超时，清除它\nif (context.get('timeoutId') !== null) {\n    clearTimeout(context.get('timeoutId'));\n}\n\n// 更新最后接收到消息的时间\ncontext.set('lastMessageTime', Date.now());\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\ncontext.set('timeoutId', timeoutId);\n\n// 检查并更新设备状态\nif (context.get('isOnline') === null) { // 初始状态\n    context.set('isOnline', true);\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return null; // 初始状态收到数据，不发送消息\n} else if (!context.get('isOnline')) { // 设备从离线变为在线\n    context.set('isOnline', true);\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return { payload: \"设备在线\", topic: \"device/status\" };\n} else {\n    // 如果设备已经在线，不发送消息，只更新状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return null;\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 380,
        "wires": [
            [
                "b6021f85c4871a1f"
            ]
        ]
    },
    {
        "id": "cc2e7b86e8fdc12b",
        "type": "debug",
        "z": "ee8e44366662d029",
        "name": "debug 70",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 380,
        "wires": []
    },
    {
        "id": "43eb57db7f4385f9",
        "type": "debug",
        "z": "ee8e44366662d029",
        "name": "debug 71",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 500,
        "wires": []
    },
    {
        "id": "e4e1038c7737ef7e",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "function 42",
        "func": "var name = flow.get(\"name\");\nmsg.payload = name;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 500,
        "wires": [
            [
                "43eb57db7f4385f9"
            ]
        ]
    },
    {
        "id": "16f7ca2243be5330",
        "type": "inject",
        "z": "ee8e44366662d029",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 500,
        "wires": [
            [
                "e4e1038c7737ef7e"
            ]
        ]
    },
    {
        "id": "11a14f63660963d4",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "设备故障报警",
        "func": "// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('lastAlarmState', null); // 初始化报警状态\n}\n\n// 获取输入消息中的报警变量\nlet alarmVariable = flow.get(\"alarm\");\n\n// 检查报警状态\nif (alarmVariable === 1 && context.get('lastAlarmState') !== 1) {\n    context.set('lastAlarmState', 1);\n    node.status({ fill: \"red\", shape: \"dot\", text: \"设备故障\" });\n    return { payload: \"设备故障报警\", topic: \"device/alarm\" };\n} else if (alarmVariable === 0 && context.get('lastAlarmState') !== 0) {\n    context.set('lastAlarmState', 0);\n    node.status({ fill: \"green\", shape: \"dot\", text: \"设备正常\" });\n    return { payload: \"设备恢复正常\", topic: \"device/alarm\" };\n}\n\n// 如果状态没有变化，则不输出任何消息\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 640,
        "wires": [
            [
                "57affa89a25cf809"
            ]
        ]
    },
    {
        "id": "567cc89efbcc22e0",
        "type": "inject",
        "z": "ee8e44366662d029",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 270,
        "y": 620,
        "wires": [
            [
                "2e04d967dad7bcdb"
            ]
        ]
    },
    {
        "id": "8f81793bf3696584",
        "type": "inject",
        "z": "ee8e44366662d029",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 270,
        "y": 660,
        "wires": [
            [
                "2e04d967dad7bcdb"
            ]
        ]
    },
    {
        "id": "2e04d967dad7bcdb",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "function 43",
        "func": "var input = msg.payload;\n\n// 检查输入值\nif (input === 1) {\n    msg.text = \"1#进水5545泵故障\";\n    msg.bgcolor = \"yellow\";\n    msg.payload = \"close\";\n    msg.topic = \"control\";\n    \n    // 使用正则表达式提取故障前面的所有字符\n    let match = msg.text.match(/^(.+?)故障/);\n    if (match) {\n        let extractedText = match[1];\n        // 将提取的文本存储在 Flow 变量中\n        flow.set(\"name\", extractedText);\n    }\n} else if (input === 0) {\n    msg.payload = \"open\";\n    msg.topic = \"control\";\n}\n\n// 将报警状态存储在 Flow 变量中\nflow.set(\"alarm\", input);\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 640,
        "wires": [
            [
                "11a14f63660963d4"
            ]
        ]
    },
    {
        "id": "4921d7c3dbf62e02",
        "type": "http request",
        "z": "ee8e44366662d029",
        "name": "发送模板消息",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1300,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "b98eeb5c951da094",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "设备故障发送",
        "func": "var access_token = global.get('access_token');\nvar time = global.get('time');\nvar openid = msg.payload;\nvar name = flow.get(\"name\")\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": \"oVhgJ6T94nhHMRkTgItNrRwMnNIY\",\n    \"template_id\": \"R2eVYNN8qGV7xiUyxaMLeuzo5KsJip9QsmBBvZQyXJY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing22\": {\n            \"value\": \"亚琦处理站\",\n            \"color\": \"#173177\"\n        },\n        \"thing13\": {\n            \"value\": name,\n            \"color\": \"#173177\"\n        },\n        \"thing5\": {\n            \"value\": \"故障报警\",\n            \"color\": \"#173177\"\n        },\n        \"time2\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 660,
        "wires": [
            [
                "4921d7c3dbf62e02"
            ]
        ]
    },
    {
        "id": "3068bbf88df128b9",
        "type": "function",
        "z": "ee8e44366662d029",
        "name": "设备恢复发送",
        "func": "var access_token = global.get('access_token');\nvar time = global.get('time');\nvar openid = msg.payload;\nvar name = flow.get(\"name\");\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": \"oVhgJ6T94nhHMRkTgItNrRwMnNIY\",\n    \"template_id\": \"t0VKvfb3zVGKhW56_6EiIFLSHqlQ6rP2IewjMVlqmDU\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing12\": {\n            \"value\": \"亚琦处理站\",\n            \"color\": \"#173177\"\n        },\n        \"thing9\": {\n            \"value\": name,\n            \"color\": \"#173177\"\n        },\n        \"thing13\": {\n            \"value\": \"恢复正常\",\n            \"color\": \"#173177\"\n        },\n        \"time6\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 620,
        "wires": [
            [
                "4921d7c3dbf62e02"
            ]
        ]
    },
    {
        "id": "57affa89a25cf809",
        "type": "switch",
        "z": "ee8e44366662d029",
        "name": "设备状态切换",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "设备恢复正常",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备故障报警",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 860,
        "y": 640,
        "wires": [
            [
                "3068bbf88df128b9"
            ],
            [
                "b98eeb5c951da094"
            ]
        ]
    },
    {
        "id": "23df04387a4f8839",
        "type": "s7 control",
        "z": "7c14288f4889ff67",
        "endpoint": "edd8df3ebc515e19",
        "function": "cycletime",
        "name": "",
        "x": 190,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "9d61c43e44b1c335",
        "type": "s7 in",
        "z": "7c14288f4889ff67",
        "endpoint": "edd8df3ebc515e19",
        "mode": "all",
        "variable": "Q0.0",
        "diff": false,
        "name": "",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "36e64bcd66883b23"
            ]
        ]
    },
    {
        "id": "de6f1681ddafb8ef",
        "type": "modbus-flex-getter",
        "z": "7c14288f4889ff67",
        "name": "出水数据采集仪",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "d2e2ab916062464c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 440,
        "y": 160,
        "wires": [
            [
                "bdbaae2f3520ec02"
            ],
            []
        ]
    },
    {
        "id": "5f9e8d11bfb5b70a",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "",
        "func": "msg.payload = {\n\n    'fc': 3,\n\n    'unitid': 1,\n\n    'address': 0,\n\n    'quantity': 12,\n\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 160,
        "wires": [
            [
                "de6f1681ddafb8ef"
            ]
        ]
    },
    {
        "id": "1cc8334f3e50b957",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "",
        "func": "msg.payload = {\n\n    'fc': 3,\n\n    'unitid': 1,\n\n    'address': 0,\n\n    'quantity': 10,\n\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 200,
        "wires": [
            [
                "f8280d30022c2c94"
            ]
        ]
    },
    {
        "id": "f8280d30022c2c94",
        "type": "modbus-flex-getter",
        "z": "7c14288f4889ff67",
        "name": "进水数据采集仪",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "6fe5fef749706568",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 440,
        "y": 200,
        "wires": [
            [
                "1cd428d9648cb32a"
            ],
            []
        ]
    },
    {
        "id": "0551449281cac116",
        "type": "inject",
        "z": "7c14288f4889ff67",
        "name": "",
        "props": [],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "5f9e8d11bfb5b70a",
                "1cc8334f3e50b957"
            ]
        ]
    },
    {
        "id": "bdbaae2f3520ec02",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "数据转换",
        "func": "var results = [];\n\n// 循环处理每对数据\nfor (let i = 0; i < 7; i++) {\n    const num = [msg.payload[i * 2], msg.payload[i * 2 + 1]];\n\n    const buf = Buffer.allocUnsafe(4);\n    buf.writeUInt16BE(num[1], 2);\n    buf.writeUInt16BE(num[0], 0);\n    var floatValue = parseFloat(buf.readFloatBE(0).toFixed(2)); // 将结果保持为浮动数\n\n    results.push({ payload: floatValue }); // 将数字封装到对象中\n}\n\n// 将结果转换为仅包含数字的数组\nvar numbers = results.map(function (item) {\n    return item.payload;\n});\n\n// 设置不同的输出端点\nflow.set([\"out_ll\", \"out_cod\", \"out_nh3\", \"out_tn\", \"out_tp\"], numbers);\n\nmsg.payload = {\n    out_ll: numbers[0],\n    out_cod: numbers[1],\n    out_nh3: numbers[2],\n    out_tn: numbers[3],\n    out_tp: numbers[4],\n};\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1cd428d9648cb32a",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "数据转换",
        "func": "var results = [];\n\n// 循环处理每对数据\nfor (let i = 0; i < 7; i++) {\n    const num = [msg.payload[i * 2], msg.payload[i * 2 + 1]];\n\n    const buf = Buffer.allocUnsafe(4);\n    buf.writeUInt16BE(num[1], 2);\n    buf.writeUInt16BE(num[0], 0);\n    var floatValue = parseFloat(buf.readFloatBE(0).toFixed(2)); // 将结果保持为浮动数\n\n    results.push({ payload: floatValue }); // 将数字封装到对象中\n}\n\n// 将结果转换为仅包含数字的数组\nvar numbers = results.map(function (item) {\n    return item.payload;\n});\n\n// 将第一个元素乘以 3.6\nnumbers[0] = parseFloat((numbers[0] * 3.6).toFixed(3));\nnumbers[6] = parseFloat((numbers[0] * 24).toFixed(3));\n// 设置不同的输出端点\nflow.set([\"in_ll\", \"in_cod\", \"in_nh3\",], numbers);\n\nmsg.payload = {\n    in_ll: numbers[0],\n    in_cod: numbers[1],\n    in_nh3: numbers[2],\n};\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d56e8e49dd24c795",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "websocket",
        "func": "// 检查NaN值并替换为0\nfunction replaceNaN(value) {\n    return isNaN(value) ? 0 : value;\n}\n\n// 从flow中获取数据\nvar tag1 = flow.get([ 'in_lj','in_ll',  'in_cod', 'in_nh3']);\nvar tag2 = flow.get(['out_lj','out_ll', 'out_cod', 'out_nh3', 'out_tn', 'out_tp']);\n\n\n// 将获取的数据转换为浮点数并检查NaN\nvar in_lj = parseFloatAndCheckNaN(tag1[0]);\nvar in_ll = parseFloatAndCheckNaN(tag1[1]);\nvar in_cod = parseFloatAndCheckNaN(tag1[2]);\nvar in_nh3 = parseFloatAndCheckNaN(tag1[3]);\n// 转换数据\nvar out_lj = parseFloatAndCheckNaN(tag2[0]);\nvar out_ll = parseFloatAndCheckNaN(tag2[1]);\nvar out_cod = parseFloatAndCheckNaN(tag2[2]);\nvar out_nh3 = parseFloatAndCheckNaN(tag2[3]);\nvar out_tn = parseFloatAndCheckNaN(tag2[4]);\nvar out_tp = parseFloatAndCheckNaN(tag2[5]);\n\n// 将获取的数据转换为浮点数并检查NaN值\nfunction parseFloatAndCheckNaN(value) {\n    var parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n}\n\nvar tag11 = flow.get(['in_yw_erro', 'in_ll_erro', 'in_ll1_erro', 'in_ll2_erro', 'in_cod_erro', 'in_nh3_erro', 'in_tn_erro', 'in_tp_erro', 'in_ph_erro', 'in_ss_erro']);\nvar tag12 = flow.get(['out_ll_erro', 'out_cod_erro', 'out_nh3_erro', 'out_tn_erro', 'out_tp_erro', 'out_ph_erro', 'out_ss_erro']);\n\n// 构建进水数据\nvar indata = [\n    { name: '进水流量(L)', data: in_ll/3.6, dw: 'L/S', alarm: tag11[1] === 1 ? 1 : 0 },\n    { name: '进水流量(m³)', data: in_ll, dw: 'm³/h', alarm: tag11[1] === 1 ? 1 : 0 },\n    { name: '预计进水量', data: in_ll*24, dw: 'm³', alarm:  0 },\n    { name: '进水累计', data: in_lj, dw: 'm³', alarm:  0 },\n    { name: '进水COD', data: in_cod, dw: 'mg/l', alarm: tag11[4] === 1 ? 1 : 0 },\n    { name: '进水氨氮', data: in_nh3, dw: 'mg/l', alarm: tag11[5] === 1 ? 1 : 0 },\n\n];\n\n// 构建出水数据\nvar outdata = [\n    { name: '出水流量(L)', data: out_ll, dw: 'L/S', alarm: tag12[0] === 1 ? 1 : 0 },\n    { name: '出水流量(m³)', data: out_ll*3.6, dw: 'm³/h', alarm: tag12[0] === 1 ? 1 : 0 },\n    { name: '预计出水量', data: out_ll*3.6*24, dw: 'm³', alarm:  0 },\n    { name: '出水累计', data: out_lj, dw: 'm³', alarm:  0 },\n    { name: '出水COD', data: out_cod, dw: 'mg/l', alarm: tag12[1] === 1 ? 1 : 0 },\n    { name: '出水氨氮', data: out_nh3, dw: 'mg/l', alarm: tag12[2] === 1 ? 1 : 0 },\n    { name: '出水总氮', data: out_tn, dw: 'mg/l', alarm: tag12[3] === 1 ? 1 : 0 },\n    { name: '出水总磷', data: out_tp, dw: 'mg/l', alarm: tag12[4] === 1 ? 1 : 0 },\n];\n\n\n// 构建最终的消息负载\nmsg.payload = {\n    indata,\n    outdata,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 640,
        "wires": [
            [
                "80ec8bca607f5403"
            ]
        ]
    },
    {
        "id": "495c310a5193a68f",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "进水累计",
        "func": "\nvar ll1 = flow.get(\"in_ll\");\nvar ll = ll1/3.6\n// 计算累积流量\nif (!flow.get(\"lwjilqll\")) {\n    flow.set(\"lwjilqll\", 0);\n};\n\n\nvar cumu = flow.get(\"lwjilqll\");\nvar cumu1 = cumu + ll;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjilqll\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nmsg.payload = cumu3;\nflow.set(\"in_lj\", cumu3);\nglobal.set(\"gtin_lj\",cumu3);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "d14533bf6f52be93",
        "type": "inject",
        "z": "7c14288f4889ff67",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "495c310a5193a68f",
                "b9e268134bbeb4c0",
                "206a64e7dde746b7"
            ]
        ]
    },
    {
        "id": "206a64e7dde746b7",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "定时",
        "func": "var time = global.get(\"cstTime\"); // 获取时间对象\nvar hour = time.hour;\nvar minute = time.minute;\nvar second = time.second;\n\n// 检查是否为指定的时间 10:47:00\nif (hour === 0 && minute === 0 && second === 0) {\n    msg.payload = 0;\n    return msg; \n} else {\n    return null; \n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 240,
        "wires": [
            [
                "c9235c4d5dd3f6be"
            ]
        ]
    },
    {
        "id": "c9235c4d5dd3f6be",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "累计清零",
        "func": "var rest = msg.payload;\nvar variableNames = [ \"lwjilqll\",\"lwjilqll1\"];\n\nvariableNames.forEach(function (name) {\n    flow.set(name, rest);\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b9e268134bbeb4c0",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "出水累计",
        "func": "\nvar ll = flow.get(\"out_ll\");\n// 计算累积流量\nif (!flow.get(\"lwjilqll1\")) {\n    flow.set(\"lwjilqll1\", 0);\n};\n\n\nvar cumu = flow.get(\"lwjilqll1\");\nvar cumu1 = cumu + ll;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjilqll1\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nmsg.payload = cumu3;\nflow.set(\"out_lj\", cumu3);\nglobal.set(\"gtout_lj\",cumu3);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "67d15f11a9a0df7e",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "获取检测设备数据",
        "func": "// 获取 msg.payload 中的 out1 到 out5 的值\nlet outValues = [\"out_ll\", \"out_cod\", \"out_nh3\", \"out_tn\", \"out_tp\", \"out_ph\",'out_ss'];\n\n// 初始化一个新的对象\nlet optimizedPayload = {};\n\n// 遍历 out1 到 out5，检查并只保留有值的字段\noutValues.forEach((out) => {\n    // 如果该字段有值（不是 undefined），将其加入到 optimizedPayload 中\n    if (msg.payload[out] !== undefined) {\n        optimizedPayload[out] = msg.payload[out];\n    }\n});\n\n// 如果有有效的字段，更新 msg.payload，否则不做任何操作\nif (Object.keys(optimizedPayload).length > 0) {\n    msg.payload = optimizedPayload;\n    return msg;\n} else {\n    return null; // 如果没有有效字段，则不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 220,
        "wires": [
            [
                "395d595b6ff74666",
                "ddcada7ef53e48ab"
            ]
        ]
    },
    {
        "id": "395d595b6ff74666",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "设备检测",
        "func": "const TIMEOUT_DURATION = 10 * 60 * 1000; // 1分钟\n\n// 定义所有可能的 out 字段\nconst alloutFields = [\"out_ll\", \"out_cod\", \"out_nh3\", \"out_tn\", \"out_tp\", \"out_ph\",'out_ss'];\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timeoutId', null);\n    context.set('lastMessageTimes', {}); // 确保 lastMessageTimes 初始化为空对象\n    context.set('isOnline', {}); // 确保 isOnline 初始化为空对象\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 确保 context.get('isOnline') 和 context.get('lastMessageTimes') 都是对象\nlet isOnline = context.get('isOnline') || {};\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 处理超时并更新状态\nfunction handleTimeout(out) {\n    const lastMessageTime = lastMessageTimes[out];\n    if (lastMessageTime && Date.now() - lastMessageTime > TIMEOUT_DURATION) {\n        if (isOnline[out] !== false) {\n            isOnline[out] = false; // 标记设备离线\n            node.status({ fill: \"red\", shape: \"ring\", text: `${out} 离线` });\n            flow.set(`${out}`, 0); // 更新 flow 中对应 out 的值为 0\n            flow.set(`${out}_online`, 1); \n            let msg = {\n                payload: {\n                    d_name: \"出水仪表\",\n                    s_name: `${out === 'out_ll' ? '总出水流量计' : out === 'out_cod' ? '出水cod' : out === 'out_nh3' ? '出水氨氮' : out === 'out_tn' ? '出水总氮' : out === 'out_tp' ? '出水总磷' : out === 'out_ph' ? '出水ph' : '出水ss'}`,\n                    status0: \"离线\"\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${out}_online`, online); \n            messagesToSend.push(msg); // 设备离线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    }\n}\n\n// 遍历每个有效的 out 字段\nalloutFields.forEach((out) => {\n    const outValue = msg.payload[out];\n\n    // 如果接收到有效的 out 数据\n    if (outValue !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[out] = Date.now();\n\n        // 判断设备是否从离线状态恢复\n        if (!isOnline[out]) {\n            isOnline[out] = true; // 设备首次在线时设置为 true\n            let status = \"在线\";\n            node.status({ fill: \"green\", shape: \"dot\", text: `${out} 在线` });\n            flow.set(`${out}_online`, 0); \n            // 设置消息内容\n            let msg = {\n                payload: {\n                    d_name: \"出水仪表\",\n                    s_name: `${out === 'out_ll' ? '总出水流量计' : out === 'out_cod' ? '出水cod' : out === 'out_nh3' ? '出水氨氮' : out === 'out_tn' ? '出水总氮' : out === 'out_tp' ? '出水总磷' : out === 'out_ph' ? '出水ph' : '出水ss'}`,\n                    status0: status\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${out}_online`, online); \n            // 只在第一次设备状态变化时发送消息\n            messagesToSend.push(msg); // 设备在线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    } else {\n        // 如果没有接收到数据，则检查是否超时\n        handleTimeout(out);\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('isOnline', isOnline);\ncontext.set('lastMessageTimes', lastMessageTimes);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "b6e4f438b39ee049",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "获取检测设备数据",
        "func": "// 获取 msg.payload 中的 in_1 到 in_5 的值\nlet in_Values = [\"in_tn\", \"in_tp\", \"in_ph\", \"in_ss\"];\n\n// 初始化一个新的对象\nlet optimizedPayload = {};\n\n// 遍历 in_1 到 in_5，检查并只保留有值的字段\nin_Values.forEach((in_) => {\n    // 如果该字段有值（不是 undefined），将其加入到 optimizedPayload 中\n    if (msg.payload[in_] !== undefined) {\n        optimizedPayload[in_] = msg.payload[in_];\n    }\n});\n\n// 如果有有效的字段，更新 msg.payload，否则不做任何操作\nif (Object.keys(optimizedPayload).length > 0) {\n    msg.payload = optimizedPayload;\n    return msg;\n} else {\n    return null; // 如果没有有效字段，则不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 160,
        "wires": [
            [
                "b4a4ef4649ef0f63",
                "fd76804511318495"
            ]
        ]
    },
    {
        "id": "b4a4ef4649ef0f63",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "设备检测",
        "func": "const TIMEin__DURATION = 10 * 60 * 1000; // 1分钟\n\n// 定义所有可能的 in_ 字段\nconst allin_Fields = [\"in_tn\", \"in_tp\", \"in_ph\", \"in_ss\"];\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timein_Id', null);\n    context.set('lastMessageTimes', {}); // 确保 lastMessageTimes 初始化为空对象\n    context.set('isOnline', {}); // 确保 isOnline 初始化为空对象\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 确保 context.get('isOnline') 和 context.get('lastMessageTimes') 都是对象\nlet isOnline = context.get('isOnline') || {};\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 处理超时并更新状态\nfunction handleTimein_(in_) {\n    const lastMessageTime = lastMessageTimes[in_];\n    if (lastMessageTime && Date.now() - lastMessageTime > TIMEin__DURATION) {\n        if (isOnline[in_] !== false) {\n            isOnline[in_] = false; // 标记设备离线\n            node.status({ fill: \"red\", shape: \"ring\", text: `${in_} 离线` });\n            flow.set(`${in_}`, 0); // 更新 flow 中对应 in_ 的值为 0\n            flow.set(`${in_}_online`, 1); \n            let msg = {\n                payload: {\n                    d_name: \"进水仪表\",\n                    s_name: `${in_ === 'in_tn' ? '进水总氮' : in_ === 'in_tp' ? '进水总磷' : in_ === 'in_ph' ? '进水ph' :  '进水ss' }`,\n                    status0: \"离线\"\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${in_}_online`, online); \n            messagesToSend.push(msg); // 设备离线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    }\n}\n\n// 遍历每个有效的 in_ 字段\nallin_Fields.forEach((in_) => {\n    const in_Value = msg.payload[in_];\n\n    // 如果接收到有效的 in_ 数据\n    if (in_Value !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[in_] = Date.now();\n\n        // 判断设备是否从离线状态恢复\n        if (!isOnline[in_]) {\n            isOnline[in_] = true; // 设备首次在线时设置为 true\n            let status = \"在线\";\n            node.status({ fill: \"green\", shape: \"dot\", text: `${in_} 在线` });\n            flow.set(`${in_}_online`, 0); \n            // 设置消息内容\n            let msg = {\n                payload: {\n                    d_name: \"进水仪表\",\n                    s_name: `${in_ === 'in_tn' ? '进水总氮' : in_ === 'in_tp' ? '进水总磷' : in_ === 'in_ph' ? '进水ph' : '进水ss' }`,\n                    status0: status\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${in_}_online`, online); \n            // 只在第一次设备状态变化时发送消息\n            messagesToSend.push(msg); // 设备在线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    } else {\n        // 如果没有接收到数据，则检查是否超时\n        handleTimein_(in_);\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('isOnline', isOnline);\ncontext.set('lastMessageTimes', lastMessageTimes);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "6f26fa807cdec2a8",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "获取检测设备数据",
        "func": "// 获取 msg.payload 中的 in_1 到 in_5 的值\nlet in_Values = ['in_ll', 'in_ll1', 'in_ll2', 'in_cod', 'in_nh3','in_yw'];\n\n// 初始化一个新的对象\nlet optimizedPayload = {};\n\n// 遍历 in_1 到 in_5，检查并只保留有值的字段\nin_Values.forEach((in_) => {\n    // 如果该字段有值（不是 undefined），将其加入到 optimizedPayload 中\n    if (msg.payload[in_] !== undefined) {\n        optimizedPayload[in_] = msg.payload[in_];\n    }\n});\n\n// 如果有有效的字段，更新 msg.payload，否则不做任何操作\nif (Object.keys(optimizedPayload).length > 0) {\n    msg.payload = optimizedPayload;\n    return msg;\n} else {\n    return null; // 如果没有有效字段，则不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 100,
        "wires": [
            [
                "e108e38890c822b9",
                "8a582f8b9cc78ac6"
            ]
        ]
    },
    {
        "id": "e108e38890c822b9",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "设备检测",
        "func": "const TIMEin__DURATION = 10 * 60 * 1000; // 1分钟\n\n// 定义所有可能的 in_ 字段\nconst allin_Fields = ['in_ll', 'in_ll1', 'in_ll2', 'in_cod', 'in_nh3','in_yw'];\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timein_Id', null);\n    context.set('lastMessageTimes', {}); // 确保 lastMessageTimes 初始化为空对象\n    context.set('isOnline', {}); // 确保 isOnline 初始化为空对象\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 确保 context.get('isOnline') 和 context.get('lastMessageTimes') 都是对象\nlet isOnline = context.get('isOnline') || {};\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 处理超时并更新状态\nfunction handleTimein_(in_) {\n    const lastMessageTime = lastMessageTimes[in_];\n    if (lastMessageTime && Date.now() - lastMessageTime > TIMEin__DURATION) {\n        if (isOnline[in_] !== false) {\n            isOnline[in_] = false; // 标记设备离线\n            node.status({ fill: \"red\", shape: \"ring\", text: `${in_} 离线` });\n            flow.set(`${in_}`, 0); // 更新 flow 中对应 in_ 的值为 0\n            flow.set(`${in_}_online`, 1); \n            let msg = {\n                payload: {\n                    d_name: \"进水仪表\",\n                    s_name: `${in_ === 'in_ll' ? '进水总流量' : in_ === 'in_ll1' ? '一期进水流量' : in_ === 'in_ll2' ? '二期进水流量' : in_ === 'in_cod' ? '进水cod' : in_ === 'in_nh3' ? '进水氨氮' : '泵房液位' }`,\n                    status0: \"离线\"\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${in_}_online`, online); \n            messagesToSend.push(msg); // 设备离线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    }\n}\n\n// 遍历每个有效的 in_ 字段\nallin_Fields.forEach((in_) => {\n    const in_Value = msg.payload[in_];\n\n    // 如果接收到有效的 in_ 数据\n    if (in_Value !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[in_] = Date.now();\n\n        // 判断设备是否从离线状态恢复\n        if (!isOnline[in_]) {\n            isOnline[in_] = true; // 设备首次在线时设置为 true\n            let status = \"在线\";\n            node.status({ fill: \"green\", shape: \"dot\", text: `${in_} 在线` });\n            flow.set(`${in_}_online`, 0); \n            // 设置消息内容\n            let msg = {\n                payload: {\n                    d_name: \"进水仪表\",\n                    s_name: `${in_ === 'in_ll' ? '进水总流量' : in_ === 'in_ll1' ? '一期进水流量' : in_ === 'in_ll2' ? '二期进水流量' : in_ === 'in_cod' ? '进水cod' : in_ === 'in_nh3' ? '进水氨氮' : '泵房液位'}`,\n                    status0: status\n                }\n            };\n            let online = `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${in_}_online`, online); \n            // 只在第一次设备状态变化时发送消息\n            messagesToSend.push(msg); // 设备在线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    } else {\n        // 如果没有接收到数据，则检查是否超时\n        handleTimein_(in_);\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('isOnline', isOnline);\ncontext.set('lastMessageTimes', lastMessageTimes);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "8a582f8b9cc78ac6",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "上下限检测",
        "func": "const ALARM_COOL_DOWN_TIME = 5 * 60 * 1000; // 报警冷却时间（5分钟）\n\n// 定义所有可能的 in_ 字段\nconst allin_Fields = ['in_ll', 'in_ll1', 'in_ll2', 'in_cod', 'in_nh3', 'in_yw'];\n\n// 定义报警条件\nconst alarmConditions = {\n    'in_ll': { min: 1000, max: 2000 },\n    'in_ll1': { min: 500, max: 1000 },\n    'in_ll2': { min: 500, max: 1000 },\n    'in_cod': { min: 100, max: 400 },\n    'in_nh3': { min: 15, max: 40 },\n    'in_yw': { min: 1.5, max: 6.5 },\n};\n\n// 获取上下文中的状态变量\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\nlet lastAlarmTimes = context.get('lastAlarmTimes') || {};\nlet lastErroredStates = context.get('lastErroredStates') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false;\n\n// 优化报警条件判断\nfunction checkAlarmCondition(in_, in_Value) {\n    const condition = alarmConditions[in_];\n    const currentTime = Date.now();\n    const lastAlarmTime = lastAlarmTimes[in_] || 0;\n    const lastErroredState = lastErroredStates[in_] || false;\n\n    if (!condition) return false; // 如果没有报警条件，直接返回\n\n    if (in_Value < condition.min || in_Value > condition.max) {\n        // 如果超出报警范围，并且冷却时间已过\n        if (currentTime - lastAlarmTime > ALARM_COOL_DOWN_TIME) {\n            return 'trigger';  // 触发报警\n        }\n    } else if (lastErroredState) {\n        // 数据恢复到正常范围内，并且上次处于报警状态\n        return 'recover';  // 恢复报警\n    }\n    return false; // 没有状态变化\n}\n\n// 优化报警消息生成\nfunction generateAlarmMessage(in_, in_Value, status) {\n    const condition = alarmConditions[in_];\n    const alarmStatus = status === 'trigger' ? (in_Value < condition.min ? \"低于阈值\" : \"超过阈值\") : \"已恢复正常\";\n    return {\n        payload: {\n            s_name: getin_Name(in_),\n            s_msg: `${alarmStatus} (${condition.min} - ${condition.max})`,\n            value: in_Value,\n            why: alarmStatus\n        }\n    };\n}\n\n// 遍历每个有效的 in_ 字段\nallin_Fields.forEach((in_) => {\n    const in_Value = msg.payload[in_];\n\n    if (in_Value !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[in_] = Date.now();\n\n        // 检查报警条件\n        const alarmAction = checkAlarmCondition(in_, in_Value);\n\n        if (alarmAction) {\n            let alarmMsg;\n            if (alarmAction === 'trigger') {\n                // 触发报警\n                alarmMsg = generateAlarmMessage(in_, in_Value, 'trigger');\n                global.set(`${in_}_erro`, `${alarmMsg.payload.s_name} ${alarmMsg.payload.why}`);\n                flow.set(`${in_}_erro`, 1);\n                lastAlarmTimes[in_] = Date.now();\n                lastErroredStates[in_] = true;\n            } else if (alarmAction === 'recover') {\n                // 恢复报警状态\n                alarmMsg = generateAlarmMessage(in_, in_Value, 'recover');\n                flow.set(`${in_}_erro`, 0);\n                global.set(`${in_}_erro`, \"\");\n                lastAlarmTimes[in_] = 0;  // 可选，视需求清空最后报警时间\n                lastErroredStates[in_] = false;\n            }\n\n            if (alarmMsg) {\n                messagesToSend.push(alarmMsg); // 添加消息到待发送队列\n                updatedStatus = true;  // 标记状态变化\n            }else if (in_Value >= alarmConditions[in_].min && in_Value <= alarmConditions[in_].max) {\n                // 数据正常，但没有报警，手动恢复报警状态\n                // 恢复报警状态\n                flow.set(`${in_}_erro`, 0);\n                global.set(`${in_}_erro`, \"\");\n                lastAlarmTimes[in_] = 0;  // 清空最后报警时间\n                lastErroredStates[in_] = false;\n            }\n        }\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('lastMessageTimes', lastMessageTimes);\ncontext.set('lastAlarmTimes', lastAlarmTimes);\ncontext.set('lastErroredStates', lastErroredStates);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n\n// 辅助函数：获取设备名称\nfunction getin_Name(in_) {\n    const in_Names = {\n        in_ll: '进水总流量',\n        in_ll1: '一期进水流量',\n        in_ll2: '二期进水流量',\n        in_cod: '进水cod',\n        in_nh3: '进水氨氮',\n        in_yw: '泵房液位'\n    };\n\n    return in_Names[in_] || '未知设备';\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "fd76804511318495",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "上下限检测",
        "func": "const ALARM_COOL_DOWN_TIME = 5 * 60 * 1000; // 报警冷却时间（5分钟）\n\n// 定义所有可能的 in_ 字段\nconst allin_Fields = [\"in_tn\", \"in_tp\", \"in_ph\", \"in_ss\"];\n\n// 定义报警条件\nconst alarmConditions = {\n    'in_tn': { min: 10, max: 45 },\n    'in_tp': { min: 0.5, max: 5 },\n    'in_ph': { min: 7, max: 9 },\n    'in_ss': { min: 10, max: 400 },\n};\n// 获取上下文中的状态变量\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\nlet lastAlarmTimes = context.get('lastAlarmTimes') || {};\nlet lastErroredStates = context.get('lastErroredStates') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false;\n\n// 优化报警条件判断\nfunction checkAlarmCondition(in_, in_Value) {\n    const condition = alarmConditions[in_];\n    const currentTime = Date.now();\n    const lastAlarmTime = lastAlarmTimes[in_] || 0;\n    const lastErroredState = lastErroredStates[in_] || false;\n\n    if (!condition) return false; // 如果没有报警条件，直接返回\n\n    if (in_Value < condition.min || in_Value > condition.max) {\n        // 如果超出报警范围，并且冷却时间已过\n        if (currentTime - lastAlarmTime > ALARM_COOL_DOWN_TIME) {\n            return 'trigger';  // 触发报警\n        }\n    } else if (lastErroredState) {\n        // 数据恢复到正常范围内，并且上次处于报警状态\n        return 'recover';  // 恢复报警\n    }\n    return false; // 没有状态变化\n}\n\n// 优化报警消息生成\nfunction generateAlarmMessage(in_, in_Value, status) {\n    const condition = alarmConditions[in_];\n    const alarmStatus = status === 'trigger' ? (in_Value < condition.min ? \"低于阈值\" : \"超过阈值\") : \"已恢复正常\";\n    return {\n        payload: {\n            s_name: getin_Name(in_),\n            s_msg: `${alarmStatus} (${condition.min} - ${condition.max})`,\n            value: in_Value,\n            why: alarmStatus\n        }\n    };\n}\n\n// 遍历每个有效的 in_ 字段\nallin_Fields.forEach((in_) => {\n    const in_Value = msg.payload[in_];\n\n    if (in_Value !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[in_] = Date.now();\n\n        // 检查报警条件\n        const alarmAction = checkAlarmCondition(in_, in_Value);\n\n        if (alarmAction) {\n            let alarmMsg;\n            if (alarmAction === 'trigger') {\n                // 触发报警\n                alarmMsg = generateAlarmMessage(in_, in_Value, 'trigger');\n                global.set(`${in_}_erro`, `${alarmMsg.payload.s_name} ${alarmMsg.payload.why}`);\n                flow.set(`${in_}_erro`, 1);\n                lastAlarmTimes[in_] = Date.now();\n                lastErroredStates[in_] = true;\n            } else if (alarmAction === 'recover') {\n                // 恢复报警状态\n                alarmMsg = generateAlarmMessage(in_, in_Value, 'recover');\n                flow.set(`${in_}_erro`, 0);\n                global.set(`${in_}_erro`, \"\");\n                lastAlarmTimes[in_] = 0;  // 可选，视需求清空最后报警时间\n                lastErroredStates[in_] = false;\n            }\n\n            if (alarmMsg) {\n                messagesToSend.push(alarmMsg); // 添加消息到待发送队列\n                updatedStatus = true;  // 标记状态变化\n            } else if (in_Value >= alarmConditions[in_].min && in_Value <= alarmConditions[in_].max) {\n                // 数据正常，但没有报警，手动恢复报警状态\n                // 恢复报警状态\n                flow.set(`${in_}_erro`, 0);\n                global.set(`${in_}_erro`, \"\");\n                lastAlarmTimes[in_] = 0;  // 清空最后报警时间\n                lastErroredStates[in_] = false;\n            }\n\n        }\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('lastMessageTimes', lastMessageTimes);\ncontext.set('lastAlarmTimes', lastAlarmTimes);\ncontext.set('lastErroredStates', lastErroredStates);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n\n// 辅助函数：获取设备名称\nfunction getin_Name(in_) {\n    const in_Names = {\n\n        in_tn: '进水总氮' ,\n        in_tp: '进水总磷',\n        in_ph: '进水ph',\n        in_ss:'进水ss'\n    };\n\n    return in_Names[in_] || '未知设备';\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "ddcada7ef53e48ab",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "上下限检测",
        "func": "const ALARM_COOL_DOWN_TIME = 5 * 60 * 1000; // 报警冷却时间（5分钟）\n\n// 定义所有可能的 out_ 字段\nconst alloutFields = [\"out_ll\", \"out_cod\", \"out_nh3\", \"out_tn\", \"out_tp\", \"out_ph\", \"out_ss\"];\n\n// 定义报警条件（这里以 `out_tn` 为例，其他条件你可以根据需要自行修改）\nconst alarmConditions = {\n    'out_tn': { min: 3, max: 13 }, // 出水总氮\n    'out_cod': { min: 5, max: 30 },\n    'out_nh3': { min: 0.1, max: 3 },\n    'out_ll': { min: 1000, max:2000 },\n    'out_tp': { min: 0.01, max: 0.4 }, // 出水总磷\n    'out_ph': { min: 7, max: 9 }, // 出水ph值\n    'out_ss': { min: 0.01, max: 8 }, // 出水悬浮物\n};\n\n// 获取上下文中的状态变量\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\nlet lastAlarmTimes = context.get('lastAlarmTimes') || {};\nlet lastErroredStates = context.get('lastErroredStates') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false;\n\n// 优化报警条件判断\nfunction checkAlarmCondition(out_, out_Value) {\n    const condition = alarmConditions[out_];\n    const currentTime = Date.now();\n    const lastAlarmTime = lastAlarmTimes[out_] || 0;\n    const lastErroredState = lastErroredStates[out_] || false;\n\n    if (!condition) return false; // 如果没有报警条件，直接返回\n\n    if (out_Value < condition.min || out_Value > condition.max) {\n        // 如果超出报警范围，并且冷却时间已过\n        if (currentTime - lastAlarmTime > ALARM_COOL_DOWN_TIME) {\n            return 'trigger';  // 触发报警\n        }\n    } else if (lastErroredState) {\n        // 数据恢复到正常范围内，并且上次处于报警状态\n        return 'recover';  // 恢复报警\n    }\n    return false; // 没有状态变化\n}\n\n// 优化报警消息生成\nfunction generateAlarmMessage(out_, out_Value, status) {\n    const condition = alarmConditions[out_];\n    const alarmStatus = status === 'trigger' ? (out_Value < condition.min ? \"低于阈值\" : \"超过阈值\") : \"已恢复正常\";\n    return {\n        payload: {\n            s_name: getout_Name(out_),\n            s_msg: `${alarmStatus} (${condition.min} - ${condition.max})`,\n            value: out_Value,\n            why: alarmStatus\n        }\n    };\n}\n\n// 遍历每个有效的 out_ 字段\nalloutFields.forEach((out_) => {\n    const out_Value = msg.payload[out_];\n\n    if (out_Value !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[out_] = Date.now();\n\n        // 检查报警条件\n        const alarmAction = checkAlarmCondition(out_, out_Value);\n\n        if (alarmAction) {\n            let alarmMsg;\n            if (alarmAction === 'trigger') {\n                // 触发报警\n                alarmMsg = generateAlarmMessage(out_, out_Value, 'trigger');\n                global.set(`${out_}_erro`, `${alarmMsg.payload.s_name} ${alarmMsg.payload.why}`);\n                flow.set(`${out_}_erro`, 1);\n                lastAlarmTimes[out_] = Date.now();\n                lastErroredStates[out_] = true;\n            } else if (alarmAction === 'recover') {\n                // 恢复报警状态\n                alarmMsg = generateAlarmMessage(out_, out_Value, 'recover');\n                flow.set(`${out_}_erro`, 0);\n                global.set(`${out_}_erro`, \"\");\n                lastAlarmTimes[out_] = 0;  // 可选，视需求清空最后报警时间\n                lastErroredStates[out_] = false;\n            }\n\n            if (alarmMsg) {\n                messagesToSend.push(alarmMsg); // 添加消息到待发送队列\n                updatedStatus = true;  // 标记状态变化\n            } else if (out_Value >= alarmConditions[out_].min && out_Value <= alarmConditions[out_].max) {\n                    // 数据正常，但没有报警，手动恢复报警状态\n                    // 恢复报警状态\n                    flow.set(`${out_}_erro`, 0);\n                    global.set(`${out_}_erro`, \"\");\n                    lastAlarmTimes[out_] = 0;  // 清空最后报警时间\n                    lastErroredStates[out_] = false;\n                }\n\n        }\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('lastMessageTimes', lastMessageTimes);\ncontext.set('lastAlarmTimes', lastAlarmTimes);\ncontext.set('lastErroredStates', lastErroredStates);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n\n// 辅助函数：获取设备名称\nfunction getout_Name(out_) {\n    const out_Names = {\n        out_ll: '总出水流量',\n        out_cod: '出水COD',\n        out_nh3: '出水氨氮',\n        out_tn: '出水总氮',\n        out_tp: '出水总磷',\n        out_ph: '出水pH',\n        out_ss: '出水悬浮物',\n    };\n\n    return out_Names[out_] || '未知设备';\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "68e00780a47800cd",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "mariadb_indata",
        "func": "// 获取数据\nvar tag1 = flow.get(['in_lj',  'in_ll',  'in_cod', 'in_nh3', ]);\nvar time = global.get(\"mariaDBTime\"); \nvar tag2 = flow.get(['out_lj', 'out_ll', 'out_cod', 'out_nh3', 'out_tn', 'out_tp']);\n\n// 将获取的数据转换为浮点数，并检查NaN值\nfunction parseFloatAndCheckNaN(value) {\n    var parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n}\n\n// 转换数据\nvar out_lj = parseFloatAndCheckNaN(tag2[0]);\nvar out_ll = parseFloatAndCheckNaN(tag2[1]);\nvar out_cod = parseFloatAndCheckNaN(tag2[2]);\nvar out_nh3 = parseFloatAndCheckNaN(tag2[3]);\nvar out_tn = parseFloatAndCheckNaN(tag2[4]);\nvar out_tp = parseFloatAndCheckNaN(tag2[5]);\n\nvar in_lj = parseFloatAndCheckNaN(tag1[0]);\nvar in_ll = parseFloatAndCheckNaN(tag1[1]);\nvar in_cod = parseFloatAndCheckNaN(tag1[2]);\nvar in_nh3 = parseFloatAndCheckNaN(tag1[3]);\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO gt_data (time, gt_in_lj,gt_in_ll,  gt_in_cod, gt_in_nh3,  gt_out_lj, gt_out_ll, gt_out_cod, gt_out_nh3, gt_out_tn, gt_out_tp) \n    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time,\n    in_lj,\n    in_ll,\n    in_cod,\n    in_nh3,\n    out_lj,\n    out_ll,\n    out_cod,\n    out_nh3,\n    out_tn,\n    out_tp,\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 380,
        "wires": [
            [
                "a74db28fbf76cfe8"
            ]
        ]
    },
    {
        "id": "a74db28fbf76cfe8",
        "type": "mysql",
        "z": "7c14288f4889ff67",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 500,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "3721ed8f9b81c0f7",
        "type": "inject",
        "z": "7c14288f4889ff67",
        "name": "",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "68e00780a47800cd"
            ]
        ]
    },
    {
        "id": "72a50be9e9fe8065",
        "type": "http in",
        "z": "7c14288f4889ff67",
        "name": "",
        "url": "api/sites/site/1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 540,
        "wires": [
            [
                "1f36f075b0a6bccd"
            ]
        ]
    },
    {
        "id": "80ec8bca607f5403",
        "type": "http response",
        "z": "7c14288f4889ff67",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 600,
        "wires": []
    },
    {
        "id": "c3a4b5a504aeea8d",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "function 41",
        "func": "// 检查NaN值并替换为0\nfunction replaceNaN(value) {\n    return isNaN(value) ? 0 : value;\n}\n\n// 从flow中获取数据\nvar tag1 = flow.get([ 'in_lj','in_ll',  'in_cod', 'in_nh3']);\nvar tag2 = flow.get(['out_lj','out_ll', 'out_cod', 'out_nh3', 'out_tn', 'out_tp']);\n\n// 将获取的数据转换为浮点数并检查NaN\nvar in_lj = parseFloatAndCheckNaN(tag1[0]);\nvar in_ll = parseFloatAndCheckNaN(tag1[1]);\nvar in_cod = parseFloatAndCheckNaN(tag1[2]);\nvar in_nh3 = parseFloatAndCheckNaN(tag1[3]);\n// 转换数据\nvar out_lj = parseFloatAndCheckNaN(tag2[0]);\nvar out_ll = parseFloatAndCheckNaN(tag2[1]);\nvar out_cod = parseFloatAndCheckNaN(tag2[2]);\nvar out_nh3 = parseFloatAndCheckNaN(tag2[3]);\nvar out_tn = parseFloatAndCheckNaN(tag2[4]);\nvar out_tp = parseFloatAndCheckNaN(tag2[5]);\n\n// 将获取的数据转换为浮点数并检查NaN值\nfunction parseFloatAndCheckNaN(value) {\n    var parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n}\n\nvar tag11 = flow.get(['in_yw_erro', 'in_ll_erro', 'in_ll1_erro', 'in_ll2_erro', 'in_cod_erro', 'in_nh3_erro', 'in_tn_erro', 'in_tp_erro', 'in_ph_erro', 'in_ss_erro']);\nvar tag12 = flow.get(['out_ll_erro', 'out_cod_erro', 'out_nh3_erro', 'out_tn_erro', 'out_tp_erro', 'out_ph_erro', 'out_ss_erro']);\n\n// 创建数据分组格式 - 全部转换为工艺参数格式\nvar dataGroups = [\n    // 1. 进水工艺参数分组 - 替代原来的进水数据\n    {\n        id: \"in_process_parameters\",\n        name: \"进水工艺参数\",\n        type: \"process\",\n        data: [\n            {\n                name: \"进水流量\", \n                value: in_ll/3.6, \n                unit: \"L/S\", \n                lowerLimit: 0, \n                upperLimit: 115,\n                status: tag11[1] === 1 ? \"abnormal\" : \"normal\"\n            },\n            {\n                name: \"进水流量(小时)\", \n                value: in_ll, \n                unit: \"m³/h\", \n                lowerLimit: 0, \n                upperLimit: 416,\n                status: tag11[1] === 1 ? \"abnormal\" : \"normal\"\n            },\n            {\n                name: \"预计进水量\", \n                value: in_ll*24, \n                unit: \"m³\", \n                lowerLimit: 0, \n                upperLimit: 10000,\n                status: \"normal\"\n            },\n            {\n                name: \"进水累计\", \n                value: in_lj, \n                unit: \"m³\", \n                lowerLimit: 0, \n                upperLimit: 10000,\n                status: \"normal\"\n            },\n            {\n                name: \"进水COD\", \n                value: in_cod, \n                unit: \"mg/L\", \n                lowerLimit: 150, \n                upperLimit: 350,\n                status: tag11[4] === 1 ? \"abnormal\" : \"normal\"\n            },\n            {\n                name: \"进水氨氮\", \n                value: in_nh3, \n                unit: \"mg/L\", \n                lowerLimit: 10, \n                upperLimit: 40,\n                status: tag11[5] === 1 ? \"abnormal\" : \"normal\"\n            }\n        ]\n    },\n    \n    // 2. 出水工艺参数分组 - 替代原来的出水数据\n    {\n        id: \"out_process_parameters\",\n        name: \"出水工艺参数\",\n        type: \"process\",\n        data: [\n            {\n                name: \"出水流量\", \n                value: out_ll, \n                unit: \"L/S\", \n                lowerLimit: 0, \n                upperLimit: 115,\n                status: tag12[0] === 1 ? \"abnormal\" : \"normal\"\n            },\n            {\n                name: \"出水流量(小时)\", \n                value: out_ll*3.6, \n                unit: \"m³/h\", \n                lowerLimit: 0, \n                upperLimit: 416,\n                status: tag12[0] === 1 ? \"abnormal\" : \"normal\"\n            },\n            {\n                name: \"预计出水量\", \n                value: out_ll*3.6*24, \n                unit: \"m³\", \n                lowerLimit: 0, \n                upperLimit: 10000,\n                status: \"normal\"\n            },\n            {\n                name: \"出水累计\", \n                value: out_lj, \n                unit: \"m³\", \n                lowerLimit: 0, \n                upperLimit: 10000,\n                status: \"normal\"\n            },\n            {\n                name: \"出水COD\", \n                value: out_cod, \n                unit: \"mg/L\", \n                lowerLimit: 0, \n                upperLimit: 30,\n                status: tag12[1] === 1 ? \"abnormal\" : \"normal\"\n            },\n            {\n                name: \"出水氨氮\", \n                value: out_nh3, \n                unit: \"mg/L\", \n                lowerLimit: 0, \n                upperLimit: 1.5,\n                status: tag12[2] === 1 ? \"abnormal\" : \"normal\"\n            },\n            {\n                name: \"出水总氮\", \n                value: out_tn, \n                unit: \"mg/L\", \n                lowerLimit: 0, \n                upperLimit: 10,\n                status: tag12[3] === 1 ? \"abnormal\" : \"normal\"\n            },\n            {\n                name: \"出水总磷\", \n                value: out_tp, \n                unit: \"mg/L\", \n                lowerLimit: 0, \n                upperLimit: 0.5,\n                status: tag12[4] === 1 ? \"abnormal\" : \"normal\"\n            }\n        ]\n    },\n    \n    // 3. 报警信息分组\n    {\n        id: \"active_alarms\",\n        name: \"当前报警\",\n        type: \"alarm\",\n        data: [\n            // 添加进水报警\n            ...(tag11[1] === 1 ? [{\n                id: \"ALM-IN-LL-\" + Date.now(),\n                name: \"进水流量异常\",\n                message: \"进水流量传感器异常，请检查\",\n                level: \"medium\",\n                timestamp: Date.now(),\n                status: \"unconfirmed\"\n            }] : []),\n            ...(tag11[4] === 1 ? [{\n                id: \"ALM-IN-COD-\" + Date.now(),\n                name: \"进水COD异常\",\n                message: \"进水COD浓度异常，请检查\",\n                level: \"medium\",\n                timestamp: Date.now(),\n                status: \"unconfirmed\"\n            }] : []),\n            ...(tag11[5] === 1 ? [{\n                id: \"ALM-IN-NH3-\" + Date.now(),\n                name: \"进水氨氮异常\",\n                message: \"进水氨氮浓度异常，请检查\",\n                level: \"medium\",\n                timestamp: Date.now(),\n                status: \"unconfirmed\"\n            }] : []),\n            \n            // 添加出水报警\n            ...(tag12[0] === 1 ? [{\n                id: \"ALM-OUT-LL-\" + Date.now(),\n                name: \"出水流量异常\",\n                message: \"出水流量传感器异常，请检查\",\n                level: \"high\",\n                timestamp: Date.now(),\n                status: \"unconfirmed\"\n            }] : []),\n            ...(tag12[1] === 1 ? [{\n                id: \"ALM-OUT-COD-\" + Date.now(),\n                name: \"出水COD异常\",\n                message: \"出水COD浓度超标，请检查\",\n                level: \"high\",\n                timestamp: Date.now(),\n                status: \"unconfirmed\"\n            }] : []),\n            ...(tag12[2] === 1 ? [{\n                id: \"ALM-OUT-NH3-\" + Date.now(),\n                name: \"出水氨氮异常\",\n                message: \"出水氨氮浓度超标，请检查\",\n                level: \"high\",\n                timestamp: Date.now(),\n                status: \"unconfirmed\"\n            }] : []),\n            ...(tag12[3] === 1 ? [{\n                id: \"ALM-OUT-TN-\" + Date.now(),\n                name: \"出水总氮异常\",\n                message: \"出水总氮浓度超标，请检查\",\n                level: \"high\",\n                timestamp: Date.now(),\n                status: \"unconfirmed\"\n            }] : []),\n            ...(tag12[4] === 1 ? [{\n                id: \"ALM-OUT-TP-\" + Date.now(),\n                name: \"出水总磷异常\",\n                message: \"出水总磷浓度超标，请检查\",\n                level: \"high\",\n                timestamp: Date.now(),\n                status: \"unconfirmed\"\n            }] : [])\n        ]\n    },\n];\n\n// 构建最终的消息负载\nmsg.payload = {\n    // 完全使用新格式的数据分组，移除旧格式的数据\n    dataGroups: dataGroups\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "cbf00e529a966c61",
        "type": "http in",
        "z": "7c14288f4889ff67",
        "name": "",
        "url": "api/websites/site/1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "d56e8e49dd24c795"
            ]
        ]
    },
    {
        "id": "eb0954c643c71740",
        "type": "websocket in",
        "z": "7c14288f4889ff67",
        "name": "Device WebSocket",
        "server": "8487e0e6a7497948",
        "client": "",
        "x": 150,
        "y": 820,
        "wires": [
            [
                "3780e54b84bd1762"
            ]
        ]
    },
    {
        "id": "3780e54b84bd1762",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "function 79",
        "func": "// 初始化全局变量存储客户端连接\nif (global.wsClients === undefined) {\n    global.wsClients = {};\n}\n\n// 取得客户端ID (使用WebSocket ID)\nconst clientId = msg._session.id;\n\n// 检查连接状态事件\nif (msg.payload === 'connected') {\n    node.log('新WebSocket客户端连接: ' + clientId);\n    \n    // 为新客户端创建状态对象\n    global.wsClients[clientId] = {\n        id: clientId,\n        connected: true,\n        lastActive: Date.now(),\n        siteId: null,\n        clientInfo: {}\n    };\n    \n    return null;\n}\n\nif (msg.payload === 'disconnected') {\n    node.log('WebSocket客户端断开连接: ' + clientId);\n    \n    if (global.wsClients[clientId]) {\n        delete global.wsClients[clientId];\n    }\n    \n    return null;\n}\n\n// 解析消息\nlet messageData;\ntry {\n    if (typeof msg.payload === 'string') {\n        messageData = JSON.parse(msg.payload);\n    } else {\n        messageData = msg.payload;\n    }\n} catch (e) {\n    node.warn('无效的JSON消息: ' + msg.payload);\n    return null;\n}\n\n// 记录收到的消息\nnode.log('收到WebSocket消息: ' + JSON.stringify(messageData));\n\n// 确保客户端记录存在\nif (!global.wsClients[clientId]) {\n    global.wsClients[clientId] = {\n        id: clientId,\n        connected: true,\n        lastActive: Date.now(),\n        siteId: null,\n        clientInfo: {}\n    };\n}\n\n// 更新客户端活跃时间\nglobal.wsClients[clientId].lastActive = Date.now();\n\n// 如果消息包含siteId，更新客户端记录\nif (messageData.siteId) {\n    global.wsClients[clientId].siteId = messageData.siteId;\n}\n\n// 如果是初始化消息，保存客户端信息\nif (messageData.type === 'init' && messageData.clientInfo) {\n    global.wsClients[clientId].clientInfo = messageData.clientInfo;\n}\n\n// 统一消息格式\nmsg._clientId = clientId;\nmsg.messageType = messageData.type;\nmsg.payload = messageData;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 820,
        "wires": [
            [
                "f05c778a67be86f6"
            ]
        ]
    },
    {
        "id": "f05c778a67be86f6",
        "type": "switch",
        "z": "7c14288f4889ff67",
        "name": "路由消息",
        "property": "messageType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_device_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "command",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "init",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "client_close",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 480,
        "y": 820,
        "wires": [
            [
                "5fbec5fa18ea85eb"
            ],
            [
                "30f8d2f1eb863101"
            ],
            [
                "96af9a0843842607"
            ],
            [
                "a7eafacbb27a7c2c"
            ],
            [
                "620927a7e8f6667b"
            ]
        ]
    },
    {
        "id": "5fbec5fa18ea85eb",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "处理心跳",
        "func": "// 发送pong响应\nmsg.payload = {\n    type: 'pong',\n    timestamp: Date.now(),\n    serverTime: new Date().toISOString()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 740,
        "wires": [
            [
                "438b1489a84bdb85"
            ]
        ]
    },
    {
        "id": "177a266576ca88ec",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "处理控制命令",
        "func": "// 命令处理函数 - 将前端命令转换为设备控制指令\nconst command = msg.payload;\nconst clientId = msg._clientId;\nconst siteId = command.siteId;\n\nif (!siteId) {\n    node.warn('命令没有指定siteId');\n    return null;\n}\n\n// 记录命令信息\nnode.log('收到WebSocket命令: ' + JSON.stringify(command));\n\n// 对收到的命令进行分类处理\nlet controlType, deviceId, action, feedbackMessage;\nlet deviceParams = {};\n\n// 根据前端发送的命令格式提取关键信息\nif (command.type === 'command') {\n    // 判断具体是哪种控制类型\n    if (command.deviceName && (command.action === 'start' || command.action === 'stop')) {\n        // 设备启停控制\n        controlType = 'device_control';\n        deviceId = command.deviceName;\n        action = command.action;\n        feedbackMessage = `设备 ${deviceId} ${action === 'start' ? '启动' : '停止'} 命令已接收`;\n        \n        // 构建设备控制参数 - 这里根据实际设备接口定义\n        deviceParams = {\n            device: deviceId,\n            operation: action,\n            siteId:siteId\n            // 可添加特定设备所需参数\n        };\n    } \n    else if (command.valveName && (command.action === 'open' || command.action === 'close')) {\n        // 阀门控制\n        controlType = 'valve_control';\n        deviceId = command.valveName;\n        action = command.action;\n        feedbackMessage = `阀门 ${deviceId} ${action === 'open' ? '打开' : '关闭'} 命令已接收`;\n        \n        // 构建阀门控制参数\n        deviceParams = {\n            valve: deviceId,\n            operation: action,\n            openKey: command.openKey,  // 前端传递的特定开阀键值\n            closeKey: command.closeKey // 前端传递的特定关阀键值\n        };\n    }\n    else if (command.deviceName && command.frequency !== undefined) {\n        // 频率设置\n        controlType = 'set_frequency';\n        deviceId = command.deviceName;\n        action = 'set_frequency';\n        const frequency = parseFloat(command.frequency);\n        feedbackMessage = `设备 ${deviceId} 频率设置为 ${frequency} Hz 命令已接收`;\n        \n        // 构建频率设置参数\n        deviceParams = {\n            device: deviceId,\n            frequency: frequency\n        };\n    }\n    else {\n        // 未知命令类型\n        node.warn('无法识别的命令格式: ' + JSON.stringify(command));\n        \n        // 返回错误反馈\n        msg.payload = {\n            type: 'command_feedback',\n            siteId: siteId,\n            deviceName: command.deviceName || command.valveName,\n            success: false,\n            message: '无法识别的命令格式',\n            timestamp: Date.now()\n        };\n        return msg;\n    }\n    \n    // 设置控制信息到上下文，可用于其他节点\n    flow.set('lastControlCommand', {\n        type: controlType,\n        deviceId: deviceId,\n        action: action,\n        params: deviceParams,\n        timestamp: Date.now()\n    });\n    \n    // 创建设备控制输出 - 这将连接到实际设备控制节点\n    const deviceControlMsg = {\n        topic: controlType,\n        payload: deviceParams\n    };\n    \n    // 创建客户端反馈\n    const feedbackMsg = {\n        payload: {\n            type: 'command_feedback',\n            siteId: siteId,\n            deviceName: command.deviceName || command.valveName,\n            action: action,\n            success: true,\n            message: feedbackMessage,\n            timestamp: Date.now()\n        },\n        _clientId: clientId\n    };\n    \n    // 发送两个输出：[0]客户端反馈, [1]设备控制命令\n    return [feedbackMsg, deviceControlMsg];\n}\nelse {\n    // 非控制类型命令\n    node.warn('接收到非控制类型命令: ' + command.type);\n    return null;\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 780,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a7eafacbb27a7c2c",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "处理初始化消息",
        "func": "const clientId = msg._clientId;\nconst siteId = msg.payload.siteId;\nconst clientInfo = msg.payload.clientInfo || {};\n\nnode.log(`客户端 ${clientId} 初始化连接，站点ID: ${siteId}`);\n\n// 发送确认初始化成功的消息\nmsg.payload = {\n    type: 'init_confirmed',\n    siteId: siteId,\n    message: '初始化成功',\n    timestamp: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 860,
        "wires": [
            [
                "438b1489a84bdb85"
            ]
        ]
    },
    {
        "id": "620927a7e8f6667b",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "处理客户端关闭",
        "func": "const clientId = msg._clientId;\nconst closeReason = msg.payload.reason || 'unknown';\n\nnode.log('客户端通知关闭: ' + clientId + ', 原因: ' + closeReason);\n\n// 从客户端列表中移除\nif (global.wsClients && global.wsClients[clientId]) {\n    delete global.wsClients[clientId];\n}\n\n// 发送确认关闭的消息\nmsg.payload = {\n    type: 'close_confirmed',\n    message: '连接已正常关闭',\n    timestamp: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 900,
        "wires": [
            [
                "438b1489a84bdb85"
            ]
        ]
    },
    {
        "id": "438b1489a84bdb85",
        "type": "websocket out",
        "z": "7c14288f4889ff67",
        "name": "WebSocket输出",
        "server": "8487e0e6a7497948",
        "client": "",
        "x": 1060,
        "y": 820,
        "wires": []
    },
    {
        "id": "fb905d67ab13a3ff",
        "type": "inject",
        "z": "7c14288f4889ff67",
        "name": "定时清理客户端",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 920,
        "wires": [
            [
                "d898c9247c9d88dc"
            ]
        ]
    },
    {
        "id": "d898c9247c9d88dc",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "清理断开的客户端",
        "func": "// 此函数定期执行，清理长时间不活跃的客户端\nif (!global.wsClients) {\n    return null;\n}\n\nconst now = Date.now();\nconst inactiveThreshold = 60000; // 60秒不活跃视为断开\n\nlet cleanCount = 0;\nfor (let clientId in global.wsClients) {\n    const client = global.wsClients[clientId];\n    const lastActiveTime = client.lastActive || 0;\n    \n    // 如果客户端超过60秒没有活动，认为已断开\n    if (now - lastActiveTime > inactiveThreshold) {\n        delete global.wsClients[clientId];\n        cleanCount++;\n    }\n}\n\nif (cleanCount > 0) {\n    node.log('已清理 ' + cleanCount + ' 个不活跃的客户端连接');\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "30f8d2f1eb863101",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "处理设备状态请求",
        "func": "const siteId = msg.payload.siteId;\nif (!siteId) {\n    node.warn('没有指定siteId，无法获取设备状态');\n    return null;\n}\n\n// 首先确认收到状态请求\nmsg.payload = {\n    type: 'status_request_received',\n    siteId: siteId,\n    message: '状态请求已接收，正在处理',\n    timestamp: Date.now()\n};\n\n// 发送确认消息\nnode.send(msg);\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 780,
        "wires": [
            [
                "438b1489a84bdb85"
            ]
        ]
    },
    {
        "id": "96af9a0843842607",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "function 80",
        "func": "// 命令处理函数 - 将前端命令转换为设备控制指令\nconst command = msg.payload;\nconst clientId = msg._clientId;\nconst siteId = command.siteId;\n\nif (!siteId) {\n    node.warn('命令没有指定siteId');\n    return null;\n}\n\n// 记录命令信息\nnode.log('收到WebSocket命令: ' + JSON.stringify(command));\n\n// 对收到的命令进行分类处理\nlet controlType, deviceId, action, feedbackMessage;\nlet deviceParams = {};\n\n// 根据前端发送的命令格式提取关键信息\nif (command.type === 'command') {\n    // 判断具体是哪种控制类型\n    if (command.deviceName && (command.action === 'start' || command.action === 'stop')) {\n        // 设备启停控制\n        controlType = 'device_control';\n        deviceId = command.deviceName;\n        action = command.action;\n        feedbackMessage = `设备 ${deviceId} ${action === 'start' ? '启动' : '停止'} 命令已接收`;\n        \n        // 构建设备控制参数 - 这里根据实际设备接口定义\n        deviceParams = {\n            device: deviceId,\n            operation: action,\n            siteId: siteId\n            // 可添加特定设备所需参数\n        };\n    } \n    else if (command.valveName && (command.action === 'open' || command.action === 'close')) {\n        // 阀门控制\n        controlType = 'valve_control';\n        deviceId = command.valveName;\n        action = command.action;\n        feedbackMessage = `阀门 ${deviceId} ${action === 'open' ? '打开' : '关闭'} 命令已接收`;\n        \n        // 构建阀门控制参数\n        deviceParams = {\n            valve: deviceId,\n            operation: action,\n            openKey: command.openKey,  // 前端传递的特定开阀键值\n            closeKey: command.closeKey // 前端传递的特定关阀键值\n        };\n    }\n    else if (command.deviceName && command.frequency !== undefined) {\n        // 频率设置\n        controlType = 'set_frequency';\n        deviceId = command.deviceName;\n        action = 'set_frequency';\n        const frequency = parseFloat(command.frequency);\n        feedbackMessage = `设备 ${deviceId} 频率设置为 ${frequency} Hz 命令已接收`;\n        \n        // 构建频率设置参数\n        deviceParams = {\n            device: deviceId,\n            frequency: frequency\n        };\n    }\n    // 增加工艺参数设置处理逻辑\n    else if (command.processName && command.action === 'set_parameters') {\n        // 工艺参数设置\n        controlType = 'process_control';\n        deviceId = command.processName;\n        action = 'set_parameters';\n        \n        // 提取参数\n        const lowerLimit = parseFloat(command.lowerLimit);\n        const upperLimit = parseFloat(command.upperLimit);\n        const coefficient = parseFloat(command.coefficient || 1);\n        \n        feedbackMessage = `工艺参数 ${deviceId} 设置已接收 (范围: ${lowerLimit}-${upperLimit}, 系数: ${coefficient})`;\n        \n        // 构建工艺参数设置参数\n        deviceParams = {\n            paramName: deviceId,\n            lowerLimit: lowerLimit,\n            upperLimit: upperLimit,\n            coefficient: coefficient,\n            siteId: siteId\n        };\n        \n        // 记录更详细的工艺参数设置信息\n        node.log(`工艺参数设置: ${deviceId}, 范围: ${lowerLimit}-${upperLimit}, 系数: ${coefficient}`);\n    }\n    else {\n        // 未知命令类型\n        node.warn('无法识别的命令格式: ' + JSON.stringify(command));\n        \n        // 返回错误反馈\n        msg.payload = {\n            type: 'command_feedback',\n            siteId: siteId,\n            deviceName: command.deviceName || command.valveName || command.processName,\n            success: false,\n            message: '无法识别的命令格式',\n            timestamp: Date.now()\n        };\n        return msg;\n    }\n    \n    // 设置控制信息到上下文，可用于其他节点\n    flow.set('lastControlCommand', {\n        type: controlType,\n        deviceId: deviceId,\n        action: action,\n        params: deviceParams,\n        timestamp: Date.now()\n    });\n    \n    // 创建设备控制输出 - 这将连接到实际设备控制节点\n    const deviceControlMsg = {\n        topic: controlType,\n        payload: deviceParams\n    };\n    \n    // 创建客户端反馈\n    const feedbackMsg = {\n        payload: {\n            type: 'command_feedback',\n            siteId: siteId,\n            deviceName: command.deviceName || command.valveName,\n            processName: command.processName, // 增加工艺参数名称\n            action: action,\n            success: true,\n            message: feedbackMessage,\n            timestamp: Date.now()\n        },\n        _clientId: clientId\n    };\n    \n    // 发送两个输出：[0]客户端反馈, [1]设备控制命令\n    return [feedbackMsg, deviceControlMsg];\n}\n// 添加对process_control类型的直接处理\nelse if (command.type === 'process_control') {\n    // 直接处理process_control类型命令\n    controlType = 'process_control';\n    deviceId = command.processName;\n    action = command.action;\n    \n    // 提取参数\n    const lowerLimit = parseFloat(command.lowerLimit);\n    const upperLimit = parseFloat(command.upperLimit);\n    const coefficient = parseFloat(command.coefficient || 1);\n    \n    feedbackMessage = `工艺参数 ${deviceId} 设置已接收 (范围: ${lowerLimit}-${upperLimit}, 系数: ${coefficient})`;\n    \n    // 构建工艺参数设置参数\n    deviceParams = {\n        paramName: deviceId,\n        lowerLimit: lowerLimit,\n        upperLimit: upperLimit,\n        coefficient: coefficient,\n        siteId: siteId\n    };\n    \n    // 创建设备控制输出\n    const deviceControlMsg = {\n        topic: controlType,\n        payload: deviceParams\n    };\n    \n    // 创建客户端反馈\n    const feedbackMsg = {\n        payload: {\n            type: 'command_feedback',\n            siteId: siteId,\n            processName: deviceId,\n            action: action,\n            success: true,\n            message: feedbackMessage,\n            timestamp: Date.now()\n        },\n        _clientId: clientId\n    };\n    \n    // 发送输出\n    return [feedbackMsg, deviceControlMsg];\n}\nelse {\n    // 非控制类型命令\n    node.warn('接收到非控制类型命令: ' + command.type);\n    return null;\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 820,
        "wires": [
            [
                "438b1489a84bdb85"
            ],
            [
                "a6a2be143a4d5192"
            ]
        ]
    },
    {
        "id": "a6a2be143a4d5192",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "function 82",
        "func": "// 获取上下文数组，初始化为空数组（只在首次运行时）\nlet dataArray = flow.get(\"dataArray\") || [];\n\n// 新的输入数据\nlet inputData = msg.payload;\n\n// 查找是否存在相同 paramName 的数据，存在则更新\nlet index = dataArray.findIndex(item => item.paramName === inputData.paramName);\n\nif (index !== -1) {\n    // 如果已存在相同 paramName，则更新数据\n    dataArray[index] = { ...dataArray[index], ...inputData };\n} else {\n    // 如果不存在，则新增\n    dataArray.push(inputData);\n}\n\n// 将更新后的数组重新存入上下文\nflow.set(\"dataArray\", dataArray);\n\n// 输出更新后的数组\nmsg.payload = dataArray;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "3c586aff7cf90b4b",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "function 81",
        "func": "// 检查NaN值并替换为0\nfunction replaceNaN(value) {\n    return isNaN(value) ? 0 : value;\n}\n\n// 从flow中获取上下限参数数组\nlet paramArray = flow.get(\"dataArray\") || [];\n\n// 动态获取上下限值及系数，若不存在则使用默认值\nfunction getLimits(paramName, defaultLower, defaultUpper, defaultCoefficient) {\n    let param = paramArray.find(item => item.paramName === paramName);\n    return param ? {\n        lowerLimit: param.lowerLimit || defaultLower,\n        upperLimit: param.upperLimit || defaultUpper,\n        coefficient: param.coefficient || defaultCoefficient\n    } : { lowerLimit: defaultLower, upperLimit: defaultUpper, coefficient: defaultCoefficient };\n}\n\n// 将获取的数据转换为浮点数并检查NaN值\nfunction parseFloatAndCheckNaN(value) {\n    return isNaN(parseFloat(value)) ? 0 : parseFloat(value);\n}\n\n// 从flow中获取数据\nvar tag1 = flow.get(['in_lj', 'in_ll', 'in_cod', 'in_nh3']);\nvar tag2 = flow.get(['out_lj', 'out_ll', 'out_cod', 'out_nh3', 'out_tn', 'out_tp']);\nvar tag11 = flow.get(['in_yw_erro', 'in_ll_erro', 'in_ll1_erro', 'in_ll2_erro', 'in_cod_erro', 'in_nh3_erro', 'in_tn_erro', 'in_tp_erro', 'in_ph_erro', 'in_ss_erro']);\nvar tag12 = flow.get(['out_ll_erro', 'out_cod_erro', 'out_nh3_erro', 'out_tn_erro', 'out_tp_erro', 'out_ph_erro', 'out_ss_erro']);\nvar tag13 = flow.get(['IN_PH', 'IN_SS', 'OUT_PH', 'OUT_SS', 'YW']);\n\n// 将获取的数据转换为浮点数并检查NaN\nvar in_lj = parseFloatAndCheckNaN(tag1[0]);\nvar in_ll = parseFloatAndCheckNaN(tag1[1]);\nvar in_cod = parseFloatAndCheckNaN(tag1[2]);\nvar in_nh3 = parseFloatAndCheckNaN(tag1[3]);\nvar out_lj = parseFloatAndCheckNaN(tag2[0]);\nvar out_ll = parseFloatAndCheckNaN(tag2[1]);\nvar out_cod = parseFloatAndCheckNaN(tag2[2]);\nvar out_nh3 = parseFloatAndCheckNaN(tag2[3]);\nvar out_tn = parseFloatAndCheckNaN(tag2[4]);\nvar out_tp = parseFloatAndCheckNaN(tag2[5]);\n\n// 获取动态上下限值和系数\nlet limits_in_cod = getLimits(\"进水COD\", 150, 350, 1);\nlet limits_in_nh3 = getLimits(\"进水氨氮\", 10, 40, 1);\nlet limits_out_cod = getLimits(\"出水COD\", 0, 30, 1);\nlet limits_out_nh3 = getLimits(\"出水氨氮\", 0, 1.5, 1);\nlet limits_out_tn = getLimits(\"出水总氮\", 0, 10, 1);\nlet limits_out_tp = getLimits(\"出水总磷\", 0, 0.5, 1);\n\n// 创建一个函数来判断状态（normal或abnormal）\nfunction getStatus(tag, index) {\n    return tag[index] === 1 ? \"abnormal\" : \"normal\";\n}\n\n// 创建数据分组格式\nvar dataGroups = [\n    {\n        id: \"in_process_parameters\",\n        name: \"进水工艺参数\",\n        type: \"process\",\n        data: [\n            { name: \"进水流量\", value: in_ll / 3.6, unit: \"L/S\", lowerLimit: 0, upperLimit: 115, status: getStatus(tag11, 1) },\n            { name: \"进水流量(小时)\", value: in_ll, unit: \"m³/h\", lowerLimit: 0, upperLimit: 416, status: getStatus(tag11, 1) },\n            { name: \"预计进水量\", value: in_ll * 24, unit: \"m³\", lowerLimit: 0, upperLimit: 10000, status: \"normal\" },\n            { name: \"进水累计\", value: in_lj, unit: \"m³\", lowerLimit: 0, upperLimit: 10000, status: \"normal\" },\n            { name: \"进水COD\", value: in_cod / limits_in_cod.coefficient, unit: \"mg/L\", lowerLimit: limits_in_cod.lowerLimit, upperLimit: limits_in_cod.upperLimit, status: getStatus(tag11, 4) },\n            { name: \"进水氨氮\", value: in_nh3 / limits_in_nh3.coefficient, unit: \"mg/L\", lowerLimit: limits_in_nh3.lowerLimit, upperLimit: limits_in_nh3.upperLimit, status: getStatus(tag11, 5) },\n            { name: \"进水pH\", value: parseFloatAndCheckNaN(tag13[0]), unit: \"\", lowerLimit: 0, upperLimit: 14, status: \"normal\" },\n            { name: \"进水浊度\", value: parseFloatAndCheckNaN(tag13[1]), unit: \"dtu\", lowerLimit: 0, upperLimit: 1000, status: \"normal\" },\n            { name: \"泵房液位\", value: parseFloatAndCheckNaN(tag13[4]), unit: \"m\", lowerLimit: 0, upperLimit: 500, status: \"normal\" }\n        ]\n    },\n    {\n        id: \"out_process_parameters\",\n        name: \"出水工艺参数\",\n        type: \"process\",\n        data: [\n            { name: \"出水流量\", value: out_ll, unit: \"L/S\", lowerLimit: 0, upperLimit: 115, status: getStatus(tag12, 0) },\n            { name: \"出水流量(小时)\", value: out_ll * 3.6, unit: \"m³/h\", lowerLimit: 0, upperLimit: 416, status: getStatus(tag12, 0) },\n            { name: \"预计出水量\", value: out_ll * 3.6 * 24, unit: \"m³\", lowerLimit: 0, upperLimit: 10000, status: \"normal\" },\n            { name: \"出水累计\", value: out_lj, unit: \"m³\", lowerLimit: 0, upperLimit: 10000, status: \"normal\" },\n            { name: \"出水COD\", value: out_cod / limits_out_cod.coefficient, unit: \"mg/L\", lowerLimit: limits_out_cod.lowerLimit, upperLimit: limits_out_cod.upperLimit, status: getStatus(tag12, 1) },\n            { name: \"出水氨氮\", value: out_nh3 / limits_out_nh3.coefficient, unit: \"mg/L\", lowerLimit: limits_out_nh3.lowerLimit, upperLimit: limits_out_nh3.upperLimit, status: getStatus(tag12, 2) },\n            { name: \"出水总氮\", value: out_tn / limits_out_tn.coefficient, unit: \"mg/L\", lowerLimit: limits_out_tn.lowerLimit, upperLimit: limits_out_tn.upperLimit, status: getStatus(tag12, 3) },\n            { name: \"出水总磷\", value: out_tp / limits_out_tp.coefficient, unit: \"mg/L\", lowerLimit: limits_out_tp.lowerLimit, upperLimit: limits_out_tp.upperLimit, status: getStatus(tag12, 4) },\n            { name: \"出水pH\", value: parseFloatAndCheckNaN(tag13[2]), unit: \"\", lowerLimit: 0, upperLimit: 14, status: \"normal\" },\n            { name: \"出水浊度\", value: parseFloatAndCheckNaN(tag13[3]), unit: \"dtu\", lowerLimit: 0, upperLimit: 1000, status: \"normal\" },\n\n        ]\n    }\n];\n\n// 构建最终消息负载\nmsg.payload = { dataGroups: dataGroups };\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 480,
        "wires": [
            [
                "80ec8bca607f5403"
            ]
        ]
    },
    {
        "id": "36e64bcd66883b23",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "function 67",
        "func": "// 接收到的数据\nvar data = msg.payload;\n\n// 将每个值存储到flow上下文中\nflow.set(\"YW\", data.YW.toFixed(2));\nflow.set(\"IN_PH\", data.IN_PH.toFixed(2));\nflow.set(\"IN_SS\", data.IN_SS.toFixed(2));\nflow.set(\"OUT_PH\", data.OUT_PH.toFixed(2));\nglobal.set(\"OUT_SS\", data.OUT_SS.toFixed(2));\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "ff992f66f3fd4ec8",
        "type": "comment",
        "z": "7c14288f4889ff67",
        "name": "",
        "info": "msg.payload = {\n    type: \"device_status\",\n    siteId: msg.siteId || \"your_site_id\", // 使用传入的siteId或默认值\n    timestamp: now,\n    dataGroups: mockDataGroups,",
        "x": 810,
        "y": 440,
        "wires": []
    },
    {
        "id": "1f36f075b0a6bccd",
        "type": "function",
        "z": "7c14288f4889ff67",
        "name": "function 84",
        "func": "// 获取当前时间戳，用于各种时间相关字段\nconst now = Date.now();\nconst yesterday = now - 86400000; // 24小时前\nconst lastWeek = now - 604800000; // 一周前\n\n\n\n\n// 检查NaN值并替换为0\nfunction replaceNaN(value) {\n    return isNaN(value) ? 0 : value;\n}\n\n// 从flow中获取上下限参数数组\nlet paramArray = flow.get(\"dataArray\") || [];\n\n// 动态获取上下限值及系数，若不存在则使用默认值\nfunction getLimits(paramName, defaultLower, defaultUpper, defaultCoefficient) {\n    let param = paramArray.find(item => item.paramName === paramName);\n    return param ? {\n        lowerLimit: param.lowerLimit || defaultLower,\n        upperLimit: param.upperLimit || defaultUpper,\n        coefficient: param.coefficient || defaultCoefficient\n    } : { lowerLimit: defaultLower, upperLimit: defaultUpper, coefficient: defaultCoefficient };\n}\n\n// 将获取的数据转换为浮点数并检查NaN值\nfunction parseFloatAndCheckNaN(value) {\n    return isNaN(parseFloat(value)) ? 0 : parseFloat(value);\n}\n\n// 从flow中获取数据\nvar tag1 = flow.get(['in_lj', 'in_ll', 'in_cod', 'in_nh3']);\nvar tag2 = flow.get(['out_lj', 'out_ll', 'out_cod', 'out_nh3', 'out_tn', 'out_tp']);\nvar tag11 = flow.get(['in_yw_erro', 'in_ll_erro', 'in_ll1_erro', 'in_ll2_erro', 'in_cod_erro', 'in_nh3_erro', 'in_tn_erro', 'in_tp_erro', 'in_ph_erro', 'in_ss_erro']);\nvar tag12 = flow.get(['out_ll_erro', 'out_cod_erro', 'out_nh3_erro', 'out_tn_erro', 'out_tp_erro', 'out_ph_erro', 'out_ss_erro']);\nvar tag13 = flow.get(['IN_PH', 'IN_SS', 'OUT_PH',  'YW']);\nvar outss = global.get('OUT_SS')\n// 将获取的数据转换为浮点数并检查NaN\nvar in_lj = parseFloatAndCheckNaN(tag1[0]);\nvar in_ll = parseFloatAndCheckNaN(tag1[1]);\nvar in_cod = parseFloatAndCheckNaN(tag1[2]);\nvar in_nh3 = parseFloatAndCheckNaN(tag1[3]);\nvar out_lj = parseFloatAndCheckNaN(tag2[0]);\nvar out_ll = parseFloatAndCheckNaN(tag2[1]);\nvar out_cod = parseFloatAndCheckNaN(tag2[2]);\nvar out_nh3 = parseFloatAndCheckNaN(tag2[3]);\nvar out_tn = parseFloatAndCheckNaN(tag2[4]);\nvar out_tp = parseFloatAndCheckNaN(tag2[5]);\nvar in_ph = parseFloatAndCheckNaN(tag13[0]);\nvar in_ss = parseFloatAndCheckNaN(tag13[1]);\nvar out_ph = parseFloatAndCheckNaN(tag13[2]);\nvar yw = parseFloatAndCheckNaN(tag13[3]);\nvar out_ss = parseFloatAndCheckNaN(outss);\n// 获取动态上下限值和系数\nlet limits_in_cod = getLimits(\"进水COD\", 150, 350, 1);\nlet limits_in_nh3 = getLimits(\"进水氨氮\", 10, 40, 1);\nlet limits_out_cod = getLimits(\"出水COD\", 0, 30, 1);\nlet limits_out_nh3 = getLimits(\"出水氨氮\", 0, 1.5, 1);\nlet limits_out_tn = getLimits(\"出水总氮\", 0, 10, 1);\nlet limits_out_tp = getLimits(\"出水总磷\", 0, 0.5, 1);\n\n// 创建一个函数来判断状态（normal或abnormal）\nfunction getStatus(tag, index) {\n    return tag[index] === 1 ? \"abnormal\" : \"normal\";\n}\n\n// 创建数据分组格式\nvar dataGroups = [\n    {\n        id: \"in_process_parameters\",\n        name: \"进水工艺参数\",\n        type: \"process\",\n        data: [\n            { name: \"进水流量\", value: in_ll / 3.6, unit: \"L/S\", lowerLimit: 0, upperLimit: 115, status: getStatus(tag11, 1) },\n            { name: \"进水流量(小时)\", value: in_ll, unit: \"m³/h\", lowerLimit: 0, upperLimit: 416, status: getStatus(tag11, 1) },\n            { name: \"预计进水量\", value: in_ll * 24, unit: \"m³\", lowerLimit: 0, upperLimit: 10000, status: \"normal\" },\n            { name: \"进水累计\", value: in_lj, unit: \"m³\", lowerLimit: 0, upperLimit: 10000, status: \"normal\" },\n            { name: \"进水COD\", value: in_cod / limits_in_cod.coefficient, unit: \"mg/L\", lowerLimit: limits_in_cod.lowerLimit, upperLimit: limits_in_cod.upperLimit, status: getStatus(tag11, 4) },\n            { name: \"进水氨氮\", value: in_nh3 / limits_in_nh3.coefficient, unit: \"mg/L\", lowerLimit: limits_in_nh3.lowerLimit, upperLimit: limits_in_nh3.upperLimit, status: getStatus(tag11, 5) },\n            { name: \"进水pH\", value: in_ph , unit: \"\", lowerLimit: 0, upperLimit: 14, status: \"normal\" },\n            { name: \"进水浊度\", value: in_ss , unit: \"dtu\", lowerLimit: 0, upperLimit: 1000, status: \"normal\" },\n            { name: \"泵房液位\", value: yw , unit: \"m\", lowerLimit: 0, upperLimit: 500, status: \"normal\" }\n        ]\n    },\n    {\n        id: \"out_process_parameters\",\n        name: \"出水工艺参数\",\n        type: \"process\",\n        data: [\n            { name: \"出水流量\", value: out_ll, unit: \"L/S\", lowerLimit: 0, upperLimit: 115, status: getStatus(tag12, 0) },\n            { name: \"出水流量(小时)\", value: out_ll * 3.6, unit: \"m³/h\", lowerLimit: 0, upperLimit: 416, status: getStatus(tag12, 0) },\n            { name: \"预计出水量\", value: out_ll * 3.6 * 24, unit: \"m³\", lowerLimit: 0, upperLimit: 10000, status: \"normal\" },\n            { name: \"出水累计\", value: out_lj, unit: \"m³\", lowerLimit: 0, upperLimit: 10000, status: \"normal\" },\n            { name: \"出水COD\", value: out_cod / limits_out_cod.coefficient, unit: \"mg/L\", lowerLimit: limits_out_cod.lowerLimit, upperLimit: limits_out_cod.upperLimit, status: getStatus(tag12, 1) },\n            { name: \"出水氨氮\", value: out_nh3 / limits_out_nh3.coefficient, unit: \"mg/L\", lowerLimit: limits_out_nh3.lowerLimit, upperLimit: limits_out_nh3.upperLimit, status: getStatus(tag12, 2) },\n            { name: \"出水总氮\", value: out_tn / limits_out_tn.coefficient, unit: \"mg/L\", lowerLimit: limits_out_tn.lowerLimit, upperLimit: limits_out_tn.upperLimit, status: getStatus(tag12, 3) },\n            { name: \"出水总磷\", value: out_tp / limits_out_tp.coefficient, unit: \"mg/L\", lowerLimit: limits_out_tp.lowerLimit, upperLimit: limits_out_tp.upperLimit, status: getStatus(tag12, 4) },\n            { name: \"出水pH\", value: out_ph, unit: \"\", lowerLimit: 0, upperLimit: 14, status: \"normal\" },\n            { name: \"出水浊度\", value: out_ss, unit: \"dtu\", lowerLimit: 0, upperLimit: 1000, status: \"normal\" },\n\n        ]\n    }\n];\n\nmsg.payload = {\n    type: \"device_status\",\n    siteId: msg.siteId || \"your_site_id\", // 使用传入的siteId或默认值\n    timestamp: now,\n    dataGroups: dataGroups\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 540,
        "wires": [
            [
                "80ec8bca607f5403"
            ]
        ]
    },
    {
        "id": "974cab9b8d94e60f",
        "type": "subflow:1dbac401a15b31e3",
        "z": "7c14288f4889ff67",
        "name": "",
        "x": 120,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "6823b1ca63511eb3",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "",
        "func": "msg.payload = {\n\n    'fc': 3,\n\n    'unitid': 1,\n\n    'address': 1,\n\n    'quantity': 1\n\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 220,
        "wires": [
            [
                "b043a0435003b89b"
            ]
        ]
    },
    {
        "id": "b043a0435003b89b",
        "type": "modbus-flex-getter",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "86",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "485b149079079899",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 430,
        "y": 220,
        "wires": [
            [
                "b0544daa6f7e3c67"
            ],
            []
        ]
    },
    {
        "id": "5db1b09ceda0269a",
        "type": "modbus-flex-getter",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "186",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "d02c1445644c9ae1",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 430,
        "y": 40,
        "wires": [
            [
                "68bd631901de9de3"
            ],
            []
        ]
    },
    {
        "id": "3a6c1a455ba0b647",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "",
        "func": "msg.payload = {\n\n    'fc': 3,\n\n    'unitid': 1,\n\n    'address': 4,\n\n    'quantity': 1,\n\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 60,
        "wires": [
            [
                "5db1b09ceda0269a"
            ]
        ]
    },
    {
        "id": "b0544daa6f7e3c67",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "out_ss",
        "func": "var num1 = msg.payload\nmsg.payload = num1/100;\nflow.set(\"out_ss\", msg.payload);\nmsg.payload = {\n    out_ss: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 240,
        "wires": [
            [
                "654a2896c9c1d351"
            ]
        ]
    },
    {
        "id": "d8abf4063d35c4e4",
        "type": "modbus-flex-getter",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "245",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "d2e2ab916062464c",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 430,
        "y": 80,
        "wires": [
            [
                "964ad252eeac10af"
            ],
            []
        ]
    },
    {
        "id": "590a07c83fe4d39e",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "",
        "func": "msg.payload = {\n\n    'fc': 3,\n\n    'unitid': 1,\n\n    'address': 0,\n\n    'quantity': 10,\n\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 100,
        "wires": [
            [
                "d8abf4063d35c4e4"
            ]
        ]
    },
    {
        "id": "c511ae5bcca670ad",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "",
        "func": "msg.payload = {\n\n    'fc': 3,\n\n    'unitid': 1,\n\n    'address': 0,\n\n    'quantity': 12,\n\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "fd416af4d1cbd0df"
            ]
        ]
    },
    {
        "id": "fd416af4d1cbd0df",
        "type": "modbus-flex-getter",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "189",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "6fe5fef749706568",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 430,
        "y": 180,
        "wires": [
            [
                "bec92288fc2ac3c5"
            ],
            []
        ]
    },
    {
        "id": "220c83d51faef72e",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "累计",
        "func": "\nvar attributes = ['IN_LJ', 'OUT_LJ'];\nvar results = [];\nfor (let i = 0; i < attributes.length; i++) {\n    let attribute = attributes[i];\n    let value = msg.payload[attribute];\n\n    results.push({ payload: parseFloat(value.toFixed(2)) });\n}\n// 将结果转换为仅包含数字的数组\nvar numbers = results.map(function (item) {\n    return item.payload;\n});\nflow.set([\"in_lj\", \"out_lj\"], numbers);\nglobal.set([\"inlwji\", \"outlwji\"], numbers);\nreturn results;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 480,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "86095c16894b7bae",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "",
        "props": [],
        "repeat": "3",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "6823b1ca63511eb3",
                "3a6c1a455ba0b647",
                "590a07c83fe4d39e",
                "c511ae5bcca670ad"
            ]
        ]
    },
    {
        "id": "b858e9de541f7931",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "in_tntpphss",
        "func": "var attributes = ['IN_TN', 'IN_TP', 'IN_PH', 'IN_SS'];\nvar results = [];\n\nfor (let i = 0; i < attributes.length; i++) {\n    let attribute = attributes[i];\n    let value = msg.payload[attribute];\n    \n    results.push({ payload:parseFloat(value.toFixed(2))});\n}\n\n// 将结果转换为仅包含数字的数组\nvar numbers = results.map(function(item) {\n    return item.payload;\n});\nflow.set([\"in_tn\", \"in_tp\", \"in_ph\", \"in_ss\"], numbers);\nmsg.payload = {\n    in_tn: numbers[0],\n    in_tp: numbers[1],\n    in_ph: numbers[2],\n    in_ss: numbers[3],\n};\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 140,
        "wires": [
            [
                "1e079a26f3095336"
            ]
        ]
    },
    {
        "id": "68bd631901de9de3",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "in_yw",
        "func": "var num1 = msg.payload\nmsg.payload = num1/1000;\nflow.set(\"in_yw\",msg.payload);\nmsg.payload = {\n    in_yw:msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 40,
        "wires": [
            [
                "6a6500eedc2344cc"
            ]
        ]
    },
    {
        "id": "964ad252eeac10af",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "in",
        "func": "var results = [];\n\n// 循环处理每对数据\nfor (let i = 0; i < 5; i++) {\n    const num = [msg.payload[i * 2], msg.payload[i * 2 + 1]];\n\n    const buf = Buffer.allocUnsafe(4);\n    buf.writeUInt16BE(num[0], 2);\n    buf.writeUInt16BE(num[1], 0);\n    var floatValue = parseFloat(buf.readFloatBE(0).toFixed(3)); // 保持为三位小数\n\n    results.push({ payload: floatValue }); // 将数字封装到对象中\n}\n\n// 将结果转换为仅包含数字的数组\nvar numbers = results.map(function(item) {\n    return item.payload;\n});\n\n// 对 'in_ll', 'in_ll_1', 'in_ll_2' 进行 *3.6 的处理，分别对应索引 0, 1, 2，并保留三位小数\nnumbers[0] = parseFloat((numbers[0] * 3.6).toFixed(3));\nnumbers[1] = parseFloat((numbers[1] * 3.6).toFixed(3));\nnumbers[2] = parseFloat((numbers[2] * 3.6).toFixed(3));\nnumbers[5] = parseFloat((numbers[0] * 24).toFixed(3));\n\n// 将结果存储到指定的 flow 变量中\nflow.set(['in_ll', 'in_ll1', 'in_ll2', 'in_cod', 'in_nh3','yjin'], numbers);\n\nmsg.payload = {\n    in_ll: numbers[0],\n    in_ll1: numbers[1],\n    in_ll2: numbers[2],\n    in_cod: numbers[3],\n    in_nh3: numbers[4]\n};\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 100,
        "wires": [
            [
                "6a6500eedc2344cc"
            ]
        ]
    },
    {
        "id": "bec92288fc2ac3c5",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "o  l c n tn tp ph",
        "func": "var results = [];\n\n// 循环处理每对数据\nfor (let i = 0; i < 7; i++) {\n    const num = [msg.payload[i * 2], msg.payload[i * 2 + 1]];\n\n    const buf = Buffer.allocUnsafe(4);\n    buf.writeUInt16BE(num[0], 2);\n    buf.writeUInt16BE(num[1], 0);\n    var floatValue = parseFloat(buf.readFloatBE(0).toFixed(2)); // 将结果保持为浮动数\n\n    results.push({ payload: floatValue }); // 将数字封装到对象中\n}\n\n// 将结果转换为仅包含数字的数组\nvar numbers = results.map(function (item) {\n    return item.payload;\n});\n\n// 将第一个元素乘以 3.6\nnumbers[0] = parseFloat((numbers[0] * 3.6).toFixed(3));\nnumbers[6] = parseFloat((numbers[0] * 24).toFixed(3));\n// 设置不同的输出端点\nflow.set([\"out_ll\", \"out_cod\", \"out_nh3\", \"out_tn\", \"out_tp\", \"out_ph\",\"yjout\"], numbers);\n\nmsg.payload = {\n    out_ll: numbers[0],\n    out_cod: numbers[1],\n    out_nh3: numbers[2],\n    out_tn: numbers[3],\n    out_tp: numbers[4],\n    out_ph: numbers[5],\n};\nreturn msg\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 180,
        "wires": [
            [
                "654a2896c9c1d351"
            ]
        ]
    },
    {
        "id": "1dd39f081aa23548",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "mariadb_indata",
        "func": "// 获取数据\nvar tag1 = flow.get(['in_lj', 'in_yw', 'in_ll', 'in_ll1', 'in_ll2', 'in_cod', 'in_nh3', 'in_tn', 'in_tp', 'in_ph', 'in_ss']);\nvar time = global.get(\"mariaDBTime\"); \n// 将获取的数据转换为浮点数，并检查NaN值\nfunction parseFloatAndCheckNaN(value) {\n    var parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n}\n\n// 转换数据\nvar in_lj = parseFloatAndCheckNaN(tag1[0]);\nvar in_yw = parseFloatAndCheckNaN(tag1[1]);\nvar in_ll = parseFloatAndCheckNaN(tag1[2]);\nvar in_ll_1 = parseFloatAndCheckNaN(tag1[3]);\nvar in_ll_2 = parseFloatAndCheckNaN(tag1[4]);\nvar in_cod = parseFloatAndCheckNaN(tag1[5]);\nvar in_nh3 = parseFloatAndCheckNaN(tag1[6]);\nvar in_tn = parseFloatAndCheckNaN(tag1[7]);\nvar in_tp = parseFloatAndCheckNaN(tag1[8]);\nvar in_ph = parseFloatAndCheckNaN(tag1[9]);\nvar in_ss = parseFloatAndCheckNaN(tag1[10]);\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO in_data_1 (time, inlj, inyw, inll, inll_1, inll_2, incod, innh3, intn, intp, inph, inss) \n    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time,\n    in_lj,\n    in_yw,\n    in_ll,\n    in_ll_1,\n    in_ll_2,\n    in_cod,\n    in_nh3,\n    in_tn,\n    in_tp,\n    in_ph,\n    in_ss\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "41fd8115f0c55055"
            ]
        ]
    },
    {
        "id": "41fd8115f0c55055",
        "type": "mysql",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 540,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "84687ec2d4d8da56",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "1dd39f081aa23548",
                "df32bbb85910d8b3"
            ]
        ]
    },
    {
        "id": "df32bbb85910d8b3",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "mariadb_outdata",
        "func": "// 获取数据\nvar tag1 = flow.get(['out_lj', 'out_ll', 'out_cod', 'out_nh3', 'out_tn', 'out_tp', 'out_ph', 'out_ss']);\nvar time = global.get(\"mariaDBTime\"); \n// 将获取的数据转换为浮点数，并检查NaN值\nfunction parseFloatAndCheckNaN(value) {\n    var parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n}\n\n// 转换数据\nvar out_lj = parseFloatAndCheckNaN(tag1[0]);\nvar out_ll = parseFloatAndCheckNaN(tag1[1]);\nvar out_cod = parseFloatAndCheckNaN(tag1[2]);\nvar out_nh3 = parseFloatAndCheckNaN(tag1[3]);\nvar out_tn = parseFloatAndCheckNaN(tag1[4]);\nvar out_tp = parseFloatAndCheckNaN(tag1[5]);\nvar out_ph = parseFloatAndCheckNaN(tag1[6]);\nvar out_ss = parseFloatAndCheckNaN(tag1[7]);\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO out_data_1 (time, outlj, outll, outcod, outnh3, outtn, outtp, outph, outss) \n    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time,\n    out_lj,\n    out_ll,\n    out_cod,\n    out_nh3,\n    out_tn,\n    out_tp,\n    out_ph,\n    out_ss\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 380,
        "wires": [
            [
                "41fd8115f0c55055"
            ]
        ]
    },
    {
        "id": "0d2afbdaacbc9ec7",
        "type": "websocket out",
        "z": "859f41f963de2747",
        "g": "3d7e0dd7494b5059",
        "name": "",
        "server": "04c53f3b80e4883c",
        "client": "",
        "x": 430,
        "y": 780,
        "wires": []
    },
    {
        "id": "73ea2090dc046035",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "3d7e0dd7494b5059",
        "name": "websocket",
        "func": "// 检查NaN值并替换为0\nfunction replaceNaN(value) {\n    return isNaN(value) ? 0 : value;\n}\n\n// 从flow中获取数据\nvar tag1 = flow.get(['in_lj', 'in_yw', 'in_ll', 'in_ll1', 'in_ll2', 'in_cod', 'in_nh3', 'in_tn', 'in_tp', 'in_ph', 'in_ss', 'yjin']);\nvar tag2 = flow.get(['out_lj', 'out_ll', 'out_cod', 'out_nh3', 'out_tn', 'out_tp', 'out_ph', 'out_ss', 'yjout']);\nvar tag3 = flow.get([\"tsb1\",\"tsb2\",\"tsb3\",\"tsb4\",\"tsb5\",\"lwji\", \"zsll\"]);\nvar tag6 = flow.get([\"tsb1_online\", \"tsb2_online\", \"tsb3_online\", \"tsb4_online\", \"tsb5_online\"]);\nvar tag4 = flow.get([\"tn1\", \"tn2\", \"tn3\", \"tn1_lj\", \"tn2_lj\", \"tn3_lj\"]);\nvar tag5 = flow.get([\"yhg1\", \"yhg1_lj\", \"yhg2\", \"yhg2_lj\", \"yhg3\", \"yhg3_lj\", \"yhg_lj\"]);\n\n\n\n\n// 将获取的数据转换为浮点数并检查NaN\nvar yhg1 = replaceNaN(parseFloat(tag5[0]?.toFixed(2)) || 0);\nvar yhg1_lj = replaceNaN(parseFloat(tag5[1]?.toFixed(2)) || 0);\nvar yhg2 = replaceNaN(parseFloat(tag5[2]?.toFixed(2)) || 0);\nvar yhg2_lj = replaceNaN(parseFloat(tag5[3]?.toFixed(2)) || 0);\nvar yhg3 = replaceNaN(parseFloat(tag5[4]?.toFixed(2)) || 0);\nvar yhg3_lj = replaceNaN(parseFloat(tag5[5]?.toFixed(2)) || 0);\nvar yhg_lj = replaceNaN(parseFloat(tag5[6]?.toFixed(2)) || 0);\n\n// 将获取的数据转换为浮点数并检查NaN\nvar in_lj = parseFloatAndCheckNaN(tag1[0]);\nvar in_yw = parseFloatAndCheckNaN(tag1[1]);\nvar in_ll = parseFloatAndCheckNaN(tag1[2]);\nvar in_ll_1 = parseFloatAndCheckNaN(tag1[3]);\nvar in_ll_2 = parseFloatAndCheckNaN(tag1[4]);\nvar in_cod = parseFloatAndCheckNaN(tag1[5]);\nvar in_nh3 = parseFloatAndCheckNaN(tag1[6]);\nvar in_tn = parseFloatAndCheckNaN(tag1[7]);\nvar in_tp = parseFloatAndCheckNaN(tag1[8]);\nvar in_ph = parseFloatAndCheckNaN(tag1[9]);\nvar in_ss = parseFloatAndCheckNaN(tag1[10]);\nvar yjin = parseFloatAndCheckNaN(tag1[11]);\n\n// 转换数据\nvar out_lj = parseFloatAndCheckNaN(tag2[0]);\nvar out_ll = parseFloatAndCheckNaN(tag2[1]);\nvar out_cod = parseFloatAndCheckNaN(tag2[2]);\nvar out_nh3 = parseFloatAndCheckNaN(tag2[3]);\nvar out_tn = parseFloatAndCheckNaN(tag2[4]);\nvar out_tp = parseFloatAndCheckNaN(tag2[5]);\nvar out_ph = parseFloatAndCheckNaN(tag2[6]);\nvar out_ss = parseFloatAndCheckNaN(tag2[7]);\nvar yjout = parseFloatAndCheckNaN(tag2[8]);\n\n// 将获取的数据转换为浮点数并检查NaN值\nfunction parseFloatAndCheckNaN(value) {\n    var parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n}\n\n// 将获取的数据转换为浮点数\nvar tsb1 = parseFloat(tag3[0]);\nvar tsb2 = parseFloat(tag3[1]);\nvar tsb3 = parseFloat(tag3[2]);\nvar tsb4 = parseFloat(tag3[3]);\nvar tsb5 = parseFloat(tag3[4]);\nvar lwji = parseFloat(tag3[5]);\nvar zsll = parseFloat(tag3[6]).toFixed(2);\n\nvar tn1 = (tag4[0]);\nvar tn2 = (tag4[1]);\nvar tn3 = (tag4[2]);\nvar tn1_lj = (tag4[3]);\nvar tn2_lj = (tag4[4]);\nvar tn3_lj = (tag4[5]);\n\nvar tag11 = flow.get(['in_yw_erro', 'in_ll_erro', 'in_ll1_erro', 'in_ll2_erro', 'in_cod_erro', 'in_nh3_erro', 'in_tn_erro', 'in_tp_erro', 'in_ph_erro', 'in_ss_erro']);\nvar tag12 = flow.get(['out_ll_erro', 'out_cod_erro', 'out_nh3_erro', 'out_tn_erro', 'out_tp_erro', 'out_ph_erro', 'out_ss_erro']);\nvar tag13 = flow.get(['tsb1_erro', 'tsb2_erro', 'tsb3_erro', 'tsb4_erro', 'tsb5_erro']);\nvar tag14 = flow.get(['tn1_erro', 'tn2_erro', 'tn3_erro']);\nvar tag15 = flow.get(['yhg1_erro', 'yhg2_erro', 'yhg3_erro']);\n// 构建进水数据\nvar indata = [\n    { name: '进水流量', data: in_ll, dw: 'm³/h', alarm: tag11[1] === 1 ? 1 : 0 },\n    { name: '泵房液位', data: in_yw, dw: 'm', alarm: tag11[0] === 1 ? 1 : 0 },\n    { name: '一期进水流量', data: in_ll_1, dw: 'm³/h', alarm: tag11[2] === 1 ? 1 : 0 },\n    { name: '二期进水流量', data: in_ll_2, dw: 'm³/h', alarm: tag11[3] === 1 ? 1 : 0 },\n    { name: '预计进水量', data: yjin, dw: 'm³', alarm:  0 },\n    { name: '进水累计', data: in_lj, dw: 'm³', alarm:  0 },\n    { name: '进水COD', data: in_cod, dw: 'mg/l', alarm: tag11[4] === 1 ? 1 : 0 },\n    { name: '进水总磷', data: in_tp, dw: 'mg/l', alarm: tag11[7] === 1 ? 1 : 0 },\n    { name: '进水氨氮', data: in_nh3, dw: 'mg/l', alarm: tag11[5] === 1 ? 1 : 0 },\n    { name: '进水总氮', data: in_tn, dw: 'mg/l', alarm: tag11[6] === 1 ? 1 : 0 },\n    { name: '进水PH', data: in_ph, dw: '', alarm: tag11[8] === 1 ? 1 : 0 },\n    { name: '进水浊度', data: in_ss, dw: 'NTU', alarm: tag11[9] === 1 ? 1 : 0 },\n    { name: '1#碳源投加量', data: tn1, dw: 'L/h', alarm: tag14[0] === 1 ? 1 : 0 },\n    { name: '1#碳源累计', data: tn1_lj, dw: 'L', alarm: 0 },\n    { name: '2#碳源投加量', data: tn2, dw: 'L/h', alarm: tag14[1] === 1 ? 1 : 0 },\n    { name: '2#碳源累计', data: tn2_lj, dw: 'L', alarm: 0 },\n    { name: '3#碳源投加量', data: tn3, dw: 'L/h', alarm: tag14[2] === 1 ? 1 : 0 },\n    { name: '3#碳源累计', data: tn3_lj, dw: 'L', alarm: 0 },\n    { name: '1#泵流量', data: tsb1, dw: 'm³/h', alarm: tag6[0]=== 1 || tag13[0] === 1 ? 1 : 0 },\n    { name: '2#泵流量', data: tsb2, dw: 'm³/h', alarm: tag6[1]=== 1||tag13[1] === 1 ? 1 : 0 },\n    { name: '3#泵流量', data: tsb3, dw: 'm³/h', alarm: tag6[2]=== 1||tag13[2] === 1 ? 1 : 0 },\n    { name: '4#泵流量', data: tsb4, dw: 'm³/h', alarm: tag6[3]=== 1||tag13[3] === 1 ? 1 : 0 },\n    { name: '5#泵流量', data: tsb5, dw: 'm³/h', alarm: tag6[4]=== 1||tag13[4] === 1 ? 1 : 0 },\n    { name: '泵房进水量', data: zsll, dw: 'm³/h', alarm:  0 },\n];\n\n// 构建出水数据\nvar outdata = [\n    { name: '出水流量', data: out_ll, dw: 'm³/h', alarm: tag12[0] === 1 ? 1 : 0 },\n    { name: '预计出水量', data: yjout, dw: 'm³', alarm:  0 },\n    { name: '出水累计', data: out_lj, dw: 'm³', alarm:  0 },\n    { name: '出水COD', data: out_cod, dw: 'mg/l', alarm: tag12[1] === 1 ? 1 : 0 },\n    { name: '出水氨氮', data: out_nh3, dw: 'mg/l', alarm: tag12[2] === 1 ? 1 : 0 },\n    { name: '出水总氮', data: out_tn, dw: 'mg/l', alarm: tag12[3] === 1 ? 1 : 0 },\n    { name: '出水总磷', data: out_tp, dw: 'mg/l', alarm: tag12[4] === 1 ? 1 : 0 },\n    { name: '出水PH', data: out_ph, dw: '', alarm: tag12[5] === 1 ? 1 : 0 },\n    { name: '出水浊度', data: out_ss, dw: 'NTU', alarm: tag12[6] === 1 ? 1 : 0 },\n    { name: '1#沟出水流量', data: yhg1, dw: 'm³/h', alarm: tag15[0] === 1 ? 1 : 0 },\n    { name: '2#沟出水流量', data: yhg2, dw: 'm³/h', alarm: tag15[1] === 1 ? 1 : 0 },\n    { name: '3#沟出水流量', data: yhg3, dw: 'm³/h', alarm: tag15[2] === 1 ? 1 : 0 },\n    { name: '氧化沟出水量', data: yhg3 + yhg2 + yhg1, dw: 'm³/h', alarm:  0 },\n];\n\n\n// 构建最终的消息负载\nmsg.payload = {\n    indata,\n    outdata,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 780,
        "wires": [
            [
                "0d2afbdaacbc9ec7"
            ]
        ]
    },
    {
        "id": "fe7656e0a0bf41d6",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "3d7e0dd7494b5059",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 780,
        "wires": [
            [
                "73ea2090dc046035"
            ]
        ]
    },
    {
        "id": "3a906792489d305f",
        "type": "mqtt out",
        "z": "859f41f963de2747",
        "name": "",
        "topic": "/SubTopic1111",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 460,
        "y": 1160,
        "wires": []
    },
    {
        "id": "9d834def7d0f9e3e",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "生成命令",
        "func": "// 初始化设备索引\ncontext.deviceIndex = context.deviceIndex || 0;\n\n// 设备地址\nconst addresses = [1, 2, 3, 4, 5];\n\n// 获取当前设备地址\nconst currentAddress = addresses[context.deviceIndex];\n\n// 更新设备索引\ncontext.deviceIndex = (context.deviceIndex + 1) % addresses.length;\n\n// 生成采集命令（不含校验码）\nlet command = `${currentAddress.toString(16).padStart(2, '0')}0410100002`;\n\n// 计算CRC校验码\nfunction calculateCRC(command) {\n    let crc = 0xFFFF;\n    for (let pos = 0; pos < command.length; pos += 2) {\n        crc ^= parseInt(command.substr(pos, 2), 16);\n        for (let i = 8; i !== 0; i--) {\n            if ((crc & 0x0001) !== 0) {\n                crc >>= 1;\n                crc ^= 0xA001;\n            } else {\n                crc >>= 1;\n            }\n        }\n    }\n    return crc.toString(16).padStart(4, '0');\n}\n\n// 获取校验码\nconst crc = calculateCRC(command);\n\n// 完整命令（包含校验码）\ncommand += crc.slice(2) + crc.slice(0, 2);\n\n// 设置输出消息\nmsg.topic = `devices/${currentAddress}/command`;\nmsg.payload = Buffer.from(command, 'hex');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1160,
        "wires": [
            [
                "3a906792489d305f"
            ]
        ]
    },
    {
        "id": "4b9a681dbbf6e43f",
        "type": "mqtt in",
        "z": "859f41f963de2747",
        "name": "",
        "topic": "/PubTopic1111",
        "qos": "0",
        "datatype": "buffer",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 120,
        "y": 1240,
        "wires": [
            [
                "b5bc4b4f2cda64e3",
                "82d80aca214143ec"
            ]
        ]
    },
    {
        "id": "b5bc4b4f2cda64e3",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "解析数据",
        "func": "// 将接收到的数据转换为十六进制字符串\nlet hexData = msg.payload.toString('hex');\n\n// 解析出设备地址（假设设备地址在前两个字符）\nlet deviceAddress = parseInt(hexData.slice(0, 2), 16);\n\n// 根据设备地址分类处理数据\nswitch(deviceAddress) {\n    case 1:\n        msg.topic = '设备1';\n        break;\n    case 2:\n        msg.topic = '设备2';\n        break;\n    case 3:\n        msg.topic = '设备3';\n        break;\n    case 4:\n        msg.topic = '设备4';\n        break;\n    case 5:\n        msg.topic = '设备5';\n        break;\n    case 8:\n        msg.topic = '设备8';\n        break;\n    case 9:\n        msg.topic = '设备9';\n        break;\n    default:\n        msg.topic = '未知设备';\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1240,
        "wires": [
            [
                "e15897e5882791d8"
            ]
        ]
    },
    {
        "id": "e15897e5882791d8",
        "type": "switch",
        "z": "859f41f963de2747",
        "name": "按设备分流",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "设备1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备5",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 450,
        "y": 1240,
        "wires": [
            [
                "9dcbe00f8f60869f"
            ],
            [
                "54aef44823dbf860"
            ],
            [
                "ba25ed527adf59c8"
            ],
            [
                "214476153092d18e"
            ],
            [
                "46708c05417a7fc2"
            ]
        ]
    },
    {
        "id": "9dcbe00f8f60869f",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x04) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1160,
        "wires": [
            [
                "eaed831c4416709a"
            ]
        ]
    },
    {
        "id": "eaed831c4416709a",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "1#泵",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"tsb1\", msg.payload);\nmsg.payload = {\n    tsb1:msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1160,
        "wires": [
            [
                "9cfde45d570e0a29"
            ]
        ]
    },
    {
        "id": "54aef44823dbf860",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x04) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1200,
        "wires": [
            [
                "2dee0e445fc4e653"
            ]
        ]
    },
    {
        "id": "ba25ed527adf59c8",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x04) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1240,
        "wires": [
            [
                "d869b0ff7b0e3cd9"
            ]
        ]
    },
    {
        "id": "214476153092d18e",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x04) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1280,
        "wires": [
            [
                "8a2dacaac10d41e3"
            ]
        ]
    },
    {
        "id": "46708c05417a7fc2",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x04) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1320,
        "wires": [
            [
                "f2f6bc661ae5586e"
            ]
        ]
    },
    {
        "id": "f46e07bfeb8d5aa8",
        "type": "inject",
        "z": "859f41f963de2747",
        "name": "",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "0e32a78ffaaa8405"
            ]
        ]
    },
    {
        "id": "153da98bf9a6962f",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "提升泵总进水量",
        "func": "var tag1 = flow.get([\n    \"tsb1\",\n    \"tsb2\",\n    \"tsb3\",\n    \"tsb4\",\n    \"tsb5\",\n  \n]);\n\n// 将获取的数据转换为浮点数\nvar tsb1 = parseFloat(tag1[0]);\nvar tsb2 = parseFloat(tag1[1]);\nvar tsb3 = parseFloat(tag1[2]);\nvar tsb4 = parseFloat(tag1[3]);\nvar tsb5 = parseFloat(tag1[4]);\n\n \nvar zsll = tsb1 + tsb2 + tsb3 + tsb4 + tsb5;\nmsg.payload = parseFloat(zsll.toFixed(2));\nflow.set(\"zsll\",zsll);\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "21897bab8afef258",
        "type": "inject",
        "z": "859f41f963de2747",
        "name": "",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 1160,
        "wires": [
            [
                "9d834def7d0f9e3e"
            ]
        ]
    },
    {
        "id": "a18b4a9e48c822f9",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "提升泵进水累计",
        "func": "\nvar ll = flow.get(\"zsll\");\nvar ll1 = ll / 3.6;\n// 计算累积流量\nif (!flow.get(\"lwjilqll\")) {\n    flow.set(\"lwjilqll\", 0);\n};\n\n\nvar cumu = flow.get(\"lwjilqll\");\nvar cumu1 = cumu + ll1;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjilqll\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nmsg.payload = cumu3;\nflow.set(\"lwji\", cumu3);\nglobal.set(\"tsblj\",cumu3);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "48a1dc1263af22c2",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 590,
        "y": 520,
        "wires": [
            [
                "39ef05505d2198ab",
                "b84c078b8265459e",
                "b9f8cf1cd7f7dd3b"
            ]
        ]
    },
    {
        "id": "39ef05505d2198ab",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "定时",
        "func": "var time = global.get(\"cstTime\"); // 获取时间对象\nvar hour = time.hour;\nvar minute = time.minute;\nvar second = time.second;\n\nif (hour === 0 && minute === 0 && second === 0) {\n    msg.payload = true; // 如果时间为10:47:00，设置payload为0\n    return msg;      // 输出消息\n} else {\n    return null;     // 否则，不输出消息\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "b84c078b8265459e",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "定时",
        "func": "var time = global.get(\"cstTime\"); // 获取时间对象\nvar hour = time.hour;\nvar minute = time.minute;\nvar second = time.second;\n\n// 检查是否为指定的时间 10:47:00\nif (hour === 0 && minute === 0 && second === 1) {\n    msg.payload = false; // 如果时间为10:47:00，设置payload为0\n    return msg;      // 输出消息\n} else {\n    return null;     // 否则，不输出消息\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "2dee0e445fc4e653",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "2#泵",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"tsb2\", msg.payload);\nmsg.payload = {\n    tsb2: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1200,
        "wires": [
            [
                "9cfde45d570e0a29"
            ]
        ]
    },
    {
        "id": "d869b0ff7b0e3cd9",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "3#泵",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"tsb3\", msg.payload);\nmsg.payload = {\n    tsb3: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1240,
        "wires": [
            [
                "9cfde45d570e0a29"
            ]
        ]
    },
    {
        "id": "8a2dacaac10d41e3",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "4#泵",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"tsb4\", msg.payload);\nmsg.payload = {\n    tsb4: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1280,
        "wires": [
            [
                "9cfde45d570e0a29"
            ]
        ]
    },
    {
        "id": "f2f6bc661ae5586e",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "5#泵",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"tsb5\", msg.payload);\nmsg.payload = {\n    tsb5: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1320,
        "wires": [
            [
                "9cfde45d570e0a29"
            ]
        ]
    },
    {
        "id": "0c1ca491ea9518c4",
        "type": "mysql",
        "z": "859f41f963de2747",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 420,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "0e32a78ffaaa8405",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "写入数据库",
        "func": "var tag1 = flow.get([\n    \"tsb1\",\n    \"tsb2\",\n    \"tsb3\",\n    \"tsb4\",\n    \"tsb5\",\n    \"lwji\",\n    \"zsll\"\n]);\n\n// 检查 NaN 值并替换为 0\nfunction replaceNaN(value) {\n    return isNaN(value) || value === undefined ? 0 : value; // 检查是否为 undefined\n}\n\n// 将获取的数据转换为浮点数，确保是数字类型\nvar tsb1 = replaceNaN(parseFloat(tag1[0])); // 注意这里去掉了 toFixed(2)，改为用 replaceNaN 检查\nvar tsb2 = replaceNaN(parseFloat(tag1[1]));\nvar tsb3 = replaceNaN(parseFloat(tag1[2]));\nvar tsb4 = replaceNaN(parseFloat(tag1[3]));\nvar tsb5 = replaceNaN(parseFloat(tag1[4]));\nvar lwji = replaceNaN(parseFloat(tag1[5]));\nvar zsll = replaceNaN(parseFloat(tag1[6]));\n\n// 取时间变量\nvar time = global.get(\"mariaDBTime\");\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO tsb (time, tsb1, tsb2, tsb3, tsb4, tsb5, lw_ji, in_ll) \n    VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time,\n    tsb1.toFixed(2), // 在这里使用 toFixed(2) 保留两位小数\n    tsb2.toFixed(2),\n    tsb3.toFixed(2),\n    tsb4.toFixed(2),\n    tsb5.toFixed(2),\n    lwji.toFixed(2),\n    zsll.toFixed(2)\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1060,
        "wires": [
            [
                "0c1ca491ea9518c4"
            ]
        ]
    },
    {
        "id": "87f6bc058a7c8a70",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "13836000",
        "payloadType": "num",
        "x": 140,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "6a9f2c2962f90de9",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "144216000",
        "payloadType": "num",
        "x": 140,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "e948e0b22931a686",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "1#碳源累计",
        "func": "\nvar ll = flow.get(\"tn1\");\nvar ll1 = ll / 3600;\n// 计算累积流量\nif (!flow.get(\"lqll21\")) {\n    flow.set(\"lqll21\", 0);\n};\nvar cumu = flow.get(\"lqll21\");\nvar cumu1 = cumu + ll1;\n\nflow.set(\"lqll21\", cumu1);\nvar cumu2 = parseFloat(cumu1.toFixed(2));\nflow.set(\"tn1_lj\", cumu2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "2afba5a996010628",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "2#碳源累计",
        "func": "\nvar ll = flow.get(\"tn2\");\nvar ll1 = ll / 3600;\n// 计算累积流量\nif (!flow.get(\"lqll2\")) {\n    flow.set(\"lqll2\", 0);\n};\nvar cumu = flow.get(\"lqll2\");\nvar cumu1 = cumu + ll1;\n\nflow.set(\"lqll2\", cumu1);\nvar cumu2 = parseFloat(cumu1.toFixed(2));\nflow.set(\"tn2_lj\", cumu2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "e61e9dd3429bc15c",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "3号碳源累计",
        "func": "\nvar ll = flow.get(\"tn3\");\nvar ll1 = ll / 3600;\n// 计算累积流量\nif (!flow.get(\"lqll23\")) {\n    flow.set(\"lqll23\", 0);\n};\nvar cumu = flow.get(\"lqll23\");\nvar cumu1 = cumu + ll1;\n\nflow.set(\"lqll23\", cumu1);\nvar cumu2 = parseFloat(cumu1.toFixed(2));\nflow.set(\"tn3_lj\", cumu2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "d75c324845ee0d03",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "定时",
        "func": "var time = global.get(\"cstTime\"); // 获取时间对象\nvar hour = time.hour;\nvar minute = time.minute;\nvar second = time.second;\n\n// 检查是否为指定的时间 10:47:00\nif (hour === 0 && minute === 0 && second === 0) {\n    msg.payload = 0;\n    return msg; \n} else {\n    return null; \n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1780,
        "wires": [
            [
                "73f9f78b4eb0a8e0"
            ]
        ]
    },
    {
        "id": "73f9f78b4eb0a8e0",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "累计清零",
        "func": "var rest = msg.payload;\nvar variableNames = [\"lqll21\", \"lqll2\", \"lqll23\"];\n\nvariableNames.forEach(function (name) {\n    flow.set(name, rest);\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "25ef232beb7c497e",
        "type": "mysql",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 460,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "8dbad5eb1c5c29f3",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "写入数据库",
        "func": "var tag1 = flow.get([\"tn1\", \"tn2\", \"tn3\", \"tn1_lj\", \"tn2_lj\", \"tn3_lj\"]);\n\n// 确保每个值有效，避免 undefined 或 null\nvar tn1_lqll = replaceNaN(tag1[0] ? parseFloat(tag1[0].toFixed(2)) : 0);\nvar tn2_lqll = replaceNaN(tag1[1] ? parseFloat(tag1[1].toFixed(2)) : 0);\nvar tn3_lqll = replaceNaN(tag1[2] ? parseFloat(tag1[2].toFixed(2)) : 0);\nvar tn1_lj = replaceNaN(tag1[3] ? parseFloat(tag1[3].toFixed(2)) : 0);\nvar tn2_lj = replaceNaN(tag1[4] ? parseFloat(tag1[4].toFixed(2)) : 0);\nvar tn3_lj = replaceNaN(tag1[5] ? parseFloat(tag1[5].toFixed(2)) : 0);\n\n// 检查 NaN 值并替换为 0\nfunction replaceNaN(value) {\n    return (isNaN(value) || value === null || value === undefined) ? 0 : value;\n}\n\nvar time = global.get(\"mariaDBTime\") || Date.now();  // 如果没有时间，则使用当前时间\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO tn_ll (\n        time,\n        tn1_ll,\n        tn1_lj,\n        tn2_ll,\n        tn2_lj,\n        tn3_ll,\n        tn3_lj\n    ) \n    VALUES (?, ?, ?, ?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time,\n    tn1_lqll,\n    tn1_lj,\n    tn2_lqll,\n    tn2_lj,\n    tn3_lqll,\n    tn3_lj\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1580,
        "wires": [
            [
                "25ef232beb7c497e"
            ]
        ]
    },
    {
        "id": "62f82f9ff7d5a228",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1580,
        "wires": [
            [
                "8dbad5eb1c5c29f3"
            ]
        ]
    },
    {
        "id": "45017919c27f0221",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 2100,
        "wires": [
            [
                "8927495ef57377e8",
                "700b832f82557648"
            ]
        ]
    },
    {
        "id": "788272edcd02c78f",
        "type": "mqtt out",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "",
        "topic": "/SubTopic099",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 660,
        "y": 2060,
        "wires": []
    },
    {
        "id": "0337f44d70ac8848",
        "type": "mqtt in",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "",
        "topic": "/PubTopic099",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 2200,
        "wires": [
            [
                "6935f0af7720c3f9",
                "844605cb2a732c33"
            ]
        ]
    },
    {
        "id": "47401130466a20e4",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x04) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2180,
        "wires": [
            [
                "60d0881fbe64afc1"
            ]
        ]
    },
    {
        "id": "60d0881fbe64afc1",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "3号沟出水流量计",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\nflow.set(\"yhg3\", msg.payload);\nmsg.payload = {\n    yhg3: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2180,
        "wires": [
            [
                "efb83ec4c360401e"
            ]
        ]
    },
    {
        "id": "6935f0af7720c3f9",
        "type": "switch",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "",
        "property": "payload[0]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 2200,
        "wires": [
            [
                "47401130466a20e4"
            ],
            [
                "49afcd617fe4ef7c"
            ]
        ]
    },
    {
        "id": "8927495ef57377e8",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "1、3号流量计",
        "func": "// 初始化设备索引\ncontext.deviceIndex = context.deviceIndex || 0;\n\n// 设备地址\nconst addresses = [1, 2];\n\n// 获取当前设备地址\nconst currentAddress = addresses[context.deviceIndex];\n\n// 更新设备索引\ncontext.deviceIndex = (context.deviceIndex + 1) % addresses.length;\n\n// 生成采集命令（不含校验码）\nlet command = `${currentAddress.toString(16).padStart(2, '0')}0410100002`;\n\n// 计算CRC校验码\nfunction calculateCRC(command) {\n    let crc = 0xFFFF;\n    for (let pos = 0; pos < command.length; pos += 2) {\n        crc ^= parseInt(command.substr(pos, 2), 16);\n        for (let i = 8; i !== 0; i--) {\n            if ((crc & 0x0001) !== 0) {\n                crc >>= 1;\n                crc ^= 0xA001;\n            } else {\n                crc >>= 1;\n            }\n        }\n    }\n    return crc.toString(16).padStart(4, '0');\n}\n\n// 获取校验码\nconst crc = calculateCRC(command);\n\n// 完整命令（包含校验码）\ncommand += crc.slice(2) + crc.slice(0, 2);\n\n// 设置输出消息\nmsg.topic = `devices/${currentAddress}/command`;\nmsg.payload = Buffer.from(command, 'hex');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2080,
        "wires": [
            [
                "788272edcd02c78f"
            ]
        ]
    },
    {
        "id": "49afcd617fe4ef7c",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x04) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2220,
        "wires": [
            [
                "f79184186e2efdf9"
            ]
        ]
    },
    {
        "id": "f79184186e2efdf9",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "1号沟出水流量计",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\nflow.set(\"yhg1\", msg.payload);\nmsg.payload = {\n    yhg1: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2220,
        "wires": [
            [
                "efb83ec4c360401e"
            ]
        ]
    },
    {
        "id": "b2f3a153d3598181",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x04) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 2260,
        "wires": [
            [
                "4a60f6368cbd431b"
            ]
        ]
    },
    {
        "id": "4a60f6368cbd431b",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "2号沟出水流量计",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\nflow.set(\"yhg2\", msg.payload);\nglobal.set(\"yhg2\", msg.payload);\nmsg.payload = {\n    yhg2: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2260,
        "wires": [
            [
                "efb83ec4c360401e"
            ]
        ]
    },
    {
        "id": "700b832f82557648",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "2号流量计",
        "func": "msg.payload = Buffer.from(\"01041010000274CE\",\"hex\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 2120,
        "wires": [
            [
                "48ae1d224562247a"
            ]
        ]
    },
    {
        "id": "7d3ad12f0ea69b2c",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "合计流量",
        "func": "var tag1 = flow.get([\"yhg1\", \"yhg2\", \"yhg3\"]);\nvar yhg_ll = tag1[0]+tag1[1]+tag1[2]; \nmsg.payload = yhg_ll\nflow.set(\"yhg_ll\",yhg_ll)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2500,
        "wires": [
            []
        ]
    },
    {
        "id": "6b4b694d71507124",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "1出水累计",
        "func": "\nvar ll = flow.get(\"yhg1\");\nvar ll1 = ll / 3.6;\n// 计算累积流量\nif (!flow.get(\"lqll10\")) {\n    flow.set(\"lqll10\", 0);\n};\nvar cumu = flow.get(\"lqll10\");\nvar cumu1 = cumu + ll1;\nflow.set(\"lqll10\", cumu1);\nvar cumu2 = cumu1/1000;\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nflow.set(\"yhg1_lj\", cumu3);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "38fbe01efd508d29",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "2出水累计",
        "func": "\nvar ll = flow.get(\"yhg2\");\nvar ll1 = ll / 3.6;\n// 计算累积流量\nif (!flow.get(\"lqll24\")) {\n    flow.set(\"lqll24\", 0);\n};\nvar cumu = flow.get(\"lqll24\");\nvar cumu1 = cumu + ll1;\nflow.set(\"lqll24\", cumu1);\nvar cumu2 = cumu1/1000;\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nflow.set(\"yhg2_lj\", cumu3);\nglobal.set(\"yhg2_lj\", cumu3);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "0b283ac9b65c6564",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "3出水累计",
        "func": "\nvar ll = flow.get(\"yhg3\");\nvar ll1 = ll / 3.6;\n// 计算累积流量\nif (!flow.get(\"lqll12\")) {\n    flow.set(\"lqll12\", 0);\n};\nvar cumu = flow.get(\"lqll12\");\nvar cumu1 = cumu + ll1;\nflow.set(\"lqll12\", cumu1);\nvar cumu2 = cumu1/1000;\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nflow.set(\"yhg3_lj\", cumu3);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2420,
        "wires": [
            []
        ]
    },
    {
        "id": "0cafb06ffa026ded",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 2420,
        "wires": [
            [
                "6b4b694d71507124",
                "38fbe01efd508d29",
                "0b283ac9b65c6564",
                "8bfdcaecafba49b9",
                "7d3ad12f0ea69b2c",
                "57ad95dedf04f818"
            ]
        ]
    },
    {
        "id": "8bfdcaecafba49b9",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "出水累计",
        "func": "\nvar ll = flow.get(\"yhg_ll\");\nvar ll1 = ll / 3.6;\n// 计算累积流量\nif (!flow.get(\"lqll13\")) {\n    flow.set(\"lqll13\", 0);\n};\nvar cumu = flow.get(\"lqll13\");\nvar cumu1 = cumu + ll1;\nflow.set(\"lqll13\", cumu1);\nvar cumu2 = cumu1/1000;\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nflow.set(\"yhg_lj\", cumu3);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2460,
        "wires": [
            []
        ]
    },
    {
        "id": "e5d56f6b314ee621",
        "type": "mysql",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 600,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "dc69055ae8ee8d7f",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "写入数据库",
        "func": "var tag1 = flow.get([\"yhg1\", \"yhg1_lj\", \"yhg2\", \"yhg2_lj\", \"yhg3\", \"yhg3_lj\", \"yhg_lj\"]);\n\n// 检查返回的数据是否有效并转换为浮点数\nvar yhg1 = replaceNaN(tag1 && tag1[0] ? parseFloat(tag1[0].toFixed(2)) : 0);\nvar yhg1_lj = replaceNaN(tag1 && tag1[1] ? parseFloat(tag1[1].toFixed(2)) : 0);\nvar yhg2 = replaceNaN(tag1 && tag1[2] ? parseFloat(tag1[2].toFixed(2)) : 0);\nvar yhg2_lj = replaceNaN(tag1 && tag1[3] ? parseFloat(tag1[3].toFixed(2)) : 0);\nvar yhg3 = replaceNaN(tag1 && tag1[4] ? parseFloat(tag1[4].toFixed(2)) : 0);\nvar yhg3_lj = replaceNaN(tag1 && tag1[5] ? parseFloat(tag1[5].toFixed(2)) : 0);\nvar yhg_lj = replaceNaN(tag1 && tag1[6] ? parseFloat(tag1[6].toFixed(2)) : 0);\n\n// 检查NaN值并替换为0\nfunction replaceNaN(value) {\n    return isNaN(value) ? 0 : value;\n}\n\nvar time = global.get(\"mariaDBTime\");\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO yhg (\n        time,\n        yhg1,\n        yhg1_lj,\n        yhg2,\n        yhg2_lj,\n        yhg3,\n        yhg3_lj,\n        yhg_lj\n    ) \n    VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time,\n    yhg1,\n    yhg1_lj,\n    yhg2,\n    yhg2_lj,\n    yhg3,\n    yhg3_lj,\n    yhg_lj\n];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 2580,
        "wires": [
            [
                "e5d56f6b314ee621"
            ]
        ]
    },
    {
        "id": "cb449478c70f4958",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 2580,
        "wires": [
            [
                "dc69055ae8ee8d7f"
            ]
        ]
    },
    {
        "id": "dff087d3172488ab",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "1#碳源流量计",
        "func": "// 获取输入电流值\nlet current = msg.payload[0];\n\n// 定义原始量程和目标量程\nlet inputMin = 655;\nlet inputMax = 3276;\nlet outputMin = 0;\nlet outputMax = 1500;\n\n// 线性转换公式\nlet output = ((current - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin;\nvar output1 = parseFloat(output.toFixed(2))\nflow.set(\"tn1\", output1);\nmsg.payload = {\n    tn1: output1\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1440,
        "wires": [
            [
                "679522b38227656a",
                "59e9e17a5a96919b"
            ]
        ]
    },
    {
        "id": "48ae1d224562247a",
        "type": "mqtt out",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "",
        "topic": "/SubTopic444",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 660,
        "y": 2120,
        "wires": []
    },
    {
        "id": "ec2687c4131f9667",
        "type": "mqtt in",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "",
        "topic": "/PubTopic444",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 2260,
        "wires": [
            [
                "b2f3a153d3598181",
                "31d7e2b8baf63d07"
            ]
        ]
    },
    {
        "id": "092c9cdc7c63935d",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "获取网关状态",
        "func": "// 获取当前计数器值\nvar index = flow.get('deviceIndex') || 0;\n\n// 设备状态\nvar deviceStatuses = {\n    status1: flow.get('status1'),\n    status2: flow.get('status2'),\n    status3: flow.get('status3'),\n    status4: flow.get('status4'),\n    status5: flow.get('status5'),\n    status6: flow.get('status6')\n};\n\n// 设备状态数组\nvar statusesArray = Object.values(deviceStatuses);\n\n// 获取当前状态\nmsg.payload = {\n    device: `status${index + 1}`,\n    status: statusesArray[index]\n};\n\n// 更新计数器\nindex = (index + 1) % statusesArray.length;\nflow.set('deviceIndex', index);\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 3240,
        "wires": [
            [
                "c560e3cd3e24756a"
            ]
        ]
    },
    {
        "id": "1d369063bb638c33",
        "type": "inject",
        "z": "859f41f963de2747",
        "name": "",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 3240,
        "wires": [
            [
                "092c9cdc7c63935d"
            ]
        ]
    },
    {
        "id": "c560e3cd3e24756a",
        "type": "json",
        "z": "859f41f963de2747",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 3240,
        "wires": [
            [
                "caa3915bc8dc38f5",
                "ca5efcf5eca782ab"
            ]
        ]
    },
    {
        "id": "caa3915bc8dc38f5",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "function 172",
        "func": "var status = msg.payload.status1\nmsg.payload = status\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 3220,
        "wires": [
            []
        ]
    },
    {
        "id": "ca5efcf5eca782ab",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "function 173",
        "func": "var status = msg.payload.status2\nmsg.payload = status\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 3260,
        "wires": [
            []
        ]
    },
    {
        "id": "c5d6854ba00afb08",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "3#碳源流量计",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"tn3\",msg.payload);\nmsg.payload = {\n    tn3: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1520,
        "wires": [
            [
                "679522b38227656a"
            ]
        ]
    },
    {
        "id": "5db4cbcb3617bec7",
        "type": "comment",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "碳源流量计计量累计和写入数据库",
        "info": "碳源流量计块\n使用usr-510n模块自身的websocket功能，截取其与上位机的通讯。",
        "x": 770,
        "y": 1640,
        "wires": []
    },
    {
        "id": "dbe019a4c55be8e4",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1660,
        "wires": [
            [
                "e948e0b22931a686",
                "2afba5a996010628",
                "e61e9dd3429bc15c",
                "d75c324845ee0d03"
            ]
        ]
    },
    {
        "id": "3cdd44f6f0b5d488",
        "type": "comment",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "读取plc的进出水流量累计数据",
        "info": "",
        "x": 520,
        "y": 580,
        "wires": []
    },
    {
        "id": "b13f1e39c4353685",
        "type": "comment",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "将进出水数据定时写入数据库",
        "info": "",
        "x": 180,
        "y": 300,
        "wires": []
    },
    {
        "id": "57ad95dedf04f818",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "定时",
        "func": "var time = global.get(\"cstTime\"); // 获取时间对象\nvar hour = time.hour;\nvar minute = time.minute;\nvar second = time.second;\n\n// 检查是否为指定的时间 10:47:00\nif (hour === 0 && minute === 0 && second === 0) {\n    msg.payload = 0;\n    return msg; \n} else {\n    return null; \n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2540,
        "wires": [
            [
                "4a2aaa1df436721f"
            ]
        ]
    },
    {
        "id": "4a2aaa1df436721f",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "累计清零",
        "func": "var rest = msg.payload;\nvar variableNames = [ \"lqll10\", \"lqll24\", \"lqll12\", \"lqll13\"];\n\nvariableNames.forEach(function (name) {\n    flow.set(name, rest);\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "6e7fd7c7c260a617",
        "type": "inject",
        "z": "859f41f963de2747",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 980,
        "wires": [
            [
                "a18b4a9e48c822f9",
                "b3010fdc026a8ced",
                "153da98bf9a6962f"
            ]
        ]
    },
    {
        "id": "b3010fdc026a8ced",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "定时",
        "func": "var time = global.get(\"cstTime\"); // 获取时间对象\nvar hour = time.hour;\nvar minute = time.minute;\nvar second = time.second;\n\n// 检查是否为指定的时间 10:47:00\nif (hour === 0 && minute === 0 && second === 0) {\n    msg.payload = 0;\n    return msg; \n} else {\n    return null; \n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 940,
        "wires": [
            [
                "f5ef1d9543905061"
            ]
        ]
    },
    {
        "id": "f5ef1d9543905061",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "累计清零",
        "func": "var rest = msg.payload;\nvar variableNames = [ \"lwjilqll\",\"lqll4\"];\n\nvariableNames.forEach(function (name) {\n    flow.set(name, rest);\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "026835adfcd86fe2",
        "type": "comment",
        "z": "859f41f963de2747",
        "name": "5台提升泵计量并累计和写入数据库",
        "info": "",
        "x": 760,
        "y": 920,
        "wires": []
    },
    {
        "id": "8ddcdd36dedc2bd1",
        "type": "comment",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "三个二沉池的出水计量及累计和写入数据库",
        "info": "",
        "x": 680,
        "y": 2460,
        "wires": []
    },
    {
        "id": "d9720ac441841114",
        "type": "comment",
        "z": "859f41f963de2747",
        "g": "3d7e0dd7494b5059",
        "name": "和app通讯",
        "info": "",
        "x": 120,
        "y": 720,
        "wires": []
    },
    {
        "id": "b9f8cf1cd7f7dd3b",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "总进水nodered累计程序",
        "func": "\nvar ll = flow.get(\"in_ll\");\nvar ll1 = ll / 3.6;\n// 计算累积流量\nif (!flow.get(\"lqll4\")) {\n    flow.set(\"lqll4\", 0);\n};\nvar cumu = flow.get(\"lqll4\");\nvar cumu1 = cumu + ll1;\nflow.set(\"lqll4\", cumu1);\nvar cumu2 = cumu1/1000;\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nflow.set(\"in1_lj\", cumu3);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "e6a5a28273f1fa78",
        "type": "comment",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "采集数采仪及其他设备数据",
        "info": "",
        "x": 750,
        "y": 340,
        "wires": []
    },
    {
        "id": "34937b355cab2fe1",
        "type": "http request",
        "z": "859f41f963de2747",
        "g": "e926111792e0afb7",
        "name": "发送模板消息",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2220,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "87073ce4c7cdabeb",
        "type": "split",
        "z": "859f41f963de2747",
        "g": "e926111792e0afb7",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1890,
        "y": 1680,
        "wires": [
            [
                "ca5e40b671907fe3"
            ]
        ]
    },
    {
        "id": "92b132ff51a29d53",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "e926111792e0afb7",
        "name": "设备离线",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nvar d_name = flow.get(\"d_name\");\nvar s_name = flow.get(\"s_name\");\nvar status0 = flow.get(\"status0\");\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"vpks8dx3GNykOuZPNUKeBYB9v0C6ZOXoOkysC1DNWVY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing7\": {\n            \"value\": d_name,\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": s_name,\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": status0,\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 1720,
        "wires": [
            [
                "34937b355cab2fe1"
            ]
        ]
    },
    {
        "id": "267dad21311cf6f1",
        "type": "split",
        "z": "859f41f963de2747",
        "g": "e926111792e0afb7",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 1890,
        "y": 1720,
        "wires": [
            [
                "92b132ff51a29d53"
            ]
        ]
    },
    {
        "id": "a091cbd82ca7192b",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "e926111792e0afb7",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1720,
        "wires": [
            [
                "267dad21311cf6f1"
            ]
        ]
    },
    {
        "id": "23bd7deebdec71bd",
        "type": "switch",
        "z": "859f41f963de2747",
        "g": "e926111792e0afb7",
        "name": "",
        "property": "payload.status0",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "在线",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "离线",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1610,
        "y": 1700,
        "wires": [
            [
                "b97abbefb6301a79"
            ],
            [
                "a091cbd82ca7192b"
            ]
        ]
    },
    {
        "id": "a5645ca8e9f2431e",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "10dfa72cd40e7f8d",
        "name": "数据异常",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nvar d_name1 = flow.get(\"d_name1\");\nvar s_name1 = flow.get(\"s_name1\");\nvar status1 = flow.get(\"status1\");\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"R2eVYNN8qGV7xiUyxaMLeuzo5KsJip9QsmBBvZQyXJY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing22\": {\n            \"value\": d_name1,\n            \"color\": \"#173177\"\n        },\n        \"thing13\": {\n            \"value\": s_name1,\n            \"color\": \"#173177\"\n        },\n        \"thing5\": {\n            \"value\": status1,\n            \"color\": \"#173177\"\n        },\n        \"time2\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3780,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "5b2b32d9f5ea8a91",
        "type": "split",
        "z": "859f41f963de2747",
        "g": "10dfa72cd40e7f8d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3650,
        "y": 980,
        "wires": [
            [
                "43b7570c621aec1d"
            ]
        ]
    },
    {
        "id": "afd250e99fb20bc2",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "10dfa72cd40e7f8d",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 980,
        "wires": [
            [
                "5b2b32d9f5ea8a91"
            ]
        ]
    },
    {
        "id": "2c50b1d87fb4e93a",
        "type": "split",
        "z": "859f41f963de2747",
        "g": "10dfa72cd40e7f8d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3650,
        "y": 1020,
        "wires": [
            [
                "a5645ca8e9f2431e"
            ]
        ]
    },
    {
        "id": "2b4e7a90385f2ddb",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "10dfa72cd40e7f8d",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3530,
        "y": 1020,
        "wires": [
            [
                "2c50b1d87fb4e93a"
            ]
        ]
    },
    {
        "id": "43b7570c621aec1d",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "10dfa72cd40e7f8d",
        "name": "数据正常",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nvar d_name1 = flow.get(\"d_name1\");\nvar s_name1 = flow.get(\"s_name1\");\nvar status1 = flow.get(\"status1\");\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"t0VKvfb3zVGKhW56_6EiIFLSHqlQ6rP2IewjMVlqmDU\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing12\": {\n            \"value\": d_name1,\n            \"color\": \"#173177\"\n        },\n        \"thing9\": {\n            \"value\": s_name1,\n            \"color\": \"#173177\"\n        },\n        \"thing13\": {\n            \"value\": status1,\n            \"color\": \"#173177\"\n        },\n        \"time6\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3780,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "ba3691366db1051c",
        "type": "switch",
        "z": "859f41f963de2747",
        "g": "10dfa72cd40e7f8d",
        "name": "",
        "property": "payload.status1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "数据恢复正常",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "数据异常，请及时处理！",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3230,
        "y": 1000,
        "wires": [
            [
                "afd250e99fb20bc2"
            ],
            [
                "2b4e7a90385f2ddb"
            ]
        ]
    },
    {
        "id": "0ceaf26ff27a7dca",
        "type": "mysql",
        "z": "859f41f963de2747",
        "g": "e926111792e0afb7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 1780,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "5789484545f9c375",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "e926111792e0afb7",
        "name": "写入数据库",
        "func": "var time = global.get(\"mariaDBTime\");\nvar d_name = flow.get(\"d_name\");\nvar s_name = flow.get(\"s_name\");\nvar status0 = flow.get(\"status0\");\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO device_status_log (timestamp, dname, sname, status) \n    VALUES (?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time,\n    d_name,\n    s_name,\n    status0\n\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1780,
        "wires": [
            [
                "0ceaf26ff27a7dca"
            ]
        ]
    },
    {
        "id": "3a94ee9e4a1ae20a",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "10dfa72cd40e7f8d",
        "name": "写入数据库",
        "func": "var time = global.get(\"mariaDBTime\");\nvar d_name = msg.payload.d_name1;\nvar s_name = msg.payload.s_name1;\nvar status0 = msg.payload.status1;\n\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO device_data_status_log (timestamp, dname, sname, status) \n    VALUES (?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time,\n    d_name,\n    s_name,\n    status0\n\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3230,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "d3c01d12208c953c",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "2#碳源流量计",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"tn2\",msg.payload);\nmsg.payload = {\n    tn2: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1480,
        "wires": [
            [
                "679522b38227656a"
            ]
        ]
    },
    {
        "id": "74b27db631a2ced9",
        "type": "mqtt out",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "",
        "topic": "/SubTopic/tn1",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 540,
        "y": 1860,
        "wires": []
    },
    {
        "id": "c4eb3a7254055a52",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "生成命令",
        "func": "msg.payload = Buffer.from(\"010303E80004C479\",\"hex\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1920,
        "wires": [
            [
                "b0f54e297ede388b",
                "0a18670e736b871a"
            ]
        ]
    },
    {
        "id": "f9a90d4c114e8da3",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1920,
        "wires": [
            [
                "c4eb3a7254055a52"
            ]
        ]
    },
    {
        "id": "b0f54e297ede388b",
        "type": "mqtt out",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "",
        "topic": "/SubTopic/tn2",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 540,
        "y": 1920,
        "wires": []
    },
    {
        "id": "0a18670e736b871a",
        "type": "mqtt out",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "",
        "topic": "/SubTopic/tn3",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 540,
        "y": 1960,
        "wires": []
    },
    {
        "id": "85ddcb6dd773e22b",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "生成命令",
        "func": "msg.payload = Buffer.from(\"010300000002C40B\",\"hex\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 1860,
        "wires": [
            [
                "74b27db631a2ced9"
            ]
        ]
    },
    {
        "id": "99c896abb280af44",
        "type": "mqtt in",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "",
        "topic": "/PubTopic/tn1",
        "qos": "0",
        "datatype": "buffer",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 1440,
        "wires": [
            [
                "7436fd2eb1c81efe"
            ]
        ]
    },
    {
        "id": "62af1dd31302449f",
        "type": "mqtt in",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "",
        "topic": "/PubTopic/tn2",
        "qos": "0",
        "datatype": "buffer",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 1480,
        "wires": [
            [
                "1c91285106e36e9c"
            ]
        ]
    },
    {
        "id": "13bd6f491b586e02",
        "type": "mqtt in",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "",
        "topic": "/PubTopic/tn3",
        "qos": "0",
        "datatype": "buffer",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 110,
        "y": 1520,
        "wires": [
            [
                "247993ecb829e9f2"
            ]
        ]
    },
    {
        "id": "1c91285106e36e9c",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1480,
        "wires": [
            [
                "d3c01d12208c953c"
            ]
        ]
    },
    {
        "id": "247993ecb829e9f2",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1520,
        "wires": [
            [
                "c5d6854ba00afb08"
            ]
        ]
    },
    {
        "id": "5d9f0b2568f4f429",
        "type": "inject",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1860,
        "wires": [
            [
                "85ddcb6dd773e22b"
            ]
        ]
    },
    {
        "id": "7436fd2eb1c81efe",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1440,
        "wires": [
            [
                "dff087d3172488ab"
            ]
        ]
    },
    {
        "id": "9cfde45d570e0a29",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "获取检测设备数据",
        "func": "// 获取 msg.payload 中的 tsb1 到 tsb5 的值\nlet tsbValues = ['tsb1', 'tsb2', 'tsb3', 'tsb4', 'tsb5'];\n\n// 初始化一个新的对象\nlet optimizedPayload = {};\n\n// 遍历 tsb1 到 tsb5，检查并只保留有值的字段\ntsbValues.forEach((tsb) => {\n    // 如果该字段有值（不是 undefined），将其加入到 optimizedPayload 中\n    if (msg.payload[tsb] !== undefined) {\n        optimizedPayload[tsb] = msg.payload[tsb];\n    }\n});\n\n// 如果有有效的字段，更新 msg.payload，否则不做任何操作\nif (Object.keys(optimizedPayload).length > 0) {\n    msg.payload = optimizedPayload;\n    return msg;\n} else {\n    return null; // 如果没有有效字段，则不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1240,
        "wires": [
            [
                "51bc625ebd8b39ee"
            ]
        ]
    },
    {
        "id": "ac90f8718c55b903",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "3d7e0dd7494b5059",
        "name": "websocket",
        "func": "// 检查NaN值并替换为0\nfunction replaceNaN(value) {\n    return isNaN(value) ? 0 : value;\n}\n\n// 从flow中获取数据\nvar tag1 = flow.get(['in_lj', 'in_yw', 'in_ll', 'in_ll_1', 'in_ll_2', 'in_cod', 'in_nh3', 'in_tn', 'in_tp', 'in_ph', 'in_ss', 'yjin']);\nvar tag2 = flow.get(['out_lj', 'out_ll', 'out_cod', 'out_nh3', 'out_tn', 'out_tp', 'out_ph', 'out_ss', 'yjout']);\nvar tag3 = flow.get([\"tsb1\",\"tsb2\",\"tsb3\",\"tsb4\",\"tsb5\",\"lwji\", \"zsll\"]);\nvar tag4 = flow.get([\"tn1_lqll\", \"tn2_lqll\", \"tn3_lqll\", \"tn1_lj\", \"tn2_lj\", \"tn3_lj\"]);\nvar tag5 = flow.get([\"yhg1\", \"yhg1_lj\", \"yhg2\", \"yhg2_lj\", \"yhg3\", \"yhg3_lj\", \"yhg_lj\"]);\nvar alarms1 = msg.payload.alarms;\nvar online = msg.payload.online;\n\n\n// 将获取的数据转换为浮点数并检查NaN\nvar yhg1 = replaceNaN(parseFloat(tag5[0]?.toFixed(2)) || 0);\nvar yhg1_lj = replaceNaN(parseFloat(tag5[1]?.toFixed(2)) || 0);\nvar yhg2 = replaceNaN(parseFloat(tag5[2]?.toFixed(2)) || 0);\nvar yhg2_lj = replaceNaN(parseFloat(tag5[3]?.toFixed(2)) || 0);\nvar yhg3 = replaceNaN(parseFloat(tag5[4]?.toFixed(2)) || 0);\nvar yhg3_lj = replaceNaN(parseFloat(tag5[5]?.toFixed(2)) || 0);\nvar yhg_lj = replaceNaN(parseFloat(tag5[6]?.toFixed(2)) || 0);\n\n// 将获取的数据转换为浮点数并检查NaN\nvar in_lj = parseFloatAndCheckNaN(tag1[0]);\nvar in_yw = parseFloatAndCheckNaN(tag1[1]);\nvar in_ll = parseFloatAndCheckNaN(tag1[2]);\nvar in_ll_1 = parseFloatAndCheckNaN(tag1[3]);\nvar in_ll_2 = parseFloatAndCheckNaN(tag1[4]);\nvar in_cod = parseFloatAndCheckNaN(tag1[5]);\nvar in_nh3 = parseFloatAndCheckNaN(tag1[6]);\nvar in_tn = parseFloatAndCheckNaN(tag1[7]);\nvar in_tp = parseFloatAndCheckNaN(tag1[8]);\nvar in_ph = parseFloatAndCheckNaN(tag1[9]);\nvar in_ss = parseFloatAndCheckNaN(tag1[10]);\nvar yjin = parseFloatAndCheckNaN(tag1[11]);\n\n// 转换数据\nvar out_lj = parseFloatAndCheckNaN(tag2[0]);\nvar out_ll = parseFloatAndCheckNaN(tag2[1]);\nvar out_cod = parseFloatAndCheckNaN(tag2[2]);\nvar out_nh3 = parseFloatAndCheckNaN(tag2[3]);\nvar out_tn = parseFloatAndCheckNaN(tag2[4]);\nvar out_tp = parseFloatAndCheckNaN(tag2[5]);\nvar out_ph = parseFloatAndCheckNaN(tag2[6]);\nvar out_ss = parseFloatAndCheckNaN(tag2[7]);\nvar yjout = parseFloatAndCheckNaN(tag2[8]);\n\n// 将获取的数据转换为浮点数并检查NaN值\nfunction parseFloatAndCheckNaN(value) {\n    var parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n}\n\n// 将获取的数据转换为浮点数\nvar tsb1 = msg.payload.tsb1;\nvar tsb2 = parseFloat(tag3[1]);\nvar tsb3 = parseFloat(tag3[2]);\nvar tsb4 = parseFloat(tag3[3]);\nvar tsb5 = parseFloat(tag3[4]);\nvar lwji = parseFloat(tag3[5]);\nvar zsll = parseFloat(tag3[6]).toFixed(2);\n\nvar tn1 = (tag4[0]);\nvar tn2 = (tag4[1]);\nvar tn3 = (tag4[2]);\nvar tn1_lj = (tag4[3]);\nvar tn2_lj = (tag4[4]);\nvar tn3_lj = (tag4[5]);\n\nvar indata = [\n    { name: '进水流量', data: in_ll, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '泵房液位', data: in_yw, dw: 'm', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0 },\n    { name: '一期进水流量', data: in_ll_1, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '二期进水流量', data: in_ll_2, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '预计进水量', data: yjin, dw: 'm³', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '进水累计', data: in_lj, dw: 'm³', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '进水COD', data: in_cod, dw: 'mg/l', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '进水总磷', data: in_tp, dw: 'mg/l', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '进水氨氮', data: in_nh3, dw: 'mg/l', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '进水总氮', data: in_tn, dw: 'mg/l', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '进水PH', data: in_ph, dw: '', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '进水浊度', data: in_ss, dw: 'NTU', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '1#碳源投加量', data: tn1, dw: 'L/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '1#碳源累计', data: tn1_lj, dw: 'L', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '2#碳源投加量', data: tn2, dw: 'L/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '2#碳源累计', data: tn2_lj, dw: 'L', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '3#碳源投加量', data: tn3, dw: 'L/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '3#碳源累计', data: tn3_lj, dw: 'L', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '1#泵流量', data: tsb1, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '2#泵流量', data: tsb2, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '3#泵流量', data: tsb3, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '4#泵流量', data: tsb4, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '5#泵流量', data: tsb5, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '泵房进水量', data: zsll, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n];\n\n// 构建出水数据\nvar outdata = [\n    { name: '出水流量', data: out_ll, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '预计出水量', data: yjout, dw: 'm³', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '出水累计', data: out_lj, dw: 'm³', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '出水COD', data: out_cod, dw: 'mg/l', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '出水氨氮', data: out_nh3, dw: 'mg/l', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '出水总氮', data: out_tn, dw: 'mg/l', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '出水总磷', data: out_tp, dw: 'mg/l', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '出水PH', data: out_ph, dw: '', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '出水浊度', data: out_ss, dw: 'NTU', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '1#沟出水流量', data: yhg1, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '2#沟出水流量', data: yhg2, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '3#沟出水流量', data: yhg3, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n    { name: '氧化沟出水量', data: yhg3 + yhg2 + yhg1, dw: 'm³/h', alarm: (online[0] === 1 || alarms1[0] === 1) ? 1 : 0  },\n];\n\n// 构建最终的消息负载\nmsg.payload = {\n    indata,\n    outdata,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "c4eac71d5021ce30",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "数据检测",
        "func": "const TIMEOUT_DURATION = 1 * 60 * 1000; // 1分钟\n\n// 定义所有可能的 tsb 字段\nconst allTsbFields = ['tsb1', 'tsb2', 'tsb3', 'tsb4', 'tsb5'];\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timeoutId', null);\n    context.set('lastMessageTimes', {}); // 确保 lastMessageTimes 初始化为空对象\n    context.set('lastStatus', {}); // 初始化记录上一次状态的变量\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 确保 context.get('lastMessageTimes') 是对象\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\nlet lastStatus = context.get('lastStatus') || {}; // 获取上次状态\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 检查数据是否有效，超出范围时输出异常\nfunction checkDataRange(tsbValue, tsb) {\n    if (tsbValue < 0 || tsbValue > 1000) {\n        return {\n            status: '异常',\n            message: `${tsb} 的值 ${tsbValue} 超出范围 (0 - 1000)`\n        };\n    }\n    return {\n        status: '正常',\n        message: ''\n    };\n}\n\n// 遍历每个有效的 tsb 字段\nallTsbFields.forEach((tsb) => {\n    const tsbValue = msg.payload[tsb];\n\n    // 如果接收到有效的 tsb 数据\n    if (tsbValue !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[tsb] = Date.now();\n\n        // 检查数据范围\n        const rangeCheck = checkDataRange(tsbValue, tsb);\n\n        // 如果当前状态与上次状态不同，则需要更新\n        if (rangeCheck.status !== lastStatus[tsb]) {\n            // 更新当前状态\n            lastStatus[tsb] = rangeCheck.status;\n\n            // 更新节点状态\n            if (rangeCheck.status === '正常') {\n                node.status({ fill: \"green\", shape: \"dot\", text: `${tsb} 正常` });\n            } else {\n                node.status({ fill: \"red\", shape: \"ring\", text: `${tsb} 异常` });\n            }\n\n            // 设置消息内容\n            let msg = {\n                payload: {\n                    d_name: \"进水泵房\",\n                    s_name: `${tsb === 'tsb1' ? '1#流量计' : tsb === 'tsb2' ? '2#流量计' : tsb === 'tsb3' ? '3#流量计' : tsb === 'tsb4' ? '4#流量计' : '5#流量计'}`,\n                    status0: `数据${rangeCheck.status}`\n                }\n            };\n\n            // 添加到待发送消息队列\n            messagesToSend.push(msg);\n            updatedStatus = true; // 状态发生变化\n        }\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('lastMessageTimes', lastMessageTimes);\ncontext.set('lastStatus', lastStatus); // 保存当前状态\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3500,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "b97abbefb6301a79",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "e926111792e0afb7",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1680,
        "wires": [
            [
                "87073ce4c7cdabeb"
            ]
        ]
    },
    {
        "id": "ca5e40b671907fe3",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "e926111792e0afb7",
        "name": "设备上线",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nvar d_name = flow.get(\"d_name\");\nvar s_name = flow.get(\"s_name\");\nvar status0 = flow.get(\"status0\");\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"-nOwSKt3OHr4NZd0gKG5uJ7YgDa1EI57Qb5Sz2BR_lY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing11\": {\n            \"value\": d_name,\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": s_name,\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": status0,\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 1680,
        "wires": [
            [
                "34937b355cab2fe1"
            ]
        ]
    },
    {
        "id": "3e4de147d709770a",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "设备检测",
        "func": "const TIMEOUT_DURATION = 10 * 60 * 1000; // 1分钟\n\n// 定义所有可能的 tn 字段\nconst alltnFields = ['tn1', 'tn2', 'tn3'];\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timeoutId', null);\n    context.set('lastMessageTimes', {}); // 确保 lastMessageTimes 初始化为空对象\n    context.set('isOnline', {}); // 确保 isOnline 初始化为空对象\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 确保 context.get('isOnline') 和 context.get('lastMessageTimes') 都是对象\nlet isOnline = context.get('isOnline') || {};\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 处理超时并更新状态\nfunction handleTimeout(tn) {\n    const lastMessageTime = lastMessageTimes[tn];\n    if (lastMessageTime && Date.now() - lastMessageTime > TIMEOUT_DURATION) {\n        if (isOnline[tn] !== false) {\n            isOnline[tn] = false; // 标记设备离线\n            node.status({ fill: \"red\", shape: \"ring\", text: `${tn} 离线` });\n            flow.set(`${tn}`, 0); // 更新 flow 中对应 tn 的值为 0\n            flow.set(`${tn}_online`, 1); \n            let msg = {\n                payload: {\n                    d_name: \"氧化沟\",\n                    s_name: `${tn === 'tn1' ? '1#碳源流量计' : tn === 'tn2' ? '2#碳源流量计' : tn === 'tn3' ? '3#碳源流量计' : tn === 'tn4' ? '4#碳源流量计' : '5#碳源流量计'}`,\n                    status0: \"离线\"\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${tn}_online`, online); \n            messagesToSend.push(msg); // 设备离线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    }\n}\n\n// 遍历每个有效的 tn 字段\nalltnFields.forEach((tn) => {\n    const tnValue = msg.payload[tn];\n\n    // 如果接收到有效的 tn 数据\n    if (tnValue !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[tn] = Date.now();\n\n        // 判断设备是否从离线状态恢复\n        if (!isOnline[tn]) {\n            isOnline[tn] = true; // 设备首次在线时设置为 true\n            let status = \"在线\";\n            node.status({ fill: \"green\", shape: \"dot\", text: `${tn} 在线` });\n            flow.set(`${tn}_online`, 0); \n            // 设置消息内容\n            let msg = {\n                payload: {\n                    d_name: \"氧化沟\",\n                    s_name: `${tn === 'tn1' ? '1#碳源流量计' : tn === 'tn2' ? '2#碳源流量计' : tn === 'tn3' ? '3#碳源流量计' : tn === 'tn4' ? '4#碳源流量计' : '5#碳源流量计'}`,\n                    status0: status\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${tn}_online`, online); \n            // 只在第一次设备状态变化时发送消息\n            messagesToSend.push(msg); // 设备在线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    } else {\n\n        // 如果没有接收到数据，则检查是否超时\n        handleTimeout(tn);\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('isOnline', isOnline);\ncontext.set('lastMessageTimes', lastMessageTimes);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1480,
        "wires": [
            [
                "e8262bcaf6e0bcfb"
            ]
        ]
    },
    {
        "id": "efb83ec4c360401e",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "获取检测设备数据",
        "func": "// 获取 msg.payload 中的 yhg1 到 yhg5 的值\nlet yhgValues = ['yhg1', 'yhg2', 'yhg3'];\n\n// 初始化一个新的对象\nlet optimizedPayload = {};\n\n// 遍历 yhg1 到 yhg5，检查并只保留有值的字段\nyhgValues.forEach((yhg) => {\n    // 如果该字段有值（不是 undefined），将其加入到 optimizedPayload 中\n    if (msg.payload[yhg] !== undefined) {\n        optimizedPayload[yhg] = msg.payload[yhg];\n    }\n});\n\n// 如果有有效的字段，更新 msg.payload，否则不做任何操作\nif (Object.keys(optimizedPayload).length > 0) {\n    msg.payload = optimizedPayload;\n    return msg;\n} else {\n    return null; // 如果没有有效字段，则不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 2220,
        "wires": [
            [
                "3e160965dab344fe"
            ]
        ]
    },
    {
        "id": "3e160965dab344fe",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "设备检测",
        "func": "const TIMEOUT_DURATION = 5 * 60 * 1000; // 1分钟\n\n// 定义所有可能的 yhg 字段\nconst allyhgFields = ['yhg1', 'yhg2', 'yhg3'];\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timeoutId', null);\n    context.set('lastMessageTimes', {}); // 确保 lastMessageTimes 初始化为空对象\n    context.set('isOnline', {}); // 确保 isOnline 初始化为空对象\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 确保 context.get('isOnline') 和 context.get('lastMessageTimes') 都是对象\nlet isOnline = context.get('isOnline') || {};\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 处理超时并更新状态\nfunction handleTimeout(yhg) {\n    const lastMessageTime = lastMessageTimes[yhg];\n    if (lastMessageTime && Date.now() - lastMessageTime > TIMEOUT_DURATION) {\n        if (isOnline[yhg] !== false) {\n            isOnline[yhg] = false; // 标记设备离线\n            node.status({ fill: \"red\", shape: \"ring\", text: `${yhg} 离线` });\n            flow.set(`${yhg}`, 0); // 更新 flow 中对应 yhg 的值为 0\n            flow.set(`${yhg}_online`, 1); \n            let msg = {\n                payload: {\n                    d_name: \"氧化沟\",\n                    s_name: `${yhg === 'yhg1' ? '1#出水流量计' : yhg === 'yhg2' ? '2#出水流量计' : yhg === 'yhg3' ? '3#出水流量计' : yhg === 'yhg4' ? '4#碳源流量计' : '5#碳源流量计'}`,\n                    status0: \"离线\"\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${yhg}_online`, online); \n            messagesToSend.push(msg); // 设备离线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    }\n}\n\n// 遍历每个有效的 yhg 字段\nallyhgFields.forEach((yhg) => {\n    const yhgValue = msg.payload[yhg];\n\n    // 如果接收到有效的 yhg 数据\n    if (yhgValue !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[yhg] = Date.now();\n\n        // 判断设备是否从离线状态恢复\n        if (!isOnline[yhg]) {\n            isOnline[yhg] = true; // 设备首次在线时设置为 true\n            let status = \"在线\";\n            node.status({ fill: \"green\", shape: \"dot\", text: `${yhg} 在线` });\n            flow.set(`${yhg}_online`, 0); \n            // 设置消息内容\n            let msg = {\n                payload: {\n                    d_name: \"氧化沟\",\n                    s_name: `${yhg === 'yhg1' ? '1#出水流量计' : yhg === 'yhg2' ? '2#出水流量计' : yhg === 'yhg3' ? '3#出水流量计' : yhg === 'yhg4' ? '4#碳源流量计' : '5#碳源流量计'}`,\n                    status0: status\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${yhg}_online`, online); \n            // 只在第一次设备状态变化时发送消息\n            messagesToSend.push(msg); // 设备在线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    } else {\n        // 如果没有接收到数据，则检查是否超时\n        handleTimeout(yhg);\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('isOnline', isOnline);\ncontext.set('lastMessageTimes', lastMessageTimes);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 2220,
        "wires": [
            [
                "d88635f9f41d9130",
                "e3f0e3b6a513fc29"
            ]
        ]
    },
    {
        "id": "654a2896c9c1d351",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "获取检测设备数据",
        "func": "// 获取 msg.payload 中的 out1 到 out5 的值\nlet outValues = [\"out_ll\", \"out_cod\", \"out_nh3\", \"out_tn\", \"out_tp\", \"out_ph\",'out_ss'];\n\n// 初始化一个新的对象\nlet optimizedPayload = {};\n\n// 遍历 out1 到 out5，检查并只保留有值的字段\noutValues.forEach((out) => {\n    // 如果该字段有值（不是 undefined），将其加入到 optimizedPayload 中\n    if (msg.payload[out] !== undefined) {\n        optimizedPayload[out] = msg.payload[out];\n    }\n});\n\n// 如果有有效的字段，更新 msg.payload，否则不做任何操作\nif (Object.keys(optimizedPayload).length > 0) {\n    msg.payload = optimizedPayload;\n    return msg;\n} else {\n    return null; // 如果没有有效字段，则不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 200,
        "wires": [
            [
                "d9513f72f0470339",
                "a94ac040e42d0511"
            ]
        ]
    },
    {
        "id": "d9513f72f0470339",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "设备检测",
        "func": "const TIMEOUT_DURATION = 10 * 60 * 1000; // 1分钟\n\n// 定义所有可能的 out 字段\nconst alloutFields = [\"out_ll\", \"out_cod\", \"out_nh3\", \"out_tn\", \"out_tp\", \"out_ph\",'out_ss'];\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timeoutId', null);\n    context.set('lastMessageTimes', {}); // 确保 lastMessageTimes 初始化为空对象\n    context.set('isOnline', {}); // 确保 isOnline 初始化为空对象\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 确保 context.get('isOnline') 和 context.get('lastMessageTimes') 都是对象\nlet isOnline = context.get('isOnline') || {};\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 处理超时并更新状态\nfunction handleTimeout(out) {\n    const lastMessageTime = lastMessageTimes[out];\n    if (lastMessageTime && Date.now() - lastMessageTime > TIMEOUT_DURATION) {\n        if (isOnline[out] !== false) {\n            isOnline[out] = false; // 标记设备离线\n            node.status({ fill: \"red\", shape: \"ring\", text: `${out} 离线` });\n            flow.set(`${out}`, 0); // 更新 flow 中对应 out 的值为 0\n            flow.set(`${out}_online`, 1); \n            let msg = {\n                payload: {\n                    d_name: \"出水仪表\",\n                    s_name: `${out === 'out_ll' ? '总出水流量计' : out === 'out_cod' ? '出水cod' : out === 'out_nh3' ? '出水氨氮' : out === 'out_tn' ? '出水总氮' : out === 'out_tp' ? '出水总磷' : out === 'out_ph' ? '出水ph' : '出水ss'}`,\n                    status0: \"离线\"\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${out}_online`, online); \n            messagesToSend.push(msg); // 设备离线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    }\n}\n\n// 遍历每个有效的 out 字段\nalloutFields.forEach((out) => {\n    const outValue = msg.payload[out];\n\n    // 如果接收到有效的 out 数据\n    if (outValue !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[out] = Date.now();\n\n        // 判断设备是否从离线状态恢复\n        if (!isOnline[out]) {\n            isOnline[out] = true; // 设备首次在线时设置为 true\n            let status = \"在线\";\n            node.status({ fill: \"green\", shape: \"dot\", text: `${out} 在线` });\n            flow.set(`${out}_online`, 0); \n            // 设置消息内容\n            let msg = {\n                payload: {\n                    d_name: \"出水仪表\",\n                    s_name: `${out === 'out_ll' ? '总出水流量计' : out === 'out_cod' ? '出水cod' : out === 'out_nh3' ? '出水氨氮' : out === 'out_tn' ? '出水总氮' : out === 'out_tp' ? '出水总磷' : out === 'out_ph' ? '出水ph' : '出水ss'}`,\n                    status0: status\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${out}_online`, online); \n            // 只在第一次设备状态变化时发送消息\n            messagesToSend.push(msg); // 设备在线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    } else {\n        // 如果没有接收到数据，则检查是否超时\n        handleTimeout(out);\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('isOnline', isOnline);\ncontext.set('lastMessageTimes', lastMessageTimes);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 240,
        "wires": [
            [
                "ce3d7cdcc8012901"
            ]
        ]
    },
    {
        "id": "679522b38227656a",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "获取检测设备数据",
        "func": "// 获取 msg.payload 中的 tn1 到 tn5 的值\nlet tnValues = ['tn1', 'tn2', 'tn3'];\n\n// 初始化一个新的对象\nlet optimizedPayload = {};\n\n// 遍历 tn1 到 tn5，检查并只保留有值的字段\ntnValues.forEach((tn) => {\n    // 如果该字段有值（不是 undefined），将其加入到 optimizedPayload 中\n    if (msg.payload[tn] !== undefined) {\n        optimizedPayload[tn] = msg.payload[tn];\n    }\n});\n\n// 如果有有效的字段，更新 msg.payload，否则不做任何操作\nif (Object.keys(optimizedPayload).length > 0) {\n    msg.payload = optimizedPayload;\n    return msg;\n} else {\n    return null; // 如果没有有效字段，则不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1480,
        "wires": [
            [
                "3e4de147d709770a"
            ]
        ]
    },
    {
        "id": "1e079a26f3095336",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "获取检测设备数据",
        "func": "// 获取 msg.payload 中的 in_1 到 in_5 的值\nlet in_Values = [\"in_tn\", \"in_tp\", \"in_ph\", \"in_ss\"];\n\n// 初始化一个新的对象\nlet optimizedPayload = {};\n\n// 遍历 in_1 到 in_5，检查并只保留有值的字段\nin_Values.forEach((in_) => {\n    // 如果该字段有值（不是 undefined），将其加入到 optimizedPayload 中\n    if (msg.payload[in_] !== undefined) {\n        optimizedPayload[in_] = msg.payload[in_];\n    }\n});\n\n// 如果有有效的字段，更新 msg.payload，否则不做任何操作\nif (Object.keys(optimizedPayload).length > 0) {\n    msg.payload = optimizedPayload;\n    return msg;\n} else {\n    return null; // 如果没有有效字段，则不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 140,
        "wires": [
            [
                "6920c9cce927f292",
                "26466d791d5295fd"
            ]
        ]
    },
    {
        "id": "6920c9cce927f292",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "设备检测",
        "func": "const TIMEin__DURATION = 10 * 60 * 1000; // 1分钟\n\n// 定义所有可能的 in_ 字段\nconst allin_Fields = [\"in_tn\", \"in_tp\", \"in_ph\", \"in_ss\"];\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timein_Id', null);\n    context.set('lastMessageTimes', {}); // 确保 lastMessageTimes 初始化为空对象\n    context.set('isOnline', {}); // 确保 isOnline 初始化为空对象\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 确保 context.get('isOnline') 和 context.get('lastMessageTimes') 都是对象\nlet isOnline = context.get('isOnline') || {};\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 处理超时并更新状态\nfunction handleTimein_(in_) {\n    const lastMessageTime = lastMessageTimes[in_];\n    if (lastMessageTime && Date.now() - lastMessageTime > TIMEin__DURATION) {\n        if (isOnline[in_] !== false) {\n            isOnline[in_] = false; // 标记设备离线\n            node.status({ fill: \"red\", shape: \"ring\", text: `${in_} 离线` });\n            flow.set(`${in_}`, 0); // 更新 flow 中对应 in_ 的值为 0\n            flow.set(`${in_}_online`, 1); \n            let msg = {\n                payload: {\n                    d_name: \"进水仪表\",\n                    s_name: `${in_ === 'in_tn' ? '进水总氮' : in_ === 'in_tp' ? '进水总磷' : in_ === 'in_ph' ? '进水ph' :  '进水ss' }`,\n                    status0: \"离线\"\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${in_}_online`, online); \n            messagesToSend.push(msg); // 设备离线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    }\n}\n\n// 遍历每个有效的 in_ 字段\nallin_Fields.forEach((in_) => {\n    const in_Value = msg.payload[in_];\n\n    // 如果接收到有效的 in_ 数据\n    if (in_Value !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[in_] = Date.now();\n\n        // 判断设备是否从离线状态恢复\n        if (!isOnline[in_]) {\n            isOnline[in_] = true; // 设备首次在线时设置为 true\n            let status = \"在线\";\n            node.status({ fill: \"green\", shape: \"dot\", text: `${in_} 在线` });\n            flow.set(`${in_}_online`, 0); \n            // 设置消息内容\n            let msg = {\n                payload: {\n                    d_name: \"进水仪表\",\n                    s_name: `${in_ === 'in_tn' ? '进水总氮' : in_ === 'in_tp' ? '进水总磷' : in_ === 'in_ph' ? '进水ph' : '进水ss' }`,\n                    status0: status\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${in_}_online`, online); \n            // 只在第一次设备状态变化时发送消息\n            messagesToSend.push(msg); // 设备在线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    } else {\n        // 如果没有接收到数据，则检查是否超时\n        handleTimein_(in_);\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('isOnline', isOnline);\ncontext.set('lastMessageTimes', lastMessageTimes);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 180,
        "wires": [
            [
                "ce3d7cdcc8012901"
            ]
        ]
    },
    {
        "id": "6a6500eedc2344cc",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "获取检测设备数据",
        "func": "// 获取 msg.payload 中的 in_1 到 in_5 的值\nlet in_Values = ['in_ll', 'in_ll1', 'in_ll2', 'in_cod', 'in_nh3','in_yw'];\n\n// 初始化一个新的对象\nlet optimizedPayload = {};\n\n// 遍历 in_1 到 in_5，检查并只保留有值的字段\nin_Values.forEach((in_) => {\n    // 如果该字段有值（不是 undefined），将其加入到 optimizedPayload 中\n    if (msg.payload[in_] !== undefined) {\n        optimizedPayload[in_] = msg.payload[in_];\n    }\n});\n\n// 如果有有效的字段，更新 msg.payload，否则不做任何操作\nif (Object.keys(optimizedPayload).length > 0) {\n    msg.payload = optimizedPayload;\n    return msg;\n} else {\n    return null; // 如果没有有效字段，则不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 80,
        "wires": [
            [
                "b1454abe06c88df7",
                "e6d29878675f95df"
            ]
        ]
    },
    {
        "id": "b1454abe06c88df7",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "设备检测",
        "func": "const TIMEin__DURATION = 10 * 60 * 1000; // 1分钟\n\n// 定义所有可能的 in_ 字段\nconst allin_Fields = ['in_ll', 'in_ll1', 'in_ll2', 'in_cod', 'in_nh3','in_yw'];\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timein_Id', null);\n    context.set('lastMessageTimes', {}); // 确保 lastMessageTimes 初始化为空对象\n    context.set('isOnline', {}); // 确保 isOnline 初始化为空对象\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 确保 context.get('isOnline') 和 context.get('lastMessageTimes') 都是对象\nlet isOnline = context.get('isOnline') || {};\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 处理超时并更新状态\nfunction handleTimein_(in_) {\n    const lastMessageTime = lastMessageTimes[in_];\n    if (lastMessageTime && Date.now() - lastMessageTime > TIMEin__DURATION) {\n        if (isOnline[in_] !== false) {\n            isOnline[in_] = false; // 标记设备离线\n            node.status({ fill: \"red\", shape: \"ring\", text: `${in_} 离线` });\n            flow.set(`${in_}`, 0); // 更新 flow 中对应 in_ 的值为 0\n            flow.set(`${in_}_online`, 1); \n            let msg = {\n                payload: {\n                    d_name: \"进水仪表\",\n                    s_name: `${in_ === 'in_ll' ? '进水总流量' : in_ === 'in_ll1' ? '一期进水流量' : in_ === 'in_ll2' ? '二期进水流量' : in_ === 'in_cod' ? '进水cod' : in_ === 'in_nh3' ? '进水氨氮' : '泵房液位' }`,\n                    status0: \"离线\"\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${in_}_online`, online); \n            messagesToSend.push(msg); // 设备离线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    }\n}\n\n// 遍历每个有效的 in_ 字段\nallin_Fields.forEach((in_) => {\n    const in_Value = msg.payload[in_];\n\n    // 如果接收到有效的 in_ 数据\n    if (in_Value !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[in_] = Date.now();\n\n        // 判断设备是否从离线状态恢复\n        if (!isOnline[in_]) {\n            isOnline[in_] = true; // 设备首次在线时设置为 true\n            let status = \"在线\";\n            node.status({ fill: \"green\", shape: \"dot\", text: `${in_} 在线` });\n            flow.set(`${in_}_online`, 0); \n            // 设置消息内容\n            let msg = {\n                payload: {\n                    d_name: \"进水仪表\",\n                    s_name: `${in_ === 'in_ll' ? '进水总流量' : in_ === 'in_ll1' ? '一期进水流量' : in_ === 'in_ll2' ? '二期进水流量' : in_ === 'in_cod' ? '进水cod' : in_ === 'in_nh3' ? '进水氨氮' : '泵房液位'}`,\n                    status0: status\n                }\n            };\n            let online = `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${in_}_online`, online); \n            // 只在第一次设备状态变化时发送消息\n            messagesToSend.push(msg); // 设备在线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    } else {\n        // 如果没有接收到数据，则检查是否超时\n        handleTimein_(in_);\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('isOnline', isOnline);\ncontext.set('lastMessageTimes', lastMessageTimes);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ce3d7cdcc8012901",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "队列机制",
        "func": "// 获取队列（初始化为空数组）\nlet queue = flow.get('messageQueue') || [];\n\n// 将当前消息添加到队列中\nqueue.push(msg);\n\n// 保存更新后的队列\nflow.set('messageQueue', queue);\n\n// 判断是否有消息正在发送\nlet isProcessing = flow.get('isProcessing') || false;\n\nif (!isProcessing) {\n    // 如果没有消息正在处理，启动队列处理\n    flow.set('isProcessing', true);\n    sendNextMessage();\n}\n\n// 定义发送下一个消息的函数\nfunction sendNextMessage() {\n    if (queue.length > 0) {\n        // 获取队列中的第一个消息\n        let currentMessage = queue.shift();\n\n        // 发送当前消息\n        node.send(currentMessage);\n\n        // 等待一段时间再发送下一个消息，避免消息处理过于频繁\n        setTimeout(() => {\n            sendNextMessage();\n        }, 1000); // 1秒后发送下一个消息，可以根据需要调整时间\n    } else {\n        // 如果队列为空，标记为没有在处理消息\n        flow.set('isProcessing', false);\n    }\n}\n\nreturn null; // 不返回默认消息，避免消息重复发送\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 140,
        "wires": [
            [
                "10b113e3b56ce477"
            ]
        ]
    },
    {
        "id": "10b113e3b56ce477",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "e926111792e0afb7",
        "name": "结果写入状态变量",
        "func": "var a = msg.payload\nflow.set(\"d_name\",a.d_name);\nflow.set(\"s_name\",a.s_name);\nflow.set(\"status0\",a.status0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 1740,
        "wires": [
            [
                "23bd7deebdec71bd",
                "5789484545f9c375"
            ]
        ]
    },
    {
        "id": "a3a28229c1dd6484",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "队列机制",
        "func": "// 获取队列（初始化为空数组）\nlet queue = flow.get('messageQueue') || [];\n\n// 将当前消息添加到队列中\nqueue.push(msg);\n\n// 保存更新后的队列\nflow.set('messageQueue', queue);\n\n// 判断是否有消息正在发送\nlet isProcessing = flow.get('isProcessing') || false;\n\nif (!isProcessing) {\n    // 如果没有消息正在处理，启动队列处理\n    flow.set('isProcessing', true);\n    sendNextMessage();\n}\n\n// 定义发送下一个消息的函数\nfunction sendNextMessage() {\n    if (queue.length > 0) {\n        // 获取队列中的第一个消息\n        let currentMessage = queue.shift();\n\n        // 发送当前消息\n        node.send(currentMessage);\n\n        // 等待一段时间再发送下一个消息，避免消息处理过于频繁\n        setTimeout(() => {\n            sendNextMessage();\n        }, 1000); // 1秒后发送下一个消息，可以根据需要调整时间\n    } else {\n        // 如果队列为空，标记为没有在处理消息\n        flow.set('isProcessing', false);\n    }\n}\n\nreturn null; // 不返回默认消息，避免消息重复发送\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "e8262bcaf6e0bcfb",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "队列机制",
        "func": "// 获取队列（初始化为空数组）\nlet queue = flow.get('messageQueue') || [];\n\n// 将当前消息添加到队列中\nqueue.push(msg);\n\n// 保存更新后的队列\nflow.set('messageQueue', queue);\n\n// 判断是否有消息正在发送\nlet isProcessing = flow.get('isProcessing') || false;\n\nif (!isProcessing) {\n    // 如果没有消息正在处理，启动队列处理\n    flow.set('isProcessing', true);\n    sendNextMessage();\n}\n\n// 定义发送下一个消息的函数\nfunction sendNextMessage() {\n    if (queue.length > 0) {\n        // 获取队列中的第一个消息\n        let currentMessage = queue.shift();\n\n        // 发送当前消息\n        node.send(currentMessage);\n\n        // 等待一段时间再发送下一个消息，避免消息处理过于频繁\n        setTimeout(() => {\n            sendNextMessage();\n        }, 1000); // 1秒后发送下一个消息，可以根据需要调整时间\n    } else {\n        // 如果队列为空，标记为没有在处理消息\n        flow.set('isProcessing', false);\n    }\n}\n\nreturn null; // 不返回默认消息，避免消息重复发送\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 1480,
        "wires": [
            [
                "10b113e3b56ce477"
            ]
        ]
    },
    {
        "id": "e3f0e3b6a513fc29",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "队列机制",
        "func": "// 获取队列（初始化为空数组）\nlet queue = flow.get('messageQueue') || [];\n\n// 将当前消息添加到队列中\nqueue.push(msg);\n\n// 保存更新后的队列\nflow.set('messageQueue', queue);\n\n// 判断是否有消息正在发送\nlet isProcessing = flow.get('isProcessing') || false;\n\nif (!isProcessing) {\n    // 如果没有消息正在处理，启动队列处理\n    flow.set('isProcessing', true);\n    sendNextMessage();\n}\n\n// 定义发送下一个消息的函数\nfunction sendNextMessage() {\n    if (queue.length > 0) {\n        // 获取队列中的第一个消息\n        let currentMessage = queue.shift();\n\n        // 发送当前消息\n        node.send(currentMessage);\n\n        // 等待一段时间再发送下一个消息，避免消息处理过于频繁\n        setTimeout(() => {\n            sendNextMessage();\n        }, 1000); // 1秒后发送下一个消息，可以根据需要调整时间\n    } else {\n        // 如果队列为空，标记为没有在处理消息\n        flow.set('isProcessing', false);\n    }\n}\n\nreturn null; // 不返回默认消息，避免消息重复发送\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 2220,
        "wires": [
            [
                "10b113e3b56ce477"
            ]
        ]
    },
    {
        "id": "dc50428713458799",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "上下限检测",
        "func": "const ALARM_COOL_DOWN_TIME = 5 * 60 * 1000; // 报警冷却时间（5分钟）\n\n// 定义所有可能的 in_ 字段\nconst allin_Fields = ['in_ll', 'in_ll1', 'in_ll2', 'in_cod', 'in_nh3', 'in_yw'];\n\n// 定义报警条件\nconst alarmConditions = {\n    'in_ll': { min: 1000, max: 2000 },\n    'in_ll1': { min: 500, max: 1000 },\n    'in_ll2': { min: 500, max: 1000 },\n    'in_cod': { min: 100, max: 400 },\n    'in_nh3': { min: 15, max: 40 },\n    'in_yw': { min: 1.5, max: 6.5 },\n};\n\n// 获取上下文中的状态变量\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\nlet lastAlarmTimes = context.get('lastAlarmTimes') || {}; // 获取最后报警时间\nlet lastErroredStates = context.get('lastErroredStates') || {}; // 获取上次的报警状态\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 遍历每个有效的 in_ 字段\nallin_Fields.forEach((in_) => {\n    const in_Value = msg.payload[in_];\n\n    // 如果接收到有效的 in_ 数据\n    if (in_Value !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[in_] = Date.now();\n\n        // 获取当前时间\n        const currentTime = Date.now();\n        const lastAlarmTime = lastAlarmTimes[in_] || 0;\n        const lastErroredState = lastErroredStates[in_] || false; // 获取上次的报警状态\n\n        // 检查是否超出报警范围\n        if (alarmConditions[in_]) {\n            const condition = alarmConditions[in_];\n\n            // 如果数据超出阈值，并且冷却时间已经过去\n            if ((in_Value < condition.min || in_Value > condition.max) && (currentTime - lastAlarmTime > ALARM_COOL_DOWN_TIME)) {\n                // 触发报警\n                let alarmStatus = in_Value < condition.min ? \"低于阈值\" : \"超过阈值\";\n                let alarmMsg = {\n                    payload: {\n                        alarm_name: `${in_ === 'in_ll' ? '进水总流量' : in_ === 'in_ll1' ? '一期进水流量' : in_ === 'in_ll2' ? '二期进水流量' : in_ === 'in_cod' ? '进水cod' : in_ === 'in_nh3' ? '进水氨氮' : '泵房液位'}`,\n                        min_max: `${alarmStatus} (${condition.min} - ${condition.max})`, \n                        value: in_Value,\n                        why: alarmStatus\n                    }\n                };\n\n                messagesToSend.push(alarmMsg); // 添加报警信息到待发送队列\n                flow.set(`${in_}_erro`, 1); // 设置为报警状态\n                updatedStatus = true; // 状态发生变化\n\n                // 更新最后报警时间\n                lastAlarmTimes[in_] = currentTime;\n\n                // 更新报警状态\n                lastErroredStates[in_] = true;\n            }\n            // 如果数据恢复到正常范围内，并且上次处于报警状态\n            else if (in_Value >= condition.min && in_Value <= condition.max && lastErroredState) {\n                \n                flow.set(`${in_}_erro`, 0); // 恢复正常状态\n                updatedStatus = true; // 状态发生变化\n\n                // 更新报警状态为正常\n                lastErroredStates[in_] = false;\n            }\n        }\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('lastMessageTimes', lastMessageTimes);\ncontext.set('lastAlarmTimes', lastAlarmTimes); // 保存最后报警时间\ncontext.set('lastErroredStates', lastErroredStates); // 保存上次报警状态\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 760,
        "wires": [
            [
                "b50584313355243c"
            ]
        ]
    },
    {
        "id": "124614a4e8f5ed5f",
        "type": "inject",
        "z": "859f41f963de2747",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 910,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "6222c1785a19e2ad",
        "type": "inject",
        "z": "859f41f963de2747",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 910,
        "y": 780,
        "wires": [
            [
                "91b61e9a58be3d31"
            ]
        ]
    },
    {
        "id": "b50584313355243c",
        "type": "debug",
        "z": "859f41f963de2747",
        "name": "debug 402",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 760,
        "wires": []
    },
    {
        "id": "91b61e9a58be3d31",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "function 187",
        "func": "msg.payload = {\n    in_ll:1500,\n    in_cod: 200,\n    in_nh3: 15\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 780,
        "wires": [
            [
                "dc50428713458799"
            ]
        ]
    },
    {
        "id": "bc1467b5ffab3928",
        "type": "inject",
        "z": "859f41f963de2747",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 910,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "46cfecad786d7d81",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "function 185",
        "func": "msg.payload = {\n    in_ll:2500,\n    in_cod: 200,\n    in_nh3: 15\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 720,
        "wires": [
            [
                "dc50428713458799"
            ]
        ]
    },
    {
        "id": "59e9e17a5a96919b",
        "type": "debug",
        "z": "859f41f963de2747",
        "g": "25a241c4883c1792",
        "name": "debug 404",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 1420,
        "wires": []
    },
    {
        "id": "d88635f9f41d9130",
        "type": "debug",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "debug 408",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 2360,
        "wires": []
    },
    {
        "id": "e6d29878675f95df",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "上下限检测",
        "func": "const ALARM_COOL_DOWN_TIME = 5 * 60 * 1000; // 报警冷却时间（5分钟）\n\n// 定义所有可能的 in_ 字段\nconst allin_Fields = ['in_ll', 'in_ll1', 'in_ll2', 'in_cod', 'in_nh3', 'in_yw'];\n\n// 定义报警条件\nconst alarmConditions = {\n    'in_ll': { min: 1000, max: 2000 },\n    'in_ll1': { min: 500, max: 1000 },\n    'in_ll2': { min: 500, max: 1000 },\n    'in_cod': { min: 100, max: 400 },\n    'in_nh3': { min: 15, max: 40 },\n    'in_yw': { min: 1.5, max: 6.5 },\n};\n\n// 获取上下文中的状态变量\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\nlet lastAlarmTimes = context.get('lastAlarmTimes') || {};\nlet lastErroredStates = context.get('lastErroredStates') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false;\n\n// 优化报警条件判断\nfunction checkAlarmCondition(in_, in_Value) {\n    const condition = alarmConditions[in_];\n    const currentTime = Date.now();\n    const lastAlarmTime = lastAlarmTimes[in_] || 0;\n    const lastErroredState = lastErroredStates[in_] || false;\n\n    if (!condition) return false; // 如果没有报警条件，直接返回\n\n    if (in_Value < condition.min || in_Value > condition.max) {\n        // 如果超出报警范围，并且冷却时间已过\n        if (currentTime - lastAlarmTime > ALARM_COOL_DOWN_TIME) {\n            return 'trigger';  // 触发报警\n        }\n    } else if (lastErroredState) {\n        // 数据恢复到正常范围内，并且上次处于报警状态\n        return 'recover';  // 恢复报警\n    }\n    return false; // 没有状态变化\n}\n\n// 优化报警消息生成\nfunction generateAlarmMessage(in_, in_Value, status) {\n    const condition = alarmConditions[in_];\n    const alarmStatus = status === 'trigger' ? (in_Value < condition.min ? \"低于阈值\" : \"超过阈值\") : \"已恢复正常\";\n    return {\n        payload: {\n            s_name: getin_Name(in_),\n            s_msg: `${alarmStatus} (${condition.min} - ${condition.max})`,\n            value: in_Value,\n            why: alarmStatus\n        }\n    };\n}\n\n// 遍历每个有效的 in_ 字段\nallin_Fields.forEach((in_) => {\n    const in_Value = msg.payload[in_];\n\n    if (in_Value !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[in_] = Date.now();\n\n        // 检查报警条件\n        const alarmAction = checkAlarmCondition(in_, in_Value);\n\n        if (alarmAction) {\n            let alarmMsg;\n            if (alarmAction === 'trigger') {\n                // 触发报警\n                alarmMsg = generateAlarmMessage(in_, in_Value, 'trigger');\n                global.set(`${in_}_erro`, `${alarmMsg.payload.s_name} ${alarmMsg.payload.why}`);\n                flow.set(`${in_}_erro`, 1);\n                lastAlarmTimes[in_] = Date.now();\n                lastErroredStates[in_] = true;\n            } else if (alarmAction === 'recover') {\n                // 恢复报警状态\n                alarmMsg = generateAlarmMessage(in_, in_Value, 'recover');\n                flow.set(`${in_}_erro`, 0);\n                global.set(`${in_}_erro`, \"\");\n                lastAlarmTimes[in_] = 0;  // 可选，视需求清空最后报警时间\n                lastErroredStates[in_] = false;\n            }\n\n            if (alarmMsg) {\n                messagesToSend.push(alarmMsg); // 添加消息到待发送队列\n                updatedStatus = true;  // 标记状态变化\n            }else if (in_Value >= alarmConditions[in_].min && in_Value <= alarmConditions[in_].max) {\n                // 数据正常，但没有报警，手动恢复报警状态\n                // 恢复报警状态\n                flow.set(`${in_}_erro`, 0);\n                global.set(`${in_}_erro`, \"\");\n                lastAlarmTimes[in_] = 0;  // 清空最后报警时间\n                lastErroredStates[in_] = false;\n            }\n        }\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('lastMessageTimes', lastMessageTimes);\ncontext.set('lastAlarmTimes', lastAlarmTimes);\ncontext.set('lastErroredStates', lastErroredStates);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n\n// 辅助函数：获取设备名称\nfunction getin_Name(in_) {\n    const in_Names = {\n        in_ll: '进水总流量',\n        in_ll1: '一期进水流量',\n        in_ll2: '二期进水流量',\n        in_cod: '进水cod',\n        in_nh3: '进水氨氮',\n        in_yw: '泵房液位'\n    };\n\n    return in_Names[in_] || '未知设备';\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 40,
        "wires": [
            [
                "e1a216b495b323f5"
            ]
        ]
    },
    {
        "id": "26466d791d5295fd",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "上下限检测",
        "func": "const ALARM_COOL_DOWN_TIME = 5 * 60 * 1000; // 报警冷却时间（5分钟）\n\n// 定义所有可能的 in_ 字段\nconst allin_Fields = [\"in_tn\", \"in_tp\", \"in_ph\", \"in_ss\"];\n\n// 定义报警条件\nconst alarmConditions = {\n    'in_tn': { min: 10, max: 45 },\n    'in_tp': { min: 0.5, max: 5 },\n    'in_ph': { min: 7, max: 9 },\n    'in_ss': { min: 10, max: 400 },\n};\n// 获取上下文中的状态变量\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\nlet lastAlarmTimes = context.get('lastAlarmTimes') || {};\nlet lastErroredStates = context.get('lastErroredStates') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false;\n\n// 优化报警条件判断\nfunction checkAlarmCondition(in_, in_Value) {\n    const condition = alarmConditions[in_];\n    const currentTime = Date.now();\n    const lastAlarmTime = lastAlarmTimes[in_] || 0;\n    const lastErroredState = lastErroredStates[in_] || false;\n\n    if (!condition) return false; // 如果没有报警条件，直接返回\n\n    if (in_Value < condition.min || in_Value > condition.max) {\n        // 如果超出报警范围，并且冷却时间已过\n        if (currentTime - lastAlarmTime > ALARM_COOL_DOWN_TIME) {\n            return 'trigger';  // 触发报警\n        }\n    } else if (lastErroredState) {\n        // 数据恢复到正常范围内，并且上次处于报警状态\n        return 'recover';  // 恢复报警\n    }\n    return false; // 没有状态变化\n}\n\n// 优化报警消息生成\nfunction generateAlarmMessage(in_, in_Value, status) {\n    const condition = alarmConditions[in_];\n    const alarmStatus = status === 'trigger' ? (in_Value < condition.min ? \"低于阈值\" : \"超过阈值\") : \"已恢复正常\";\n    return {\n        payload: {\n            s_name: getin_Name(in_),\n            s_msg: `${alarmStatus} (${condition.min} - ${condition.max})`,\n            value: in_Value,\n            why: alarmStatus\n        }\n    };\n}\n\n// 遍历每个有效的 in_ 字段\nallin_Fields.forEach((in_) => {\n    const in_Value = msg.payload[in_];\n\n    if (in_Value !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[in_] = Date.now();\n\n        // 检查报警条件\n        const alarmAction = checkAlarmCondition(in_, in_Value);\n\n        if (alarmAction) {\n            let alarmMsg;\n            if (alarmAction === 'trigger') {\n                // 触发报警\n                alarmMsg = generateAlarmMessage(in_, in_Value, 'trigger');\n                global.set(`${in_}_erro`, `${alarmMsg.payload.s_name} ${alarmMsg.payload.why}`);\n                flow.set(`${in_}_erro`, 1);\n                lastAlarmTimes[in_] = Date.now();\n                lastErroredStates[in_] = true;\n            } else if (alarmAction === 'recover') {\n                // 恢复报警状态\n                alarmMsg = generateAlarmMessage(in_, in_Value, 'recover');\n                flow.set(`${in_}_erro`, 0);\n                global.set(`${in_}_erro`, \"\");\n                lastAlarmTimes[in_] = 0;  // 可选，视需求清空最后报警时间\n                lastErroredStates[in_] = false;\n            }\n\n            if (alarmMsg) {\n                messagesToSend.push(alarmMsg); // 添加消息到待发送队列\n                updatedStatus = true;  // 标记状态变化\n            } else if (in_Value >= alarmConditions[in_].min && in_Value <= alarmConditions[in_].max) {\n                // 数据正常，但没有报警，手动恢复报警状态\n                // 恢复报警状态\n                flow.set(`${in_}_erro`, 0);\n                global.set(`${in_}_erro`, \"\");\n                lastAlarmTimes[in_] = 0;  // 清空最后报警时间\n                lastErroredStates[in_] = false;\n            }\n\n        }\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('lastMessageTimes', lastMessageTimes);\ncontext.set('lastAlarmTimes', lastAlarmTimes);\ncontext.set('lastErroredStates', lastErroredStates);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n\n// 辅助函数：获取设备名称\nfunction getin_Name(in_) {\n    const in_Names = {\n\n        in_tn: '进水总氮' ,\n        in_tp: '进水总磷',\n        in_ph: '进水ph',\n        in_ss:'进水ss'\n    };\n\n    return in_Names[in_] || '未知设备';\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 140,
        "wires": [
            [
                "e1a216b495b323f5"
            ]
        ]
    },
    {
        "id": "a94ac040e42d0511",
        "type": "function",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "上下限检测",
        "func": "const ALARM_COOL_DOWN_TIME = 5 * 60 * 1000; // 报警冷却时间（5分钟）\n\n// 定义所有可能的 out_ 字段\nconst alloutFields = [\"out_ll\", \"out_cod\", \"out_nh3\", \"out_tn\", \"out_tp\", \"out_ph\", \"out_ss\"];\n\n// 定义报警条件（这里以 `out_tn` 为例，其他条件你可以根据需要自行修改）\nconst alarmConditions = {\n    'out_tn': { min: 3, max: 13 }, // 出水总氮\n    'out_cod': { min: 5, max: 30 },\n    'out_nh3': { min: 0.1, max: 3 },\n    'out_ll': { min: 1000, max:2000 },\n    'out_tp': { min: 0.01, max: 0.4 }, // 出水总磷\n    'out_ph': { min: 7, max: 9 }, // 出水ph值\n    'out_ss': { min: 0.01, max: 8 }, // 出水悬浮物\n};\n\n// 获取上下文中的状态变量\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\nlet lastAlarmTimes = context.get('lastAlarmTimes') || {};\nlet lastErroredStates = context.get('lastErroredStates') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false;\n\n// 优化报警条件判断\nfunction checkAlarmCondition(out_, out_Value) {\n    const condition = alarmConditions[out_];\n    const currentTime = Date.now();\n    const lastAlarmTime = lastAlarmTimes[out_] || 0;\n    const lastErroredState = lastErroredStates[out_] || false;\n\n    if (!condition) return false; // 如果没有报警条件，直接返回\n\n    if (out_Value < condition.min || out_Value > condition.max) {\n        // 如果超出报警范围，并且冷却时间已过\n        if (currentTime - lastAlarmTime > ALARM_COOL_DOWN_TIME) {\n            return 'trigger';  // 触发报警\n        }\n    } else if (lastErroredState) {\n        // 数据恢复到正常范围内，并且上次处于报警状态\n        return 'recover';  // 恢复报警\n    }\n    return false; // 没有状态变化\n}\n\n// 优化报警消息生成\nfunction generateAlarmMessage(out_, out_Value, status) {\n    const condition = alarmConditions[out_];\n    const alarmStatus = status === 'trigger' ? (out_Value < condition.min ? \"低于阈值\" : \"超过阈值\") : \"已恢复正常\";\n    return {\n        payload: {\n            s_name: getout_Name(out_),\n            s_msg: `${alarmStatus} (${condition.min} - ${condition.max})`,\n            value: out_Value,\n            why: alarmStatus\n        }\n    };\n}\n\n// 遍历每个有效的 out_ 字段\nalloutFields.forEach((out_) => {\n    const out_Value = msg.payload[out_];\n\n    if (out_Value !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[out_] = Date.now();\n\n        // 检查报警条件\n        const alarmAction = checkAlarmCondition(out_, out_Value);\n\n        if (alarmAction) {\n            let alarmMsg;\n            if (alarmAction === 'trigger') {\n                // 触发报警\n                alarmMsg = generateAlarmMessage(out_, out_Value, 'trigger');\n                global.set(`${out_}_erro`, `${alarmMsg.payload.s_name} ${alarmMsg.payload.why}`);\n                flow.set(`${out_}_erro`, 1);\n                lastAlarmTimes[out_] = Date.now();\n                lastErroredStates[out_] = true;\n            } else if (alarmAction === 'recover') {\n                // 恢复报警状态\n                alarmMsg = generateAlarmMessage(out_, out_Value, 'recover');\n                flow.set(`${out_}_erro`, 0);\n                global.set(`${out_}_erro`, \"\");\n                lastAlarmTimes[out_] = 0;  // 可选，视需求清空最后报警时间\n                lastErroredStates[out_] = false;\n            }\n\n            if (alarmMsg) {\n                messagesToSend.push(alarmMsg); // 添加消息到待发送队列\n                updatedStatus = true;  // 标记状态变化\n            } else if (out_Value >= alarmConditions[out_].min && out_Value <= alarmConditions[out_].max) {\n                    // 数据正常，但没有报警，手动恢复报警状态\n                    // 恢复报警状态\n                    flow.set(`${out_}_erro`, 0);\n                    global.set(`${out_}_erro`, \"\");\n                    lastAlarmTimes[out_] = 0;  // 清空最后报警时间\n                    lastErroredStates[out_] = false;\n                }\n\n        }\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('lastMessageTimes', lastMessageTimes);\ncontext.set('lastAlarmTimes', lastAlarmTimes);\ncontext.set('lastErroredStates', lastErroredStates);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n\n// 辅助函数：获取设备名称\nfunction getout_Name(out_) {\n    const out_Names = {\n        out_ll: '总出水流量',\n        out_cod: '出水COD',\n        out_nh3: '出水氨氮',\n        out_tn: '出水总氮',\n        out_tp: '出水总磷',\n        out_ph: '出水pH',\n        out_ss: '出水悬浮物',\n    };\n\n    return out_Names[out_] || '未知设备';\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 300,
        "wires": [
            [
                "e1a216b495b323f5",
                "11fd5794cfb10282"
            ]
        ]
    },
    {
        "id": "e1a216b495b323f5",
        "type": "debug",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "debug 412",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 100,
        "wires": []
    },
    {
        "id": "11fd5794cfb10282",
        "type": "debug",
        "z": "859f41f963de2747",
        "g": "913a2b275611eaf8",
        "name": "debug 425",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 320,
        "wires": []
    },
    {
        "id": "1763b3800b3a2f7f",
        "type": "debug",
        "z": "859f41f963de2747",
        "name": "debug 426",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 1140,
        "wires": []
    },
    {
        "id": "78b63005d8cc6e2d",
        "type": "inject",
        "z": "859f41f963de2747",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1160,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "51bc625ebd8b39ee",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "设备检测",
        "func": "const TIMEOUT_DURATION = 10 * 60 * 1000; // 1分钟\n\n// 定义所有可能的 tsb 字段\nconst alltsbFields = ['tsb1', 'tsb2', 'tsb3', 'tsb4', 'tsb5'];\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timeoutId', null);\n    context.set('lastMessageTimes', {}); // 确保 lastMessageTimes 初始化为空对象\n    context.set('isOnline', {}); // 确保 isOnline 初始化为空对象\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 确保 context.get('isOnline') 和 context.get('lastMessageTimes') 都是对象\nlet isOnline = context.get('isOnline') || {};\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 处理超时并更新状态\nfunction handleTimeout(tsb) {\n    const lastMessageTime = lastMessageTimes[tsb];\n    if (lastMessageTime && Date.now() - lastMessageTime > TIMEOUT_DURATION) {\n        if (isOnline[tsb] !== false) {\n            isOnline[tsb] = false; // 标记设备离线\n            node.status({ fill: \"red\", shape: \"ring\", text: `${tsb} 离线` });\n            flow.set(`${tsb}`, 0); // 更新 flow 中对应 tsb 的值为 0\n            flow.set(`${tsb}_online`, 1); \n            let msg = {\n                payload: {\n                    d_name: \"进水泵房\",\n                    s_name: `${tsb === 'tsb1' ? '1#流量计' : tsb === 'tsb2' ? '2#流量计' : tsb === 'tsb3' ? '3#流量计' : tsb === 'tsb4' ? '4#流量计' : '5#流量计'}`,\n                    status0: \"离线\"\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${tsb}_online`, online); \n            messagesToSend.push(msg); // 设备离线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    }\n}\n\n// 遍历每个有效的 tsb 字段\nalltsbFields.forEach((tsb) => {\n    const tsbValue = msg.payload[tsb];\n\n    // 如果接收到有效的 tsb 数据\n    if (tsbValue !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[tsb] = Date.now();\n\n        // 判断设备是否从离线状态恢复\n        if (!isOnline[tsb]) {\n            isOnline[tsb] = true; // 设备首次在线时设置为 true\n            let status = \"在线\";\n            node.status({ fill: \"green\", shape: \"dot\", text: `${tsb} 在线` });\n            flow.set(`${tsb}_online`, 0); \n            // 设置消息内容\n            let msg = {\n                payload: {\n                    d_name: \"进水泵房\",\n                    s_name: `${tsb === 'tsb1' ? '1#流量计' : tsb === 'tsb2' ? '2#流量计' : tsb === 'tsb3' ? '3#流量计' : tsb === 'tsb4' ? '4#流量计' : '5#流量计'}`,\n                    status0: status\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${tsb}_online`, online); \n            // 只在第一次设备状态变化时发送消息\n            messagesToSend.push(msg); // 设备在线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    } else {\n\n        // 如果没有接收到数据，则检查是否超时\n        handleTimeout(tsb);\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('isOnline', isOnline);\ncontext.set('lastMessageTimes', lastMessageTimes);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1240,
        "wires": [
            [
                "a3a28229c1dd6484"
            ]
        ]
    },
    {
        "id": "82d80aca214143ec",
        "type": "function",
        "z": "859f41f963de2747",
        "name": "function 219",
        "func": "const GATEWAY_TIMEOUT_DURATION = 1 * 60 * 1000; // 10分钟超时\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timeoutId', null);\n    context.set('lastMessageTime', null); // 确保 lastMessageTime 初始化为空\n    context.set('isOnline', false); // 初始时网关设为离线\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 获取当前时间和最后接收到消息的时间\nlet lastMessageTime = context.get('lastMessageTime');\nlet isOnline = context.get('isOnline');\n\n// 处理超时并更新网关状态\nfunction handleGatewayTimeout() {\n    // 如果没有接收到数据且超过超时设置，标记为离线\n    if (lastMessageTime && Date.now() - lastMessageTime > GATEWAY_TIMEOUT_DURATION) {\n        if (isOnline !== false) {\n            isOnline = false; // 标记网关离线\n            node.status({ fill: \"red\", shape: \"ring\", text: \"网关离线\" });\n\n            // 设置网关离线相关信息\n            let msg = {\n                payload: {\n                    gateway_status: \"离线\"\n                }\n            };\n            global.set('gateway_status', \"离线\"); // 更新全局状态为离线\n            // 定义所有的 tsb 字段\n            const tsbFields = ['tsb1', 'tsb2', 'tsb3', 'tsb4', 'tsb5'];\n\n            // 遍历 tsbFields 数组\n            tsbFields.forEach((tsb) => {\n                flow.set(tsb, 0); // 设置 tsb 字段的值为 0\n                flow.set(`${tsb}_online`, 1); // 设置对应的在线状态字段\n            });\n\n            node.send(msg); // 发送网关离线的消息\n            context.set('isOnline', false); // 更新网关状态为离线\n        }\n    }\n}\n\n// 检查是否接收到有效数据\nif (msg.payload) {\n    // 如果接收到数据，则更新最后接收到消息的时间\n    lastMessageTime = Date.now();\n    isOnline = true; // 标记网关在线\n    node.status({ fill: \"green\", shape: \"dot\", text: \"网关在线\" });\n\n    // 更新全局状态为在线\n    let msg = {\n        payload: {\n            gateway_status: \"在线\"\n        }\n    };\n    global.set('gateway_status', \"在线\"); // 更新全局状态为在线\n                // 定义所有的 tsb 字段\n            const tsbFields = ['tsb1', 'tsb2', 'tsb3', 'tsb4', 'tsb5'];\n\n            // 遍历 tsbFields 数组\n            tsbFields.forEach((tsb) => {\n                flow.set(`${tsb}_online`, 0); // 设置对应的在线状态字段\n            });\n    node.send(msg); // 发送网关在线的消息\n} else {\n    // 如果没有接收到数据，则检查是否超时\n    handleGatewayTimeout();\n}\n\n// 保存更新后的状态和时间到上下文\ncontext.set('lastMessageTime', lastMessageTime);\ncontext.set('isOnline', isOnline);\n\n// 定时执行：每10秒钟检查一次网关是否超时，若超时则标记为离线\nif (context.get('timeoutId') === null) {\n    context.set('timeoutId', setInterval(() => {\n        handleGatewayTimeout();\n    }, 10000)); // 每10秒钟检查一次\n}\n\nreturn null; // 不返回默认消息，避免重复发送\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1300,
        "wires": [
            [
                "740265862ad1b00c"
            ]
        ]
    },
    {
        "id": "740265862ad1b00c",
        "type": "debug",
        "z": "859f41f963de2747",
        "name": "debug 427",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1320,
        "wires": []
    },
    {
        "id": "a0d40216ff752fee",
        "type": "inject",
        "z": "859f41f963de2747",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1245",
        "payloadType": "num",
        "x": 100,
        "y": 1300,
        "wires": [
            [
                "82d80aca214143ec"
            ]
        ]
    },
    {
        "id": "31d7e2b8baf63d07",
        "type": "debug",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 230,
        "y": 2300,
        "wires": []
    },
    {
        "id": "844605cb2a732c33",
        "type": "debug",
        "z": "859f41f963de2747",
        "g": "dce4f4c7863810d7",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 2160,
        "wires": []
    },
    {
        "id": "9ac5892dcce24fd4",
        "type": "inject",
        "z": "4a8b9d9bc600415f",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "7cee1673e0ec7278"
            ]
        ]
    },
    {
        "id": "28c7c35a6942b047",
        "type": "websocket out",
        "z": "4a8b9d9bc600415f",
        "name": "",
        "server": "db931e1580de4804",
        "client": "",
        "x": 670,
        "y": 80,
        "wires": []
    },
    {
        "id": "7cee1673e0ec7278",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "websocket",
        "func": "// 检查NaN值并替换为0\nfunction replaceNaN(value) {\n    return isNaN(value) ? 0 : value;\n}\n\n// 检查NaN值并替换为0\nfunction replaceNaN(value) {\n    return isNaN(value) ? 0 : value;\n}\n\n// 获取数据\nvar tag1 = flow.get([\"yborp2_1\", \"yborp2_2\", \"yborp2_3\", \"yborp2_4\", \"ybdo2_1\", \"ybdo2_2\", \"ybmlss2_1\", \"ybxhhl2_1\", \"ybnwj2_1\"]);\nvar out_ll = global.get(\"yhg2\");\nvar yhg2_online = global.get(\"yhg2_online\");\nvar out_lj = global.get(\"yhg2_lj\");\nvar online = flow.get([\"yborp2_1_online\", \"yborp2_2_online\", \"yborp2_3_online\", \"yborp2_4_online\", \"ybdo2_1_online\", \"ybdo2_2_online\", \"ybmlss2_1_online\", \"ybxhhl2_1_online\", \"ybnwj2_1_online\"]);\nvar erro = flow.get([\"yborp2_1_erro\", \"yborp2_2_erro\", \"yborp2_3_erro\", \"yborp2_4_erro\", \"ybdo2_1_erro\", \"ybdo2_2_erro\", \"ybmlss2_1_erro\", \"ybxhhl2_1_erro\", \"ybnwj2_1_erro\"]);\n\n//var fj = flow.get(['setfl1','setfl2','fjfl1','fjfl2'])\n//var fj_dv = flow.get(['fjrun1','fjfaul1','fjrun2','fjfaul2','fjrun3','fjfaul3'])\n//var fj3 = flow.get(['setfl3','fjfl3'])\n// 获取 fj1auto、fj2auto 和 fj3auto 变量，如果没有则初始化为 0\n//var fj1auto = flow.get('fj1auto') || 0; // 如果 fj1auto 不存在，初始化为 0\n//var fj2auto = flow.get('fj2auto') || 0; // 如果 fj2auto 不存在，初始化为 0\n//var fj3auto = flow.get('fj3auto') || 0; // 如果 fj3auto 不存在，初始化为 0\n\n// 如果 tag1 获取到数据，则转换为浮动点数并检查 NaN\nvar orp2_1 = tag1 && tag1[0] !== undefined ? replaceNaN(parseFloat(tag1[0]?.toFixed(2))) : 0;\nvar orp2_2 = tag1 && tag1[1] !== undefined ? replaceNaN(parseFloat(tag1[1]?.toFixed(2))) : 0;\nvar orp2_3 = tag1 && tag1[2] !== undefined ? replaceNaN(parseFloat(tag1[2]?.toFixed(2))) : 0;\nvar orp2_4 = tag1 && tag1[3] !== undefined ? replaceNaN(parseFloat(tag1[3]?.toFixed(2))) : 0;\nvar do2_1 = tag1 && tag1[4] !== undefined ? replaceNaN(parseFloat(tag1[4]?.toFixed(2))) : 0;\nvar do2_2 = tag1 && tag1[5] !== undefined ? replaceNaN(parseFloat(tag1[5]?.toFixed(2))) : 0;\nvar mlss2_1 = tag1 && tag1[6] !== undefined ? replaceNaN(parseFloat(tag1[6]?.toFixed(2))) : 0;\nvar xhhl2_1 = tag1 && tag1[7] !== undefined ? replaceNaN(parseFloat(tag1[7]?.toFixed(2))) : 0;\nvar nwj2_1 = tag1 && tag1[8] !== undefined ? replaceNaN(parseFloat(tag1[8]?.toFixed(2))) : 0;\n//var fjfl1 = fj && fj[2] !== undefined ? replaceNaN(parseFloat(fj[2]?.toFixed(0))) : 0;\n//var fjfl2 = fj && fj[3] !== undefined ? replaceNaN(parseFloat(fj[3]?.toFixed(0))) : 0;\n//var fjfl3 = fj3 && fj3[1] !== undefined ? replaceNaN(parseFloat(fj3[1]?.toFixed(0))) : 0;\n\n// 数据检查，替换undefined为0\nout_ll = out_ll !== undefined ? out_ll : 0;\nyhg2_online = yhg2_online !== undefined ? yhg2_online : 0;\nout_lj = out_lj !== undefined ? out_lj : 0;\n\nonline = online && online.length === 9 ? online : new Array(9).fill(0);\nerro = erro && erro.length === 9 ? erro : new Array(9).fill(0);\n\nvar dataflow = [\n    { name: '出水量', data: out_ll, dw: \"m³/h\", alarm: yhg2_online },\n    { name: '出水累计', data: out_lj, dw: \"m³\", alarm: 0 },\n    { name: '好氧溶氧仪', data: do2_1, dw: \"mg/l\", alarm: online[4]===1 || erro[4]===1 ? 1:0 },\n    { name: '缺氧溶氧仪', data: do2_2, dw: \"mg/l\", alarm:online[5]===1 || erro[5]===1  ? 1:0},\n    { name: '好氧1#ORP', data: orp2_2, dw: \"\", alarm: online[1] === 1||erro[1]===1 ? 1:0},\n    { name: '好氧2#ORP', data: orp2_3, dw: \"\", alarm: online[2] === 1||erro[2]===1  ? 1:0},\n    { name: '缺氧ORP', data: orp2_4, dw: \"\", alarm: online[3] === 1||erro[3]===1   ? 1:0},\n    { name: '厌缺可变ORP', data: orp2_1, dw: \"\", alarm: online[0] === 1||erro[0]===1  ? 1:0},\n    { name: 'MLSS', data: mlss2_1, dw: \"mg/l\", alarm: online[6] === 1||erro[6]===1  ? 1:0},\n    { name: '硝化回流量', data: xhhl2_1, dw: \"m³/h\", alarm: online[7] === 1||erro[7]===1 ? 1:0},\n    { name: '硝胺密度仪', data: 0, dw: \"mg/l\", alarm: 0 },\n    { name: '二沉池泥位', data: nwj2_1, dw: \"m\", alarm:  online[8] === 1||erro[8]===1   ? 1:0},\n];\nvar devices = [\n    //{ name: '1#风机', running: fj_dv[0], faul: fj_dv[1] },\n    //{ name: '1#风机自动', running: fj1auto, faul: 0 },\n   // { name: '2#风机', running: fj_dv[2], faul: fj_dv[3] },\n   // { name: '2#风机自动', running: fj2auto, faul: 0 },\n    //{ name: '3#风机', running: fj_dv[4], faul: fj_dv[5] },\n    //{ name: '3#风机自动', running: fj3auto, faul: 0 },\n\n];\nvar deviceFrequency = [\n  // { name: '1#硝化泵频率', hz: 0, sethz: 25, a: 15 },\n//    { name: '2#硝化泵频率', hz: 0, sethz: 25, a: 15 },\n//    { name: '3#硝化泵频率', hz: 0, sethz: 25, a: 15 },\n];\nvar fengjiset = [\n    //{ name: '1#风机风量', fl: fjfl1, setfl: fj[0] },\n    //{ name: '2#风机风量', fl: fjfl2, setfl: fj[1] },\n   // { name: '3#风机风量', fl: fjfl3, setfl: fj3[0] },\n];\n\n// 构建最终的消息负载\nmsg.payload = {\n    dataflow,\n    deviceFrequency,\n    devices,\n    fengjiset\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 80,
        "wires": [
            [
                "cb75351777f3b4ae",
                "28c7c35a6942b047"
            ]
        ]
    },
    {
        "id": "135cc70bd025b235",
        "type": "websocket in",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "server": "db931e1580de4804",
        "client": "",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "a754afc68cbdd3a7"
            ]
        ]
    },
    {
        "id": "b294163634c4ec8e",
        "type": "mqtt out",
        "z": "4a8b9d9bc600415f",
        "name": "",
        "topic": "/SubTopic11",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 730,
        "y": 320,
        "wires": []
    },
    {
        "id": "64325dee38da847c",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "生成命令",
        "func": "// 初始化设备索引\ncontext.deviceIndex = context.deviceIndex || 0;\n\n// 设备地址\nconst addresses = [1, 2, 3, 4, 5,6,9];\n\n// 获取当前设备地址\nconst currentAddress = addresses[context.deviceIndex];\n\n// 更新设备索引\ncontext.deviceIndex = (context.deviceIndex + 1) % addresses.length;\n\n// 生成采集命令（不含校验码）\nlet command = `${currentAddress.toString(16).padStart(2, '0')}0300000002`;\n\n// 计算CRC校验码\nfunction calculateCRC(command) {\n    let crc = 0xFFFF;\n    for (let pos = 0; pos < command.length; pos += 2) {\n        crc ^= parseInt(command.substr(pos, 2), 16);\n        for (let i = 8; i !== 0; i--) {\n            if ((crc & 0x0001) !== 0) {\n                crc >>= 1;\n                crc ^= 0xA001;\n            } else {\n                crc >>= 1;\n            }\n        }\n    }\n    return crc.toString(16).padStart(4, '0');\n}\n\n// 获取校验码\nconst crc = calculateCRC(command);\n\n// 完整命令（包含校验码）\ncommand += crc.slice(2) + crc.slice(0, 2);\n\n// 设置输出消息\nmsg.topic = `devices/${currentAddress}/command`;\nmsg.payload = Buffer.from(command, 'hex');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 280,
        "wires": [
            [
                "b294163634c4ec8e"
            ]
        ]
    },
    {
        "id": "83679e1a7e188d74",
        "type": "inject",
        "z": "4a8b9d9bc600415f",
        "name": "",
        "props": [],
        "repeat": "13",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 280,
        "wires": [
            [
                "64325dee38da847c"
            ]
        ]
    },
    {
        "id": "dabd877661181c10",
        "type": "mqtt in",
        "z": "4a8b9d9bc600415f",
        "name": "",
        "topic": "/PubTopic11",
        "qos": "0",
        "datatype": "buffer",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 170,
        "y": 460,
        "wires": [
            [
                "a77ec372b8299a74"
            ]
        ]
    },
    {
        "id": "a77ec372b8299a74",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "解析数据",
        "func": "// 将接收到的数据转换为十六进制字符串\nlet hexData = msg.payload.toString('hex');\n\n// 解析出设备地址（假设设备地址在前两个字符）\nlet deviceAddress = parseInt(hexData.slice(0, 2), 16);\n\n// 根据设备地址分类处理数据\nswitch(deviceAddress) {\n    case 1:\n        msg.topic = '设备1';\n        break;\n    case 2:\n        msg.topic = '设备2';\n        break;\n    case 3:\n        msg.topic = '设备3';\n        break;\n    case 4:\n        msg.topic = '设备4';\n        break;\n    case 5:\n        msg.topic = '设备5';\n        break;\n    case 6:\n        msg.topic = '设备6';\n        break;\n    case 7:\n        msg.topic = '设备7';\n        break;\n    case 8:\n        msg.topic = '设备8';\n        break;\n    case 9:\n        msg.topic = '设备9';\n        break;\n    case 10:\n        msg.topic = '设备10';\n        break;\n    default:\n        msg.topic = '未知设备';\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 460,
        "wires": [
            [
                "36d43c07789998a4"
            ]
        ]
    },
    {
        "id": "36d43c07789998a4",
        "type": "switch",
        "z": "4a8b9d9bc600415f",
        "name": "按设备分流",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "设备1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备4",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备5",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备6",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备7",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备8",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备9",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 9,
        "x": 610,
        "y": 460,
        "wires": [
            [
                "d8568b228a32153e"
            ],
            [
                "9313afa06c64f9ea"
            ],
            [
                "c1849c92fc1ea7a0"
            ],
            [
                "04a51db603a2c949"
            ],
            [
                "97623f6194ce36b2"
            ],
            [
                "6729db0e7c9c3fdd"
            ],
            [
                "71397f05196552d9"
            ],
            [
                "307fa1a158880e84"
            ],
            [
                "747b567e2284d23f"
            ]
        ]
    },
    {
        "id": "d8568b228a32153e",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 300,
        "wires": [
            [
                "c88721bd084b0bfc"
            ]
        ]
    },
    {
        "id": "c88721bd084b0bfc",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "orp2_1",
        "func": "var value1 = msg.payload[1];\nvar value2 = msg.payload[0];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"yborp2_1\", msg.payload);\nmsg.payload = {\n    yborp2_1: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 300,
        "wires": [
            [
                "a796c5a29d4e2803"
            ]
        ]
    },
    {
        "id": "0f209d67aacde2b2",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "mlss2_1",
        "func": "var value1 = msg.payload[1];\nvar value2 = msg.payload[0];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"ybmlss2_1\", msg.payload);\nmsg.payload = {\n    ybmlss2_1: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 380,
        "wires": [
            [
                "a796c5a29d4e2803"
            ]
        ]
    },
    {
        "id": "5b49ea8b1790b8e0",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "do2_1",
        "func": "var value1 = msg.payload[1];\nvar value2 = msg.payload[0];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"ybdo2_1\", msg.payload);\nmsg.payload = {\n    ybdo2_1: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 420,
        "wires": [
            [
                "a796c5a29d4e2803"
            ]
        ]
    },
    {
        "id": "4fbde2552a572756",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "orp2_3",
        "func": "var value1 = msg.payload[1];\nvar value2 = msg.payload[0];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"yborp2_3\", msg.payload);\nmsg.payload = {\n    yborp2_3: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 460,
        "wires": [
            [
                "a796c5a29d4e2803"
            ]
        ]
    },
    {
        "id": "3f0dfb2d3ff8585d",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "orp2_2",
        "func": "var value1 = msg.payload[1];\nvar value2 = msg.payload[0];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"yborp2_2\", msg.payload);\nmsg.payload = {\n    yborp2_2: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 340,
        "wires": [
            [
                "a796c5a29d4e2803"
            ]
        ]
    },
    {
        "id": "9313afa06c64f9ea",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 340,
        "wires": [
            [
                "3f0dfb2d3ff8585d"
            ]
        ]
    },
    {
        "id": "c1849c92fc1ea7a0",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 380,
        "wires": [
            [
                "0f209d67aacde2b2"
            ]
        ]
    },
    {
        "id": "04a51db603a2c949",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 420,
        "wires": [
            [
                "5b49ea8b1790b8e0"
            ]
        ]
    },
    {
        "id": "97623f6194ce36b2",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 460,
        "wires": [
            [
                "4fbde2552a572756"
            ]
        ]
    },
    {
        "id": "2d62a4e3bf9ee314",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "ybdo2_2",
        "func": "var value1 = msg.payload[1];\nvar value2 = msg.payload[0];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"ybdo2_2\", msg.payload);\nmsg.payload = {\n    ybdo2_2: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 500,
        "wires": [
            [
                "a796c5a29d4e2803"
            ]
        ]
    },
    {
        "id": "6729db0e7c9c3fdd",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 500,
        "wires": [
            [
                "2d62a4e3bf9ee314"
            ]
        ]
    },
    {
        "id": "d831d5e0b6bec1fd",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "ybxhhl2_1",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"ybxhhl2_1\", msg.payload);\nmsg.payload = {\n    ybxhhl2_1: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 540,
        "wires": [
            [
                "a796c5a29d4e2803"
            ]
        ]
    },
    {
        "id": "d67a22906cd6736b",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "ybnwj2_1",
        "func": "var value1 = msg.payload[1];\nvar value2 = msg.payload[0];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"ybnwj2_1\", msg.payload);\nmsg.payload = {\n    ybnwj2_1: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 580,
        "wires": [
            [
                "a796c5a29d4e2803"
            ]
        ]
    },
    {
        "id": "84628f10c1e531f8",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "yborp2_4",
        "func": "var value1 = msg.payload[1];\nvar value2 = msg.payload[0];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nvar aaa = floatValue\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"yborp2_4\", msg.payload);\nmsg.payload = {\n    yborp2_4: msg.payload\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 620,
        "wires": [
            [
                "a796c5a29d4e2803"
            ]
        ]
    },
    {
        "id": "747b567e2284d23f",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 620,
        "wires": [
            [
                "84628f10c1e531f8"
            ]
        ]
    },
    {
        "id": "1841f94da735cfd7",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "泥位计",
        "func": "msg.payload = Buffer.from(\"080400020002D092\", \"hex\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 320,
        "wires": [
            [
                "b294163634c4ec8e"
            ]
        ]
    },
    {
        "id": "61e23479758bfe15",
        "type": "inject",
        "z": "4a8b9d9bc600415f",
        "name": "",
        "props": [],
        "repeat": "15",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 320,
        "wires": [
            [
                "1841f94da735cfd7"
            ]
        ]
    },
    {
        "id": "a796c5a29d4e2803",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "获取检测设备数据",
        "func": "// 获取 msg.payload 中的 yb1 到 yb5 的值\nlet ybValues = [\"yborp2_1\", \"yborp2_2\", \"yborp2_3\", \"yborp2_4\", \"ybdo2_1\", \"ybdo2_2\", \"ybmlss2_1\", \"ybxhhl2_1\",\"ybnwj2_1\"];\n// 初始化一个新的对象\nlet optimizedPayload = {};\n\n// 遍历 yb1 到 yb5，检查并只保留有值的字段\nybValues.forEach((yb) => {\n    // 如果该字段有值（不是 undefined），将其加入到 optimizedPayload 中\n    if (msg.payload[yb] !== undefined) {\n        optimizedPayload[yb] = msg.payload[yb];\n    }\n});\n\n// 如果有有效的字段，更新 msg.payload，否则不做任何操作\nif (Object.keys(optimizedPayload).length > 0) {\n    msg.payload = optimizedPayload;\n    return msg;\n} else {\n    return null; // 如果没有有效字段，则不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 440,
        "wires": [
            [
                "8b3f27dd22236e2c",
                "b5e971d1b13c6cb2"
            ]
        ]
    },
    {
        "id": "8b3f27dd22236e2c",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "设备检测",
        "func": "const TIMEOUT_DURATION = 10 * 60 * 1000; // 1分钟\n\n// 定义所有可能的 yb 字段\nconst allybFields = [\"yborp2_1\", \"yborp2_2\", \"yborp2_3\", \"yborp2_4\", \"ybdo2_1\", \"ybdo2_2\", \"ybmlss2_1\", \"ybxhhl2_1\", \"ybnwj2_1\"];\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('timeoutId', null);\n    context.set('lastMessageTimes', {}); // 确保 lastMessageTimes 初始化为空对象\n    context.set('isOnline', {}); // 确保 isOnline 初始化为空对象\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 确保 context.get('isOnline') 和 context.get('lastMessageTimes') 都是对象\nlet isOnline = context.get('isOnline') || {};\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\n\n// 用于保存所有发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false; // 用于标记是否状态发生变化\n\n// 处理超时并更新状态\nfunction handleTimeout(yb) {\n    const lastMessageTime = lastMessageTimes[yb];\n    if (lastMessageTime && Date.now() - lastMessageTime > TIMEOUT_DURATION) {\n        if (isOnline[yb] !== false) {\n            isOnline[yb] = false; // 标记设备离线\n            node.status({ fill: \"red\", shape: \"ring\", text: `${yb} 离线` });\n            flow.set(`${yb}`, 0); // 更新 flow 中对应 yb 的值为 0\n            flow.set(`${yb}_online`, 1); \n            let msg = {\n                payload: {\n                    d_name: \"二号氧化沟\",\n                    s_name: `${yb === \"yborp2_1\" ? '厌缺可变ORP' : yb === \"yborp2_2\" ? '好氧1#ORP' : yb === \"yborp2_3\" ? '好氧2#ORP' : yb === \"yborp2_4\" ? '缺氧ORP' : yb === \"ybdo2_1\" ? '好氧溶氧仪' : yb === \"ybdo2_2\" ? '缺氧溶氧仪' : yb === \"ybmlss2_1\" ? '污泥浓度' : yb === \"ybxhhl2_1\" ? '硝化流量计' : yb === \"ybnwj2_1\" ? '二沉池泥位计' : '硝胺密度仪'}`,\n                    status0: \"离线\"\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${yb}_online`, online); \n            messagesToSend.push(msg); // 设备离线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    }\n}\n\n// 遍历每个有效的 yb 字段\nallybFields.forEach((yb) => {\n    const ybValue = msg.payload[yb];\n\n    // 如果接收到有效的 yb 数据\n    if (ybValue !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[yb] = Date.now();\n\n        // 判断设备是否从离线状态恢复\n        if (!isOnline[yb]) {\n            isOnline[yb] = true; // 设备首次在线时设置为 true\n            node.status({ fill: \"green\", shape: \"dot\", text: `${yb} 在线` });\n            flow.set(`${yb}_online`, 0); \n            // 设置消息内容\n            let msg = {\n                payload: {\n                    d_name: \"二号氧化沟\",\n                    s_name: `${yb === \"yborp2_1\" ? '厌缺可变ORP' : yb === \"yborp2_2\" ? '好氧1#ORP' : yb === \"yborp2_3\" ? '好氧2#ORP' : yb === \"yborp2_4\" ? '缺氧ORP' : yb === \"ybdo2_1\" ? '好氧溶氧仪' : yb === \"ybdo2_2\" ? '缺氧溶氧仪' : yb === \"ybmlss2_1\" ? '污泥浓度' : yb === \"ybxhhl2_1\" ? '硝化流量计' : yb === \"ybnwj2_1\" ? '二沉池泥位计' : '硝胺密度仪'}`,\n                    status0: \"在线\"\n                }\n            };\n            let online =  `${msg.payload.s_name} ${msg.payload.status0}`;\n            global.set(`${yb}_online`, online); \n            // 只在第一次设备状态变化时发送消息\n            messagesToSend.push(msg); // 设备在线时添加到待发送消息队列\n            updatedStatus = true; // 状态发生变化\n        }\n    } else {\n        // 如果没有接收到数据，则检查是否超时\n        handleTimeout(yb);\n    }\n});\n\n// 保存更新后的状态和时间到上下文\ncontext.set('isOnline', isOnline);\ncontext.set('lastMessageTimes', lastMessageTimes);\n\n// 发送所有待发送的消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => {\n        node.send(msg); // 分别发送每个设备的状态更新信息\n    });\n    return null; // 不返回默认消息，避免重复发送\n} else {\n    return null; // 状态没有变化时，不返回任何消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 300,
        "wires": [
            [
                "a7f757ebe78fb190"
            ]
        ]
    },
    {
        "id": "a7f757ebe78fb190",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "队列机制",
        "func": "// 获取队列（初始化为空数组）\nlet queue = flow.get('messageQueue1') || [];\n\n// 将当前消息添加到队列中\nqueue.push(msg);\n\n// 保存更新后的队列\nflow.set('messageQueue1', queue);\n\n// 判断是否有消息正在发送\nlet isProcessing = flow.get('isProcessing1') || false;\n\nif (!isProcessing) {\n    // 如果没有消息正在处理，启动队列处理\n    flow.set('isProcessing1', true);\n    sendNextMessage();\n}\n\n// 定义发送下一个消息的函数\nfunction sendNextMessage() {\n    if (queue.length > 0) {\n        // 获取队列中的第一个消息\n        let currentMessage = queue.shift();\n\n        // 发送当前消息\n        node.send(currentMessage);\n\n        // 等待一段时间再发送下一个消息，避免消息处理过于频繁\n        setTimeout(() => {\n            sendNextMessage();\n        }, 1000); // 1秒后发送下一个消息，可以根据需要调整时间\n    } else {\n        // 如果队列为空，标记为没有在处理消息\n        flow.set('isProcessing1', false);\n    }\n}\n\nreturn null; // 不返回默认消息，避免消息重复发送\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 300,
        "wires": [
            [
                "c19994b511408ecc"
            ]
        ]
    },
    {
        "id": "5363380543a2d125",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "硝化",
        "func": "msg.payload = Buffer.from(\"07030038000245A0\", \"hex\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 360,
        "wires": [
            [
                "b294163634c4ec8e"
            ]
        ]
    },
    {
        "id": "55c6cee24dd4dad6",
        "type": "inject",
        "z": "4a8b9d9bc600415f",
        "name": "",
        "props": [],
        "repeat": "17",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 360,
        "wires": [
            [
                "5363380543a2d125"
            ]
        ]
    },
    {
        "id": "71397f05196552d9",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 确保寄存器数量正确\n    if (registerCount % 2 !== 0) {\n        node.error(\"Register count should be an even number for 16-bit registers\");\n        return;\n    }\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3; // 从第四个字节开始（索引3）\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 检查是否超出了 Buffer 的长度\n        if (index + 1 >= inputData.length) {\n            node.error(\"Buffer length exceeded when reading register\");\n            return;\n        }\n\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 540,
        "wires": [
            [
                "d831d5e0b6bec1fd"
            ]
        ]
    },
    {
        "id": "307fa1a158880e84",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x04) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 580,
        "wires": [
            [
                "d67a22906cd6736b"
            ]
        ]
    },
    {
        "id": "3fa15ae0a3d6e6c3",
        "type": "http request",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "发送模板消息",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 2640,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "5d74578c37f176b9",
        "type": "split",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 2310,
        "y": 260,
        "wires": [
            [
                "72ddedb7470378a4"
            ]
        ]
    },
    {
        "id": "21e45a5ce2bfeaa9",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "设备离线",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nvar d_name = flow.get(\"d_name\");\nvar s_name = flow.get(\"s_name\");\nvar status0 = flow.get(\"status0\");\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"vpks8dx3GNykOuZPNUKeBYB9v0C6ZOXoOkysC1DNWVY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing7\": {\n            \"value\": d_name,\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": s_name,\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": status0,\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2480,
        "y": 300,
        "wires": [
            [
                "3fa15ae0a3d6e6c3"
            ]
        ]
    },
    {
        "id": "cae54cc02a22cc69",
        "type": "split",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 2310,
        "y": 300,
        "wires": [
            [
                "21e45a5ce2bfeaa9"
            ]
        ]
    },
    {
        "id": "0f694f3c9d354d82",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 300,
        "wires": [
            [
                "cae54cc02a22cc69"
            ]
        ]
    },
    {
        "id": "d57e4934846d02eb",
        "type": "switch",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "",
        "property": "payload.status0",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "在线",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "离线",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2030,
        "y": 280,
        "wires": [
            [
                "e815864018ed0e7c"
            ],
            [
                "0f694f3c9d354d82"
            ]
        ]
    },
    {
        "id": "a05f5d965a6873ca",
        "type": "mysql",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 2320,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "1b69da30dddcefd0",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "写入数据库",
        "func": "var time = global.get(\"mariaDBTime\");\nvar d_name = flow.get(\"d_name\");\nvar s_name = flow.get(\"s_name\");\nvar status0 = flow.get(\"status0\");\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO device_status_log (timestamp, dname, sname, status) \n    VALUES (?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time,\n    d_name,\n    s_name,\n    status0\n\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 360,
        "wires": [
            [
                "a05f5d965a6873ca"
            ]
        ]
    },
    {
        "id": "e815864018ed0e7c",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 260,
        "wires": [
            [
                "5d74578c37f176b9"
            ]
        ]
    },
    {
        "id": "72ddedb7470378a4",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "设备上线",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nvar d_name = flow.get(\"d_name\");\nvar s_name = flow.get(\"s_name\");\nvar status0 = flow.get(\"status0\");\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"-nOwSKt3OHr4NZd0gKG5uJ7YgDa1EI57Qb5Sz2BR_lY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing11\": {\n            \"value\": d_name,\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": s_name,\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": status0,\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2480,
        "y": 260,
        "wires": [
            [
                "3fa15ae0a3d6e6c3"
            ]
        ]
    },
    {
        "id": "c19994b511408ecc",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "结果写入状态变量",
        "func": "var a = msg.payload\nflow.set(\"d_name\",a.d_name);\nflow.set(\"s_name\",a.s_name);\nflow.set(\"status0\",a.status0);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 320,
        "wires": [
            [
                "d57e4934846d02eb",
                "1b69da30dddcefd0"
            ]
        ]
    },
    {
        "id": "b5e971d1b13c6cb2",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "name": "上下限、回差、变化检测",
        "func": "const ALARM_COOL_DOWN_TIME = 30 * 60 * 1000; // 报警冷却时间（5分钟）\nconst RATE_CHECK_INTERVAL = 3 * 60 * 60 * 1000; // 变化率检测时间窗口（3小时）\n\n// 定义所有可能的 yb 字段\nconst allybFields = [\n    \"yborp2_1\", \"yborp2_2\", \"yborp2_3\", \"yborp2_4\",\n    \"ybdo2_1\", \"ybdo2_2\", \"ybmlss2_1\", \"ybxhhl2_1\", \"ybnwj2_1\"\n];\n\n// 定义报警条件（包括上下限与回差）\nconst alarmConditions = {\n    \"yborp2_1\": { min: -200, max: -100, hysteresis: 10 },\n    \"yborp2_2\": { min: 150, max: 250, hysteresis: 5 },\n    \"yborp2_3\": { min: 150, max: 250, hysteresis: 5 },\n    \"yborp2_4\": { min: -100, max: -50, hysteresis: 10 },\n    \"ybdo2_1\": { min: 2, max: 3, hysteresis: 0.2 },\n    \"ybdo2_2\": { min: 0.1, max: 0.4, hysteresis: 0.05 },\n    \"ybmlss2_1\": { min: 4000, max: 6000, hysteresis: 50 },\n    \"ybxhhl2_1\": { min: 1500, max: 2500, hysteresis: 100 },\n    \"ybnwj2_1\": { min: 0.1, max: 1, hysteresis: 0.05 },\n};\n\n// 上下文中的状态变量\nlet lastMessageTimes = context.get('lastMessageTimes') || {};\nlet lastAlarmTimes = context.get('lastAlarmTimes') || {};\nlet lastErroredStates = context.get('lastErroredStates') || {};\nlet lastValues = context.get('lastValues') || {}; // 用于变化率检测\n\n// 保存所有待发送的消息\nlet messagesToSend = [];\nlet updatedStatus = false;\n\n// 检测上下限和回差\nfunction checkAlarmCondition(yb, ybValue) {\n    const condition = alarmConditions[yb];\n    const currentTime = Date.now();\n    const lastAlarmTime = lastAlarmTimes[yb] || 0;\n    const lastErroredState = lastErroredStates[yb] || false;\n\n    if (!condition) return false;\n\n    const hysteresis = condition.hysteresis || 0;\n\n    if (lastErroredState) {\n        // 当前处于报警状态，需要数据恢复到回差范围内\n        if (ybValue > condition.min + hysteresis && ybValue < condition.max - hysteresis) {\n            return 'recover';\n        }\n    } else {\n        // 未报警，检查是否超出正常范围\n        if (ybValue < condition.min || ybValue > condition.max) {\n            if (currentTime - lastAlarmTime > ALARM_COOL_DOWN_TIME) {\n                return 'trigger';\n            }\n        } else {\n            // 数据正常且未报警，复位状态\n            if (flow.get(`${yb}_erro`) === 1) {\n                return 'reset';\n            }\n        }\n    }\n    return false;\n}\n\n// 检测变化率\nfunction checkRateChange(yb, ybValue) {\n    const currentTime = Date.now();\n    const lastValue = lastValues[yb]?.value;\n    const lastTimestamp = lastValues[yb]?.timestamp || currentTime;\n\n    if (lastValue === undefined) {\n        // 初始化时直接记录当前值和时间\n        lastValues[yb] = { value: ybValue, timestamp: currentTime };\n        return false;\n    }\n\n    if (currentTime - lastTimestamp > RATE_CHECK_INTERVAL) {\n        // 如果超出检测时间窗口，且数据没有变化\n        if (ybValue === lastValue) {\n            return 'rateUnchanged';\n        } else {\n            // 数据有变化，更新记录\n            lastValues[yb] = { value: ybValue, timestamp: currentTime };\n            return false;\n        }\n    }\n\n    // 如果在检测窗口内，更新最新值\n    lastValues[yb] = { value: ybValue, timestamp: currentTime };\n    return false;\n}\n\n// 生成报警消息\nfunction generateAlarmMessage(yb, ybValue, status) {\n    const condition = alarmConditions[yb];\n    let alarmStatus;\n    if (status === 'trigger') {\n        alarmStatus = ybValue < condition.min ? \"低于阈值\" : \"超过阈值\";\n    } else if (status === 'recover') {\n        alarmStatus = \"已恢复正常\";\n    } else if (status === 'rateUnchanged') {\n        alarmStatus = \"数据无变化，异常\";\n    } else if (status === 'reset') {\n        alarmStatus = \"数据正常，已复位\";\n    }\n    return {\n        payload: {\n            s_name: getYbName(yb),\n            s_msg: `${alarmStatus} (${condition.min} - ${condition.max})`,\n            value: ybValue,\n            why: alarmStatus\n        }\n    };\n}\n\n// 辅助函数：获取设备名称\nfunction getYbName(yb) {\n    const ybNames = {\n        yborp2_1: '厌缺ORP',\n        yborp2_2: '好氧1#ORP',\n        yborp2_3: '好氧2#ORP',\n        yborp2_4: '缺氧ORP',\n        ybdo2_1: '好氧DO',\n        ybdo2_2: '缺氧DO',\n        ybmlss2_1: 'MLSS',\n        ybxhhl2_1: '硝化流量计',\n        ybnwj2_1: '二沉池泥位计'\n    };\n    return ybNames[yb] || '未知设备';\n}\n\n// 遍历每个监控字段\nallybFields.forEach((yb) => {\n    const ybValue = msg.payload[yb];\n\n    if (ybValue !== undefined) {\n        // 更新最后接收到消息的时间\n        lastMessageTimes[yb] = Date.now();\n\n        // 检测变化率\n        const rateAction = checkRateChange(yb, ybValue);\n        if (rateAction === 'rateUnchanged') {\n            messagesToSend.push(generateAlarmMessage(yb, ybValue, 'rateUnchanged'));\n            updatedStatus = true;\n        }\n\n        // 检测上下限和回差\n        const alarmAction = checkAlarmCondition(yb, ybValue);\n        if (alarmAction) {\n            let alarmMsg;\n            if (alarmAction === 'trigger') {\n                // 触发报警\n                alarmMsg = generateAlarmMessage(yb, ybValue, 'trigger');\n                global.set(`${yb}_erro`, `${alarmMsg.payload.s_name} ${alarmMsg.payload.why}`);\n                flow.set(`${yb}_erro`, 1);\n                lastAlarmTimes[yb] = Date.now();\n                lastErroredStates[yb] = true;\n            } else if (alarmAction === 'recover') {\n                // 恢复正常状态\n                alarmMsg = generateAlarmMessage(yb, ybValue, 'recover');\n                flow.set(`${yb}_erro`, 0);\n                global.set(`${yb}_erro`, \"\");\n                lastErroredStates[yb] = false;\n            } else if (alarmAction === 'reset') {\n                // 数据正常，复位状态\n                alarmMsg = generateAlarmMessage(yb, ybValue, 'reset');\n                flow.set(`${yb}_erro`, 0);\n                global.set(`${yb}_erro`, \"\");\n                lastErroredStates[yb] = false;\n            }\n\n            if (alarmMsg) {\n                messagesToSend.push(alarmMsg);\n                updatedStatus = true;\n            }\n        }\n    }\n});\n\n// 保存上下文状态\ncontext.set('lastMessageTimes', lastMessageTimes);\ncontext.set('lastAlarmTimes', lastAlarmTimes);\ncontext.set('lastErroredStates', lastErroredStates);\ncontext.set('lastValues', lastValues);\n\n// 发送消息\nif (updatedStatus) {\n    messagesToSend.forEach((msg) => node.send(msg));\n    return null; // 不返回默认消息，避免重复\n} else {\n    return null; // 状态无变化时，不返回消息\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 540,
        "wires": [
            [
                "1fa2d654b30d0b25"
            ]
        ]
    },
    {
        "id": "1fa2d654b30d0b25",
        "type": "debug",
        "z": "4a8b9d9bc600415f",
        "name": "debug 409",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 540,
        "wires": []
    },
    {
        "id": "10de2f7047c256bc",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "function 192",
        "func": "// 获取数据\nvar tag1 = flow.get([\n    \"yborp2_1\", \"yborp2_2\", \"yborp2_3\", \"yborp2_4\",\n    \"ybdo2_1\", \"ybdo2_2\", \"ybmlss2_1\", \"ybxhhl2_1\", \"ybnwj2_1\"\n]);\nvar out_ll = global.get(\"yhg2\") || 0;\nvar out_lj = global.get(\"yhg2_lj\") || 0;\nvar time = global.get(\"mariaDBTime\") || new Date().toISOString(); // 默认当前时间\n\n// 通用的浮点数转换函数\nfunction parseFloatAndCheckNaN(value) {\n    var parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n}\n\n// 转换数据，避免冗余\nvar parsedTags = tag1.map(parseFloatAndCheckNaN);\n\n// 解构转换后的数据\nvar [\n    yborp2_1, yborp2_2, yborp2_3, yborp2_4,\n    ybdo2_1, ybdo2_2, ybmlss2_1, ybxhhl2_1, ybnwj2_1\n] = parsedTags;\n\nvar ybxn2_1 = 0; // 默认值\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO twoyhg (\n        time, out_ll, out_lj, yborp2_1, yborp2_2, yborp2_3, yborp2_4, \n        ybdo2_1, ybdo2_2, ybmlss2_1, ybxhhl2_1, ybnwj2_1, ybxn2_1\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time, out_ll, out_lj,\n    yborp2_1, yborp2_2, yborp2_3, yborp2_4,\n    ybdo2_1, ybdo2_2, ybmlss2_1, ybxhhl2_1,\n    ybnwj2_1, ybxn2_1\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 400,
        "wires": [
            [
                "a05f5d965a6873ca"
            ]
        ]
    },
    {
        "id": "6c0aeec4d202837c",
        "type": "inject",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1830,
        "y": 400,
        "wires": [
            [
                "10de2f7047c256bc"
            ]
        ]
    },
    {
        "id": "a8b4ac95a7d3a406",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 193",
        "func": "var setfjfl = msg.payload[\"风量反馈\"];\nvar fjfl = msg.payload[\"风机流量\"];\nvar run = msg.payload['系统状态'];\nif (run === 4 || run === 2 || run === 3){\n    flow.set('fjrun1',1)\n}else if(run === 0 || run === 1 || run === 6){\n    flow.set('fjrun1',0)\n}else if(run === 5){\n    flow.set('fjfaul1',1)\n}\nflow.set('setfl1',setfjfl);\nflow.set('fjfl1',fjfl)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "c51cd1417358bfcb",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 194",
        "func": "var setfjfl = msg.payload[\"风量反馈\"];\nvar fjfl = msg.payload[\"风机流量\"];\nvar run = msg.payload['系统状态'];\nif (run === 4 || run === 2 || run === 3){\n    flow.set('fjrun2',1)\n}else if(run === 0 || run === 1 || run === 6){\n    flow.set('fjrun2',0)\n}else if(run === 5){\n    flow.set('fjfaul2',1)\n}\nflow.set('setfl2',setfjfl);\nflow.set('fjfl2',fjfl)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "4373ce7897cbb4bf",
        "type": "switch",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "property": "payload.device",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1#风机自动",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2#风机自动",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3#风机自动",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 350,
        "y": 1020,
        "wires": [
            [],
            [
                "eadeecdc93c81eba"
            ],
            []
        ]
    },
    {
        "id": "4096c69b358ce6ec",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 196",
        "func": "// 获取上下文中的变量 setfl\nvar setfl = flow.get('setfl1');\n\nif (setfl < 90) {\n    msg.payload = 1; // 设置 payload 值\n    return msg; // 返回消息\n}\n\n// 如果 setfl 不在范围内，则程序不执行\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "1e57cb1d97a4e4c9",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 197",
        "func": "// 获取上下文中的变量 setfl\nvar setfl = flow.get('setfl1');\n\n// 判断是否存在该变量并在范围 30-90 之间\nif (setfl >21) {\n    msg.payload = 1; // 设置 payload 值\n    return msg; // 返回消息\n}\n\n// 如果 setfl 不在范围内，则程序不执行\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "a754afc68cbdd3a7",
        "type": "json",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 130,
        "y": 1120,
        "wires": [
            [
                "4373ce7897cbb4bf",
                "634c8fce983e7fcf",
                "1679c704b2633884"
            ]
        ]
    },
    {
        "id": "53382a1301362b26",
        "type": "switch",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "property": "payload.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "加风量",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "减风量",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 1060,
        "wires": [
            [
                "4096c69b358ce6ec"
            ],
            [
                "1e57cb1d97a4e4c9"
            ]
        ]
    },
    {
        "id": "0a7c1e21fdea9e73",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 198",
        "func": "// 获取上下文中的变量 setfl\nvar setfl = flow.get('setfl2');\n\nif (setfl < 90) {\n    msg.payload = 1; // 设置 payload 值\n    return msg; // 返回消息\n}\n\n// 如果 setfl 不在范围内，则程序不执行\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "9e1f21928b89f55e",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 199",
        "func": "// 获取上下文中的变量 setfl\nvar setfl = flow.get('setfl2');\n\n// 判断是否存在该变量并在范围 30-90 之间\nif (setfl >21) {\n    msg.payload = 1; // 设置 payload 值\n    return msg; // 返回消息\n}\n\n// 如果 setfl 不在范围内，则程序不执行\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "1723989c6ea68737",
        "type": "switch",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "property": "payload.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "加风量",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "减风量",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 1100,
        "wires": [
            [
                "0a7c1e21fdea9e73"
            ],
            [
                "9e1f21928b89f55e"
            ]
        ]
    },
    {
        "id": "889b73ed1c9ef4a7",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 202",
        "func": "var setfjfl = msg.payload[\"风量反馈\"];\nvar fjfl = msg.payload[\"风机流量\"];\nvar run = msg.payload['系统状态'];\nif (run === 4 || run === 2 || run === 3){\n    flow.set('fjrun3',1)\n}else if(run === 0 || run === 1 || run === 6){\n    flow.set('fjrun3',0)\n}else if(run === 5){\n    flow.set('fjrun3',0)\n    flow.set('fjfaul3',1)\n}\nflow.set('setfl3',setfjfl);\nflow.set('fjfl3',fjfl)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "0d7eece39b3df80a",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "pid计算并输出",
        "func": "// 输入数据\nconst {\n    target_oxygen: targetDO,\n    current_oxygen: currentDO,\n    current_airflow: currentAirflow,\n    set_airflow: setAirflow,\n    fan_status: fanStatus,\n    manualControl,\n} = msg.payload;\n\n// 调整参数\nconst step = 1; // 风量调整步长\nconst tolerance = 0.15; // 溶氧允许偏差范围\nconst maxAirflow = 85; // 风量上限\nconst minAirflow = 22; // 风量下限\n\n// 时间参数\nconst shortDelay = 600; // 常规调整的时间间隔\nconst recoveryDelay = 900; // 恢复正常调整的延迟时间\nconst minAirflowTimeout = 1 * 3600; // 最小风量超时停止时间（2小时）\n\n// 获取当前时间（秒）\nconst currentTime = Date.now() / 1000;\n\n// 获取上次调整时间和最小风量时间（存储在 flow.context 中）\nlet lastAdjustmentTime = flow.get('lastAdjustmentTime') || 0;\nlet minAirflowTime = flow.get('minAirflowTime') || 0;\n\n// 获取紧急调整标志位\nlet emergencyExecuted = flow.get('emergencyExecuted') || false;\n\n// 判断风机状态和手动控制状态\nif (fanStatus === 0) {\n    msg.payload = { message: \"风机故障，停止风量调整\" };\n    return msg;\n}\n\nif (manualControl === 0) {\n    msg.payload = { message: \"手动控制停止，风量调整程序停止\" };\n    return msg;\n}\n\n// 检查风量是否处于最小值且超时\nif (setAirflow === minAirflow) {\n    if (minAirflowTime === 0) {\n        // 开始记录最小风量的时间\n        flow.set('minAirflowTime', currentTime);\n    } else if (currentTime - minAirflowTime >= minAirflowTimeout) {\n        // 如果最小风量超时，停止调整程序\n        msg.payload = {\n            message: \"风量最小值超时，程序停止\",\n            current_airflow: setAirflow,\n            current_oxygen: currentDO,\n            target_oxygen: targetDO\n        };\n        flow.set('fj2auto', 0); // 停止调整程序\n        return msg;\n    }\n} else {\n    // 如果风量不是最小值，重置最小风量计时\n    flow.set('minAirflowTime', 0);\n}\n\n// 通用风量调整函数\nconst adjustAirflow = (adjustment, reason) => {\n    let newAirflow = setAirflow + adjustment;\n    newAirflow = Math.max(minAirflow, Math.min(maxAirflow, newAirflow));\n    msg.payload = {\n        new_airflow: newAirflow,\n        adjustment,\n        target_oxygen: targetDO,\n        current_oxygen: currentDO,\n        delay: 0,\n        message: reason\n    };\n    flow.set('lastAdjustmentTime', currentTime);\n    flow.set('emergencyExecuted', true);\n\n    // 延时恢复常规调整\n    setTimeout(() => {\n        flow.set('emergencyExecuted', false);\n    }, recoveryDelay * 1000);\n\n    node.send(msg);\n    return null; // 停止后续逻辑\n};\n\n// 紧急调整逻辑\nif (!emergencyExecuted) {\n    if (currentDO > 2.9) {\n        return adjustAirflow(-step * 2, \"紧急调整：溶氧值过高，风量已减少两个步长\");\n    } else if (currentDO > 2.6) {\n        return adjustAirflow(-step, \"紧急调整：溶氧值过高，风量已减少一个步长\");\n    } else if (currentDO < 2.0) {\n        return adjustAirflow(step * 2, \"紧急调整：溶氧值过低，风量已增加两个步长\");\n    } else if (currentDO < 2.3) {\n        return adjustAirflow(step, \"紧急调整：溶氧值过低，风量已增加一个步长\");\n    }\n}\n\n// 常规调整逻辑\nif (currentTime - lastAdjustmentTime >= shortDelay) {\n    if (Math.abs(targetDO - currentDO) > tolerance) {\n        let airflowAdjustment = 0;\n\n        if (currentDO < targetDO && setAirflow < maxAirflow) {\n            airflowAdjustment = step;\n        } else if (currentDO > targetDO && setAirflow > minAirflow) {\n            airflowAdjustment = -step;\n        } else if (currentDO < targetDO) {\n            msg.payload = { message: \"风量已达上限，无法继续增加\", current_airflow: setAirflow, target_oxygen: targetDO, current_oxygen: currentDO };\n            return msg;\n        } else {\n            msg.payload = { message: \"风量已达下限，无法继续减少\", current_airflow: setAirflow, target_oxygen: targetDO, current_oxygen: currentDO };\n            return msg;\n        }\n\n        // 调整风量\n        let newAirflow = setAirflow + airflowAdjustment;\n        newAirflow = Math.max(minAirflow, Math.min(maxAirflow, newAirflow));\n        msg.payload = {\n            new_airflow: newAirflow,\n            adjustment: airflowAdjustment,\n            target_oxygen: targetDO,\n            current_oxygen: currentDO,\n            message: \"常规调整：风量已调整\"\n        };\n\n        flow.set('lastAdjustmentTime', currentTime);\n        node.send(msg);\n    }\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 740,
        "wires": [
            [
                "843dd70231981aaa",
                "b164edbd73d50e69",
                "08700ee926c9eff9",
                "60e0f4c27c790546"
            ]
        ]
    },
    {
        "id": "9c64b22d1803c61b",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "获取参数",
        "func": "var do2_1 = flow.get( \"ybdo2_1\",);\nvar fj = flow.get(['setfl2','fjfl2'])\nvar fj_dv = flow.get(['fjrun2','fjfaul2'])\nvar fj_auto = flow.get('fj2auto')\nif(fj_dv[0]=== 1){\n    var status = 1\n}else if(fj_dv[0]===0 || fj_dv[1] === 1){\n    status = 0\n}\n\nmsg.payload = {\n   target_oxygen:2.5,\n   current_oxygen:do2_1,\n    current_airflow:fj[1],\n    set_airflow:fj[0],\n    fan_status:status,\n    manualControl:fj_auto\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 740,
        "wires": [
            [
                "0d7eece39b3df80a"
            ]
        ]
    },
    {
        "id": "d60a8235d3428c91",
        "type": "inject",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "9c64b22d1803c61b"
            ]
        ]
    },
    {
        "id": "843dd70231981aaa",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "获取输出值",
        "func": "// 获取输入数据\nvar adjustment = msg.payload.adjustment; // 调整后的风量（正数或负数）\n\n// 定义输出点\nvar output1 = []; // 第一个输出端口（增加风量）\nvar output2 = []; // 第二个输出端口（减少风量）\n\n// 判断调整后的风量并生成相应的输出\nif (adjustment > 0) {\n    // 如果是正数，输出到第一个端口（增加风量）\n    for (var i = 0; i < adjustment; i++) {\n        output1.push({ payload: \"增加风量\" }); // 每秒输出一次\"增加风量\"\n    }\n} else if (adjustment < 0) {\n    // 如果是负数，输出到第二个端口（减少风量）\n    for (var i = 0; i < Math.abs(adjustment); i++) {\n        output2.push({ payload: \"减少风量\" }); // 每秒输出一次\"减少风量\"\n    }\n}\n\n// 设置定时器，每秒输出一次相应的风量调整指令\nvar counter = 0; // 计数器，用来控制每秒输出一次\nvar interval = setInterval(function () {\n    if (output1.length > 0) {\n        // 输出到第一个端口（增加风量）\n        node.send([output1.shift(), null]); // 第一个端口，发送增加风量\n    } else if (output2.length > 0) {\n        // 输出到第二个端口（减少风量）\n        node.send([null, output2.shift()]); // 第二个端口，发送减少风量\n    } else {\n        // 如果没有待发送的数据，则停止定时器\n        clearInterval(interval);\n    }\n}, 2000); // 每秒一次\n\n// 返回空，实际输出在定时器中进行\nreturn null;\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 700,
        "wires": [
            [
                "0a7c1e21fdea9e73"
            ],
            [
                "9e1f21928b89f55e"
            ]
        ]
    },
    {
        "id": "634c8fce983e7fcf",
        "type": "switch",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "property": "payload.name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1#风机风量",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2#风机风量",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3#风机风量",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 350,
        "y": 1080,
        "wires": [
            [
                "53382a1301362b26"
            ],
            [
                "1723989c6ea68737"
            ],
            [
                "9b24c968db21e23f"
            ]
        ]
    },
    {
        "id": "eadeecdc93c81eba",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "风机自动赋值",
        "func": "var a = flow.get('fj2auto')\nif (msg.payload.device === \"2#风机自动\" && a === 0 ){\n    flow.set('fj2auto', 1);\n} else if (msg.payload.device === \"2#风机自动\" && a === 1){\n    flow.set('fj2auto', 0);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "b164edbd73d50e69",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "写入数据库",
        "func": "// 提取消息中的数据\nconst targetDO = msg.payload.target_oxygen; // 目标溶氧\nconst currentDO = msg.payload.current_oxygen; // 实时溶氧\nconst currentAirflow = msg.payload.current_airflow; // 实时风量\nconst setAirflow = msg.payload.set_airflow; // 设定风量\nconst adjustment = msg.payload.adjustment; // 风量调整幅度\nconst newAirflow = msg.payload.new_airflow; // 调整后的新风量\nconst message = msg.payload.message; // 调整信息，通常是关于当前风量调整的说明\nvar time = global.get(\"mariaDBTime\");\n\n// 发送 SQL 查询到数据库节点\nmsg.topic = `\n    INSERT INTO airflow (time, target_oxygen, current_oxygen, current_airflow, set_airflow, adjustment, new_airflow, message)\n    VALUES (?, ?, ?, ?, ?, ?, ?, ?);\n`; // 将 SQL 查询语句作为 msg.topic\nmsg.payload = [time, targetDO, currentDO, currentAirflow, setAirflow, adjustment, newAirflow, message]; // 将参数数组作为 msg.payload，供数据库节点执行\n\nreturn msg; // 返回消息，传递到数据库节点执行插入操作\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 740,
        "wires": [
            [
                "765399ccd696c53e"
            ]
        ]
    },
    {
        "id": "f291735a6badd02c",
        "type": "link in",
        "z": "4a8b9d9bc600415f",
        "g": "a4d78c1c37c8fd91",
        "name": "link in mysql",
        "links": [
            "765399ccd696c53e"
        ],
        "x": 2275,
        "y": 340,
        "wires": [
            [
                "a05f5d965a6873ca"
            ]
        ]
    },
    {
        "id": "765399ccd696c53e",
        "type": "link out",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "f291735a6badd02c"
        ],
        "x": 815,
        "y": 760,
        "wires": []
    },
    {
        "id": "b78c25f95400e15c",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "pid计算并输出",
        "func": "// 输入数据\nconst targetDO = msg.payload.target_oxygen; // 目标溶氧\nconst currentDO = msg.payload.current_oxygen; // 实时溶氧\nlet currentAirflow = msg.payload.current_airflow; // 实时风量\nconst setAirflow = msg.payload.set_airflow; // 设定风量\nconst fanStatus = msg.payload.fan_status; // 风机状态，1 为运行，0 为故障\nconst manualControl = flow.get('fj2auto'); // 手动控制，1 为执行，0 为停止\n\n// 调整参数\nconst step = 1; // 风量调整步长\nconst tolerance = 0.15; // 溶氧允许偏差范围\nconst maxAirflow = 85; // 风量上限\nconst minAirflow = 22; // 风量下限\n\n// 延迟时间（短延迟观测时间，秒）\nconst shortDelay = 900; \n\n// 获取当前时间（秒）\nconst currentTime = Date.now() / 1000; // 获取当前时间（秒）\n\n// 获取上次调整时间（存储在 flow.context 中）\nlet lastAdjustmentTime = flow.get('lastAdjustmentTime') || 0;\n\n// 获取紧急调整标志位\nlet emergencyAdjust = flow.get('emergencyAdjust') || false;\n\n// 判断是否需要调整风量\nlet airflowAdjustment = 0;\n\n// 判断风机状态\nif (fanStatus === 0) {\n    msg.payload = { message: \"风机故障，停止风量调整\" };\n    return msg;\n}\n\n// 判断手动控制\nif (manualControl === 0) {\n    msg.payload = { message: \"手动控制停止，风量调整程序停止\" };\n    return msg;\n}\n\n// 紧急处理逻辑：溶氧值低于 2.3 时触发一次紧急调整\nif (currentDO < 2.3 && !emergencyAdjust) {\n    // 增加风量一步长\n    airflowAdjustment = step;\n    let newAirflow = setAirflow + airflowAdjustment;\n\n    // 检查是否已达上限\n    if (setAirflow >= maxAirflow) {\n        msg.payload = { \n            message: \"溶氧值过低，风量已达上限，暂停增加风量\",\n            current_airflow: setAirflow,\n            current_oxygen: currentDO\n        };\n        flow.set('emergencyAdjust', false); // 不锁定功能，待条件变化后可继续调整\n        return msg;\n    }\n\n    // 限制风量范围\n    newAirflow = Math.min(maxAirflow, newAirflow);\n\n    // 输出紧急调整结果\n    msg.payload = {\n        new_airflow: newAirflow,\n        adjustment: airflowAdjustment,\n        target_oxygen: targetDO,\n        current_oxygen: currentDO,\n        delay: 0, // 紧急调整无延迟\n        message: \"紧急调整：溶氧值过低\"\n    };\n\n    // 标记紧急调整已执行\n    flow.set('emergencyAdjust', true);\n    flow.set('lastAdjustmentTime', currentTime);\n\n    // 立即发送紧急调整消息\n    node.send(msg);\n    return null; // 停止后续逻辑\n}\n\n// 常规逻辑：仅当时间间隔大于 shortDelay 才调整风量\nif (currentTime - lastAdjustmentTime >= shortDelay) {\n    // 重置紧急调整标志位\n    flow.set('emergencyAdjust', false);\n\n    // 判断是否需要调整\n    if (Math.abs(targetDO - currentDO) > tolerance) {\n        if (currentDO < targetDO) {\n            // 增加风量\n            if (setAirflow < maxAirflow) {\n                airflowAdjustment = step; // 增加风量\n            } else {\n                msg.payload = { \n                    message: \"风量已达上限，无法继续增加\",\n                    current_airflow: setAirflow,\n                    target_oxygen: targetDO,\n                    current_oxygen: currentDO\n                };\n                return msg;\n            }\n        } else {\n            // 减少风量\n            if (setAirflow > minAirflow) {\n                airflowAdjustment = -step; // 减少风量\n            } else {\n                msg.payload = { \n                    message: \"风量已达下限，无法继续减少\",\n                    current_airflow: setAirflow,\n                    target_oxygen: targetDO,\n                    current_oxygen: currentDO\n                };\n                return msg;\n            }\n        }\n\n        // 计算新的设定风量\n        let newAirflow = setAirflow + airflowAdjustment;\n\n        // 限制风量范围\n        newAirflow = Math.max(minAirflow, Math.min(maxAirflow, newAirflow));\n\n        // 输出结果\n        msg.payload = {\n            new_airflow: newAirflow,\n            adjustment: airflowAdjustment,\n            target_oxygen: targetDO,\n            current_oxygen: currentDO,\n            delay: shortDelay,\n            message: \"常规调整：风量已更新\"\n        };\n\n        // 更新上次调整时间\n        flow.set('lastAdjustmentTime', currentTime);\n\n        // 延迟执行\n        setTimeout(() => {\n            node.send(msg);\n        }, shortDelay * 1000); // 转换为毫秒\n    }\n} else {\n    \n    return null; // 时间间隔未到，直接跳过\n}\n\nreturn null; // 程序结束\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "1679c704b2633884",
        "type": "switch",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "property": "payload.device",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1#风机",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2#风机",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3#风机",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 350,
        "y": 1320,
        "wires": [
            [
                "359802380d9eaf3f",
                "360d417c52119f2e"
            ],
            [
                "463766892ed2ebbf",
                "e908189f44a62160"
            ],
            [
                "9b18392e91dbc48a",
                "38e984285fbbcbd4"
            ]
        ]
    },
    {
        "id": "360d417c52119f2e",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 209",
        "func": "var a = flow.get('fjrun1')\nif (a === 1  ){\n    msg.payload = 100\n    return msg\n} else {\n    return  null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "359802380d9eaf3f",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 210",
        "func": "var a = flow.get('fjrun1')\nif (a === 0  ){\n    msg.payload = 100\n    return msg\n} else {\n    return null\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "e908189f44a62160",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 211",
        "func": "var a = flow.get('fjrun2')\nif (a === 1  ){\n    msg.payload = 100\n    return msg\n} else {\n    return  null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "463766892ed2ebbf",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 212",
        "func": "var a = flow.get('fjrun2')\nif (a === 0  ){\n    msg.payload = 100\n    return msg\n} else {\n    return null\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "76e5859d5a6a8903",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 213",
        "func": "// 输入数据\nconst targetDO = msg.payload.target_oxygen; // 目标溶氧\nconst currentDO = msg.payload.current_oxygen; // 实时溶氧\nlet currentAirflow = msg.payload.current_airflow; // 实时风量\nconst setAirflow = msg.payload.set_airflow; // 设定风量\nconst fanStatus = msg.payload.fan_status; // 风机状态，1 为运行，0 为故障\nconst manualControl = msg.payload.manualControl; // 手动控制，1 为执行，0 为停止\n\n// 调整参数\nconst step = 1; // 风量调整步长\nconst tolerance = 0.15; // 溶氧允许偏差范围\nconst maxAirflow = 85; // 风量上限\nconst minAirflow = 22; // 风量下限\n\n// 延迟时间（短延迟观测时间，秒）\nconst shortDelay = 600; \nconst recoveryDelay = 900; // 恢复正常时的延迟时间，单位为秒（例如：30分钟延迟恢复常规调整）\n\n// 获取当前时间（秒）\nconst currentTime = Date.now() / 1000; // 获取当前时间（秒）\n\n// 获取上次调整时间（存储在 flow.context 中）\nlet lastAdjustmentTime = flow.get('lastAdjustmentTime') || 0;\n\n// 获取紧急调整标志位\nlet emergencyAdjust = flow.get('emergencyAdjust') || false;\n\n// 获取紧急调整已执行标志位\nlet emergencyExecuted = flow.get('emergencyExecuted') || false;\n\n// 判断是否需要调整风量\nlet airflowAdjustment = 0;\n\n// 判断风机状态\nif (fanStatus === 0) {\n    msg.payload = { message: \"风机故障，停止风量调整\" };\n    return msg;\n}\n\n// 判断手动控制\nif (manualControl === 0) {\n    msg.payload = { message: \"手动控制停止，风量调整程序停止\" };\n    return msg;\n}\n\n// 1. 紧急调整逻辑：溶氧值超过 2.9 时，紧急减少风量 2 步\nif (currentDO > 2.9 && !emergencyExecuted) {\n    airflowAdjustment = -step * 2; // 紧急减少两个步长\n    let newAirflow = setAirflow + airflowAdjustment;\n\n    // 限制风量范围\n    newAirflow = Math.max(minAirflow, Math.min(maxAirflow, newAirflow));\n\n    msg.payload = {\n        new_airflow: newAirflow,\n        adjustment: airflowAdjustment,\n        target_oxygen: targetDO,\n        current_oxygen: currentDO,\n        delay: 0, // 紧急调整无延迟\n        message: \"紧急调整：溶氧值过高，风量已减少两个步长\"\n    };\n\n    // 标记紧急调整已执行\n    flow.set('emergencyExecuted', true);  // 防止重复执行\n    flow.set('lastAdjustmentTime', currentTime);\n\n    // 立即发送紧急调整消息\n    node.send(msg);\n    \n    // 执行后立刻恢复常规调整程序（延时恢复）\n    setTimeout(() => {\n        flow.set('emergencyExecuted', false);  // 恢复常规调整\n    }, recoveryDelay * 1000); // 延时恢复常规调整\n\n    return null; // 停止后续逻辑\n}\n\n// 2. 溶氧值超过 2.6 时，紧急减少风量 1 步\nif (currentDO > 2.6 && currentDO <= 2.9 && !emergencyExecuted) {\n    airflowAdjustment = -step; // 紧急减少一个步长\n    let newAirflow = setAirflow + airflowAdjustment;\n\n    // 限制风量范围\n    newAirflow = Math.max(minAirflow, Math.min(maxAirflow, newAirflow));\n\n    msg.payload = {\n        new_airflow: newAirflow,\n        adjustment: airflowAdjustment,\n        target_oxygen: targetDO,\n        current_oxygen: currentDO,\n        delay: 0, // 紧急调整无延迟\n        message: \"紧急调整：溶氧值过高，风量已减少一个步长\"\n    };\n\n    // 标记紧急调整已执行\n    flow.set('emergencyExecuted', true);  // 防止重复执行\n    flow.set('lastAdjustmentTime', currentTime);\n\n    // 立即发送紧急调整消息\n    node.send(msg);\n    \n    // 执行后立刻恢复常规调整程序（延时恢复）\n    setTimeout(() => {\n        flow.set('emergencyExecuted', false);  // 恢复常规调整\n    }, recoveryDelay * 1000); // 延时恢复常规调整\n\n    return null; // 停止后续逻辑\n}\n\n// 3. 溶氧值小于 2.0 时，紧急增加风量 2 步\nif (currentDO < 2.0 && !emergencyExecuted) {\n    airflowAdjustment = step * 2; // 紧急增加两个步长\n    let newAirflow = setAirflow + airflowAdjustment;\n\n    // 限制风量范围\n    newAirflow = Math.max(minAirflow, Math.min(maxAirflow, newAirflow));\n\n    msg.payload = {\n        new_airflow: newAirflow,\n        adjustment: airflowAdjustment,\n        target_oxygen: targetDO,\n        current_oxygen: currentDO,\n        delay: 0, // 紧急调整无延迟\n        message: \"紧急调整：溶氧值过低，风量已增加两个步长\"\n    };\n\n    // 标记紧急调整已执行\n    flow.set('emergencyExecuted', true);  // 防止重复执行\n    flow.set('lastAdjustmentTime', currentTime);\n\n    // 立即发送紧急调整消息\n    node.send(msg);\n    \n    // 执行后立刻恢复常规调整程序（延时恢复）\n    setTimeout(() => {\n        flow.set('emergencyExecuted', false);  // 恢复常规调整\n    }, recoveryDelay * 1000); // 延时恢复常规调整\n\n    return null; // 停止后续逻辑\n}\n\n// 4. 溶氧值小于 2.3 时，紧急增加风量 1 步\nif (currentDO < 2.3 && currentDO >= 2.0 && !emergencyExecuted) {\n    airflowAdjustment = step; // 紧急增加一个步长\n    let newAirflow = setAirflow + airflowAdjustment;\n\n    // 限制风量范围\n    newAirflow = Math.max(minAirflow, Math.min(maxAirflow, newAirflow));\n\n    msg.payload = {\n        new_airflow: newAirflow,\n        adjustment: airflowAdjustment,\n        target_oxygen: targetDO,\n        current_oxygen: currentDO,\n        delay: 0, // 紧急调整无延迟\n        message: \"紧急调整：溶氧值过低，风量已增加一个步长\"\n    };\n\n    // 标记紧急调整已执行\n    flow.set('emergencyExecuted', true);  // 防止重复执行\n    flow.set('lastAdjustmentTime', currentTime);\n\n    // 立即发送紧急调整消息\n    node.send(msg);\n    \n    // 执行后立刻恢复常规调整程序（延时恢复）\n    setTimeout(() => {\n        flow.set('emergencyExecuted', false);  // 恢复常规调整\n    }, recoveryDelay * 1000); // 延时恢复常规调整\n\n    return null; // 停止后续逻辑\n}\n\n// 5. 常规调整：溶氧值在正常范围内时\nif (currentTime - lastAdjustmentTime >= shortDelay) {\n    if (Math.abs(targetDO - currentDO) > tolerance) {\n        if (currentDO < targetDO) {\n            // 增加风量\n            if (setAirflow < maxAirflow) {\n                airflowAdjustment = step; // 增加风量\n            } else {\n                msg.payload = { \n                    message: \"风量已达上限，无法继续增加\",\n                    current_airflow: setAirflow,\n                    target_oxygen: targetDO,\n                    current_oxygen: currentDO\n                };\n                return msg;\n            }\n        } else {\n            // 减少风量\n            if (setAirflow > minAirflow) {\n                airflowAdjustment = -step; // 减少风量\n            } else {\n                msg.payload = { \n                    message: \"风量已达下限，无法继续减少\",\n                    current_airflow: setAirflow,\n                    target_oxygen: targetDO,\n                    current_oxygen: currentDO\n                };\n                return msg;\n            }\n        }\n    }\n\n    // 调整风量并发送消息\n    let newAirflow = setAirflow + airflowAdjustment;\n    newAirflow = Math.max(minAirflow, Math.min(maxAirflow, newAirflow));\n\n    msg.payload = {\n        new_airflow: newAirflow,\n        adjustment: airflowAdjustment,\n        target_oxygen: targetDO,\n        current_oxygen: currentDO,\n        message: \"常规调整：风量已调整\"\n    };\n\n    flow.set('lastAdjustmentTime', currentTime);\n    node.send(msg);\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "3611b0294495c7d3",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "停风机",
        "func": "var mes = msg.payload.message;\nvar fj = flow.get('fjrun2')\nvar a = flow.get(\"fj2auto\");\nif (mes === \"风量最小值超时，程序停止\" && a === 0 && fj === 1){\n    msg.payload = 100;\n    return msg\n}else{\n    return null\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 780,
        "wires": [
            [
                "04b5d06012f01fda"
            ]
        ]
    },
    {
        "id": "04b5d06012f01fda",
        "type": "delay",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 840,
        "wires": [
            [
                "33d29784be1d3a7d"
            ]
        ]
    },
    {
        "id": "33d29784be1d3a7d",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "开风机",
        "func": "\nvar fj = flow.get('fjrun2')\nvar a = flow.get(\"fj2auto\");\nif (fj === 0 && a === 0){\n    msg.payload = 100;\n    return msg\n}else{\n    return null\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 840,
        "wires": [
            [
                "b6315c446b194ed1"
            ]
        ]
    },
    {
        "id": "b6315c446b194ed1",
        "type": "delay",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "hours",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 900,
        "wires": [
            [
                "184ccfc66eac21be"
            ]
        ]
    },
    {
        "id": "184ccfc66eac21be",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "开风机自动调整",
        "func": "flow.set(\"fj2auto\",1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "08700ee926c9eff9",
        "type": "delay",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 780,
        "wires": [
            [
                "3611b0294495c7d3"
            ]
        ]
    },
    {
        "id": "5c800a8bd8bb3890",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 214",
        "func": "var setfjfl = msg.payload[\"风量反馈\"];\nvar fjfl = msg.payload[\"风机流量\"];\nvar run = msg.payload['系统状态'];\nif (run === 4 || run === 2 || run === 3){\n    flow.set('fjrun3',1)\n}else if(run === 0 || run === 1 || run === 6){\n    flow.set('fjrun3',0)\n}else if(run === 5){\n    flow.set('fjfaul3',1)\n}\nflow.set('setfl3',setfjfl);\nflow.set('fjfl3',fjfl)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "db6d1e645df9ca55",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 215",
        "func": "// 获取上下文中的变量 setfl\nvar setfl = flow.get('setfl3');\n\nif (setfl < 90) {\n    msg.payload = 1; // 设置 payload 值\n    return msg; // 返回消息\n}\n\n// 如果 setfl 不在范围内，则程序不执行\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "ac717cf069c1a471",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 216",
        "func": "// 获取上下文中的变量 setfl\nvar setfl = flow.get('setfl3');\n\n// 判断是否存在该变量并在范围 30-90 之间\nif (setfl >21) {\n    msg.payload = 1; // 设置 payload 值\n    return msg; // 返回消息\n}\n\n// 如果 setfl 不在范围内，则程序不执行\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "9b24c968db21e23f",
        "type": "switch",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "",
        "property": "payload.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "加风量",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "减风量",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 1140,
        "wires": [
            [
                "db6d1e645df9ca55"
            ],
            [
                "ac717cf069c1a471"
            ]
        ]
    },
    {
        "id": "38e984285fbbcbd4",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 217",
        "func": "var a = flow.get('fjrun3')\nif (a === 1  ){\n    msg.payload = 100\n    return msg\n} else {\n    return  null;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "9b18392e91dbc48a",
        "type": "function",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "function 218",
        "func": "var a = flow.get('fjrun3')\nif (a === 0  ){\n    msg.payload = 100\n    return msg\n} else {\n    return null\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "60e0f4c27c790546",
        "type": "debug",
        "z": "4a8b9d9bc600415f",
        "g": "bebffb8be31ecc1a",
        "name": "debug 428",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 740,
        "wires": []
    },
    {
        "id": "cb75351777f3b4ae",
        "type": "debug",
        "z": "4a8b9d9bc600415f",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 140,
        "wires": []
    },
    {
        "id": "f4db883a7e9eadbd",
        "type": "mqtt in",
        "z": "e69701cd31309cd3",
        "name": "",
        "topic": "/PubTopic111",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 200,
        "wires": [
            [
                "18f5eb48b7f36fed",
                "6930431f3dd49e89",
                "6c0068cf8d2a57d2",
                "c3ac5af7f7ae13b3",
                "22c6eb9997493ff1",
                "40ae4c204b1f6dc4",
                "d6fa8cc029911df9"
            ]
        ]
    },
    {
        "id": "18f5eb48b7f36fed",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "排口流量",
        "func": "var aaa = msg.payload.b_ll;\nflow.set(\"b_ll1\",aaa);\nmsg.payload = aaa\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 120,
        "wires": [
            [
                "27ef3aaa9d1ffec9"
            ]
        ]
    },
    {
        "id": "6930431f3dd49e89",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "回用流量",
        "func": "var aaa = msg.payload.aio2;\nvar bbb = aaa - 4000;\nvar ccc = 2000 / 16000;\nvar lqll1 = bbb * ccc;\nvar lqll = lqll1*3.6\nmsg.payload = parseFloat(lqll.toFixed(4));\nflow.set('h_ll1',msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 200,
        "wires": [
            [
                "c1805b877d33bc72"
            ]
        ]
    },
    {
        "id": "67bc8cb0ae7bf766",
        "type": "inject",
        "z": "e69701cd31309cd3",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 740,
        "wires": [
            [
                "ea608c2ce9e42934",
                "f3467d5916f69246",
                "5d391cc7dbc31ec1",
                "b854fdebea86d1b9",
                "b82801082b1c8bcc",
                "40b604123cf6d9eb",
                "c0b4eb90bca14c8f",
                "4e5b1253e63b6d6d",
                "e72672e1c8cefd21",
                "95eb3d2cc85cb4a8",
                "f5b832fb073882f3"
            ]
        ]
    },
    {
        "id": "f5b832fb073882f3",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "总量累计",
        "func": "\nvar gdlqll1 = flow.get(\"zs_ll1\");\nvar gdlqll =gdlqll1/3.6;\n// 计算累积流量\nif (!flow.get(\"lwjioutlqll34\")) {\n    flow.set(\"lwjioutlqll34\", 0);\n};\n\n\nvar cumu = flow.get(\"lwjioutlqll34\");\nvar cumu1 = cumu + gdlqll;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjioutlqll34\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\n\n// 将结果设置为保留两位小数\n\nvar zslj = parseFloat(cumu3.toFixed(2));\nglobal.set(\"zslj\", zslj);\nflow.set(\"zs_lj\", zslj);\nreturn msg; // 确保返回 msg 对象\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "b82801082b1c8bcc",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "外用累计1",
        "func": "\n\nvar wy1 = flow.get('wy_ll1');\nvar wy1_1 = wy1/3.6;\nif (!flow.get(\"gd5\")) {\n    flow.set(\"gd5\", 0);\n};\nvar a = flow.get(\"gd5\");\nvar a1 = a + wy1_1;\nvar a2 = a1 / 1000;\nflow.set(\"gd5\", a1);\nvar a3 = a2.toFixed(3)\nflow.set(\"wy01lwji1\", a2.toFixed(3));\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "22c6eb9997493ff1",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "总流量",
        "func": "// 从消息载荷中获取 aio2 和 b_ll 的值\nvar h_ll = flow.get('h_ll1') || 0; // 默认为 0\nvar b_ll = flow.get('b_ll1') || 0; // 默认为 0\nvar gdlqll = flow.get('gd1') || 0; // 默认为 0\nvar wyll1 = flow.get(\"wy_ll1\") || 0; // 默认为 0\nvar wyll2 = global.get(\"wy_ll2\") || 0; // 默认为 0\nvar fx_ll = flow.get(\"fx_ll\") || 0; // 默认为 0\nvar wyll3 = global.get(\"wy_ll3\") || 0; // 默认为 0\n\n// 计算 zs_ll\nvar zs_ll = h_ll + gdlqll + b_ll + wyll1 + wyll2 + fx_ll + wyll3;\n\n// 确保 zs_ll 不是 NaN，若是则默认为 0\nif (isNaN(zs_ll)) {\n    zs_ll = 0;\n}\n\n// 将 zs_ll 设置为小数并更新消息载荷\nmsg.payload = parseFloat(zs_ll.toFixed(2));\n\n// 更新流变量\nflow.set(\"zs_ll1\", zs_ll);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "eda4aa7e7f8e6cbe",
        "type": "websocket out",
        "z": "e69701cd31309cd3",
        "name": "",
        "server": "9c1d2fe6feb24f0c",
        "client": "",
        "x": 560,
        "y": 440,
        "wires": []
    },
    {
        "id": "5c53d06b1b1f365d",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "websocket",
        "func": "// 从流变量中获取所需的值\nvar tags = flow.get(['b_ll1', 'h_ll1', 'zs_ll1', 'zs_lj', 'h_lj', 'b_lj', 'b_ll2', 'b1_lj']);\nvar gdlqll = flow.get(\"gd1\"); // 确保有默认值\nvar wy01 = flow.get(\"wy_ll1\"); // 确保有默认值\nvar wy02 = flow.get(\"wy_ll2\"); // 确保有默认值\nvar wylj = flow.get(\"wylwji1\");\nvar fx_ll = flow.get(\"fx_ll\");\nvar fx_lj = flow.get(\"fx_lj\");\nvar wy03 = flow.get(\"wy_ll3\") ;\nvar wyll = gdlqll + wy01 + wy02 + wy03;\n\n// 将获取的数据转换为浮点数，并检查 NaN 值\nfunction parseFloatAndCheckNaN(value) {\n    var parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n}\n\n// 封装 toFixed 的安全调用\nfunction safeToFixed(value, decimalPlaces) {\n    return (typeof value === 'number' && !isNaN(value)) ? value.toFixed(decimalPlaces) : '0.00';\n}\n\n// 转换为浮点数并进行检查\nvar bll = safeToFixed(parseFloatAndCheckNaN(tags[0]), 2);\nvar hll = safeToFixed(parseFloatAndCheckNaN(tags[1]), 2);\nvar zsll1 = safeToFixed(parseFloatAndCheckNaN(tags[2]), 2);\nvar zs_lj = safeToFixed(parseFloatAndCheckNaN(tags[3]), 2);\nvar h_lj = safeToFixed(parseFloatAndCheckNaN(tags[4]), 2);\nvar b_lj = safeToFixed(parseFloatAndCheckNaN(tags[5]), 2);\nvar b1_ll = safeToFixed(parseFloatAndCheckNaN(tags[6]), 2);\nvar b1_lj = safeToFixed(parseFloatAndCheckNaN(tags[7]), 2);\nvar wy_ll = safeToFixed(parseFloatAndCheckNaN(wyll), 2);\nvar wy_lj = safeToFixed(parseFloatAndCheckNaN(wylj), 2);\n\n// 在构建最终消息之前，确保所有字段都是有效的\nvar indata = [\n    { name: '回用流量', data: hll, dw: 'm3/h', alarm: 0 },\n    { name: '回用量累计', data: h_lj, dw: 'm³', alarm: 0 },\n    { name: '排口流量', data: bll, dw: 'm3/h', alarm: 0 },\n    { name: '排口量累计', data: b_lj, dw: 'm³', alarm: 0 },\n    { name: '反洗流量', data: fx_ll, dw: 'm3/h', alarm: 0 },\n    { name: '反洗量累计', data: fx_lj, dw: 'm³', alarm: 0 },\n    { name: '外用流量', data: wy_ll, dw: 'm3/h', alarm: 0 },\n    { name: '外用量累计', data: wy_lj, dw: 'm³', alarm: 0 },\n    { name: '总出水量', data: zsll1, dw: 'm3/h', alarm: 1 },\n    { name: '总量累计', data: zs_lj, dw: 'm³', alarm: 0 },\n    { name: '正源-光大', data: safeToFixed(gdlqll, 2), dw: 'm3/h', alarm: 0 },\n    { name: '中水—环卫1', data: safeToFixed(wy01, 2), dw: 'm3/h', alarm: 0 },\n    { name: '正源-环卫2', data: safeToFixed(wy02, 2), dw: 'm3/h', alarm: 0 },\n    { name: '正源-冲洗', data: safeToFixed(wy03, 2), dw: 'm3/h', alarm: 0 },\n];\n\n// 构建最终的消息负载\nmsg.payload = {\n    indata,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 440,
        "wires": [
            [
                "eda4aa7e7f8e6cbe"
            ]
        ]
    },
    {
        "id": "0e7279ec3caa46a0",
        "type": "inject",
        "z": "e69701cd31309cd3",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 460,
        "wires": [
            [
                "5c53d06b1b1f365d"
            ]
        ]
    },
    {
        "id": "ea608c2ce9e42934",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "回用累计",
        "func": "\nvar gdlqll1 = flow.get(\"h_ll1\");\nvar gdlqll =gdlqll1/3.6;\n// 计算累积流量\nif (!flow.get(\"lwjioutlqll2\")) {\n    flow.set(\"lwjioutlqll2\", 0);\n};\nvar cumu = flow.get(\"lwjioutlqll2\");\nvar cumu1 = cumu + gdlqll;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjioutlqll2\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nflow.set(\"h_lj\", cumu3);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "f3467d5916f69246",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "排口累计",
        "func": "\nvar gdlqll1 = flow.get(\"b_ll1\");\nvar gdlqll = gdlqll1/3.6;\n// 计算累积流量\nif (!flow.get(\"lwjioutlqll3\")) {\n    flow.set(\"lwjioutlqll3\", 0);\n};\n\n\nvar cumu = flow.get(\"lwjioutlqll3\");\nvar cumu1 = cumu + gdlqll;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjioutlqll3\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nflow.set(\"b_lj\", cumu3);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "40b604123cf6d9eb",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "定时",
        "func": "var time = global.get(\"cstTime\"); // 获取时间对象\nvar hour = time.hour;\nvar minute = time.minute;\nvar second = time.second;\n\n// 检查是否为指定的时间 10:47:00\nif (hour === 0 && minute === 0 && second === 0) {\n    msg.payload = 0;\n    return msg; \n} else {\n    return null; \n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 840,
        "wires": [
            [
                "e7a44069b0be0b3a"
            ]
        ]
    },
    {
        "id": "e7a44069b0be0b3a",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "累计清零",
        "func": "var rest = msg.payload;\nvar variableNames = [\n    \"lwjioutlqll1_1\", \"lwjioutlqll2\", \"lwjioutlqll3\", \"lwjioutlqll4\", \"lwjioutlqll5\",\n    \"gd3\", \"gd5\", \"gd6\", \"gd7\",\"lwjioutlqll34\"\n];\n\nvariableNames.forEach(function(name) {\n    flow.set(name, rest);\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "5d391cc7dbc31ec1",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "超越累计",
        "func": "\nvar gdlqll1 = flow.get(\"b_ll2\");\nvar gdlqll =gdlqll1/3.6;\n// 计算累积流量\nif (!flow.get(\"lwjioutlqll4\")) {\n    flow.set(\"lwjioutlqll4\", 0);\n};\n\n\nvar cumu = flow.get(\"lwjioutlqll4\");\nvar cumu1 = cumu + gdlqll;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjioutlqll4\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nflow.set(\"b1_lj\", cumu3);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e8fd29e0fdb3143d",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "websocket",
        "func": "// 从全局和流中获取数据\nvar time = global.get(\"mariaDBTime\"); \nvar tags = flow.get(['b_ll1', 'b_ll2', 'h_ll1', 'zs_ll1', 'zs_lj', 'h_lj', 'b_lj', 'b1_lj']);\nvar gdlqll = flow.get(\"gd1\");\nvar wy01 = flow.get(\"wy_ll1\");\nvar wy02 = global.get(\"wy_ll2\");\nvar wy03 = global.get(\"wy_ll3\");\n\n// 计算总和\nvar wyll = gdlqll + wy01 + wy02 + wy03;\nvar wylj = flow.get(\"wylwji1\");\nvar fx_ll = flow.get(\"fx_ll\");\nvar fx_lj = flow.get(\"fx_lj\");\n\n// 检查并转换为浮点数，避免 NaN\nvar wy_ll = parseFloatAndCheckNaN(wyll).toFixed(2);\nvar wy_lj = parseFloatAndCheckNaN(wylj).toFixed(2);\n\n// 将获取的数据转换为浮点数，并检查NaN值\nfunction parseFloatAndCheckNaN(value) {\n    var parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n}\n\n// 转换为浮点数并进行检查\nvar pk_ll = parseFloatAndCheckNaN(tags[0]).toFixed(2);\nvar hy_ll = parseFloatAndCheckNaN(tags[2]).toFixed(2);\nvar z_ll = parseFloatAndCheckNaN(tags[3]).toFixed(2);\nvar z_lj = parseFloatAndCheckNaN(tags[4]).toFixed(2);\nvar cy_ll = parseFloatAndCheckNaN(tags[1]).toFixed(2);\nvar wy__ll = wy_ll;\nvar fx__ll = fx_ll;\nvar hy_lj = parseFloatAndCheckNaN(tags[5]).toFixed(2);\nvar pk_lj = parseFloatAndCheckNaN(tags[6]).toFixed(2);\nvar wy__lj = wy_lj;\nvar fx__lj = fx_lj;\nvar cy_lj = parseFloatAndCheckNaN(tags[7]).toFixed(2);\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO zs (time, pk_ll, hy_ll, wy_ll, fx_ll, cy_ll, z_ll, z_lj, pk_lj, hy_lj, wy_lj, fx_lj, cy_lj) \n    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time, pk_ll, hy_ll, wy_ll, fx_ll, cy_ll, z_ll, z_lj, pk_lj, hy_lj, wy_lj, fx_lj, cy_lj\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 540,
        "wires": [
            [
                "30f19c72eadf58a5"
            ]
        ]
    },
    {
        "id": "30f19c72eadf58a5",
        "type": "mysql",
        "z": "e69701cd31309cd3",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 580,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "523094fc2552a51b",
        "type": "inject",
        "z": "e69701cd31309cd3",
        "name": "",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "e8fd29e0fdb3143d"
            ]
        ]
    },
    {
        "id": "6c0068cf8d2a57d2",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "外用1流量",
        "func": "var aaa = msg.payload.wy01;\nflow.set(\"wy_ll1\",aaa);\nmsg.payload = aaa\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "43fc7d836a733652"
            ]
        ]
    },
    {
        "id": "c3ac5af7f7ae13b3",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "反洗流量",
        "func": "var aaa = msg.payload.aio1;\nvar bbb = aaa - 4000;\nvar ccc = 1800 / 16000;\nvar lqll1 = bbb * ccc;\nif (lqll1<0){\n  lqll1 = 0;\n}\nmsg.payload = parseFloat(lqll1.toFixed(2));\nflow.set('fx_ll',msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 280,
        "wires": [
            [
                "6b19942766219cd7"
            ]
        ]
    },
    {
        "id": "b854fdebea86d1b9",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "反洗累计",
        "func": "\nvar gdlqll1 = flow.get(\"fx_ll\");\nvar gdlqll = gdlqll1/3.6;\n// 计算累积流量\nif (!flow.get(\"lwjioutlqll5\")) {\n    flow.set(\"lwjioutlqll5\", 0);\n};\n\n\nvar cumu = flow.get(\"lwjioutlqll5\");\nvar cumu1 = cumu + gdlqll;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjioutlqll5\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\n\nflow.set(\"fx_lj\", cumu3);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "f66c6d38247732cf",
        "type": "inject",
        "z": "e69701cd31309cd3",
        "name": "",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1060,
        "wires": [
            [
                "2c3a7f1c1dad6fae",
                "6d655e0f7cc22e30",
                "8610807d68a1d969",
                "627c40bdc856061a",
                "310fa5e050b04b04",
                "ae5ce778acf4dcd3"
            ]
        ]
    },
    {
        "id": "3cd907915e44fcad",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "function 144",
        "func": "flow.set(\"lwjioutlqll34\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "4647f477aa9f5dac",
        "type": "inject",
        "z": "e69701cd31309cd3",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2500000",
        "payloadType": "num",
        "x": 160,
        "y": 880,
        "wires": [
            [
                "3cd907915e44fcad"
            ]
        ]
    },
    {
        "id": "40ae4c204b1f6dc4",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "网关检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1') === undefined) {\n    flow.set('initialized1', true);\n    flow.set('lastMessageTime1', null);\n    flow.set('timeoutId1', null);\n    flow.set('status1', \"离线\"); // 用于在线/离线状态\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    return { payload: \"设备离线\", topic: \"device/status\" };\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    flow.set('status1', \"离线\"); // 超时则设备为离线\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    node.send({ payload: \"设备离线\", topic: \"device/status\" });\n}\n\n// 如果有现有的超时，清除它\nif (flow.get('timeoutId1') !== null) {\n    clearTimeout(flow.get('timeoutId1'));\n}\n\n// 更新最后接收到消息的时间\nflow.set('lastMessageTime1', Date.now());\n\n// 接收到任何数据时都视为设备在线\nflow.set('status1', \"在线\");\nnode.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\nnode.send({ payload: \"设备在线\", topic: \"device/status\" });\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1', timeoutId);\n\n// 向外发送设备当前状态\nreturn {\n    payload: {\n        deviceStatus: flow.get('status1'),\n    },\n    topic: \"device/status\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "27ef3aaa9d1ffec9",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1_1') === undefined) {\n    flow.set('initialized1_1', true);\n    flow.set('lastMessageTime1_1', null);\n    flow.set('timeoutId1_1', null);\n    flow.set('faultStatus1_1', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus1_1', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus1_1', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1_1', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus1_1')\n    }, \n    topic: \"device/status\" \n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b6741abeec04bb00",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1_2') === undefined) {\n    flow.set('initialized1_2', true);\n    flow.set('lastMessageTime1_2', null);\n    flow.set('timeoutId1_2', null);\n    flow.set('faultStatus1_2', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus1_2', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus1_2', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1_2', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus1_2')\n    }, \n    topic: \"device/status\" \n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "c1805b877d33bc72",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1_3') === undefined) {\n    flow.set('initialized1_3', true);\n    flow.set('lastMessageTime1_3', null);\n    flow.set('timeoutId1_3', null);\n    flow.set('faultStatus1_3', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus1_3', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus1_3', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1_3', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus1_3')\n    }, \n    topic: \"device/status\" \n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d6fa8cc029911df9",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "超越流量",
        "func": "\nvar bbb = msg.payload.b1_ll;\nflow.set(\"b_ll2\", bbb);\nmsg.payload = bbb\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "b6741abeec04bb00"
            ]
        ]
    },
    {
        "id": "43fc7d836a733652",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1_4') === undefined) {\n    flow.set('initialized1_4', true);\n    flow.set('lastMessageTime1_4', null);\n    flow.set('timeoutId1_4', null);\n    flow.set('faultStatus1_4', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus1_4', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus1_4', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1_4', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus1_4')\n    }, \n    topic: \"device/status\" \n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "6b19942766219cd7",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1_5') === undefined) {\n    flow.set('initialized1_5', true);\n    flow.set('lastMessageTime1_5', null);\n    flow.set('timeoutId1_5', null);\n    flow.set('faultStatus1_5', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus1_5', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus1_5', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1_5', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus1_5')\n    }, \n    topic: \"device/status\" \n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "44058534d2230d2b",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "网关检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized2') === undefined) {\n    flow.set('initialized2', true);\n    flow.set('lastMessageTime2', null);\n    flow.set('timeoutId2', null);\n    flow.set('status2', \"离线\"); // 用于在线/离线状态\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    return { payload: \"设备离线\", topic: \"device/status\" };\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    flow.set('status2', \"离线\"); // 超时则设备为离线\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    node.send({ payload: \"设备离线\", topic: \"device/status\" });\n}\n\n// 如果有现有的超时，清除它\nif (flow.get('timeoutId2') !== null) {\n    clearTimeout(flow.get('timeoutId2'));\n}\n\n// 更新最后接收到消息的时间\nflow.set('lastMessageTime2', Date.now());\n\n// 接收到任何数据时都视为设备在线\nflow.set('status2', \"在线\");\nnode.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\nnode.send({ payload: \"设备在线\", topic: \"device/status\" });\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId2', timeoutId);\n\n// 向外发送设备当前状态\nreturn {\n    payload: {\n        deviceStatus: flow.get('status2'),\n    },\n    topic: \"device/status\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "10eabdaf87720ea2",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized2_1') === undefined) {\n    flow.set('initialized2_1', true);\n    flow.set('lastMessageTime2_1', null);\n    flow.set('timeoutId2_1', null);\n    flow.set('faultStatus2_1', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus2_1', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus2_1', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId2_1', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus2_1')\n    }, \n    topic: \"device/status\" \n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "2cc9fe71cfcfef89",
        "type": "mqtt in",
        "z": "e69701cd31309cd3",
        "name": "",
        "topic": "/UploadTopic2222",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "d60221e42718cf36",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 340,
        "wires": [
            [
                "159e04eb9b0717a7",
                "44058534d2230d2b"
            ]
        ]
    },
    {
        "id": "159e04eb9b0717a7",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "光大流量计",
        "func": "var aaa = msg.payload.ai1;\nvar bbb = aaa - 4000;\nvar ccc = 100 / 16000;\nvar lqll1 = bbb * ccc;\nmsg.payload = parseFloat(lqll1.toFixed(2));\nflow.set(\"gd1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "10eabdaf87720ea2"
            ]
        ]
    },
    {
        "id": "7cef23e749bf62f7",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备故障发送",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nvar name = flow.get(\"statusname1\")\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": \"oVhgJ6T94nhHMRkTgItNrRwMnNIY\",\n    \"template_id\": \"R2eVYNN8qGV7xiUyxaMLeuzo5KsJip9QsmBBvZQyXJY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing22\": {\n            \"value\": \"中水回用厂\",\n            \"color\": \"#173177\"\n        },\n        \"thing13\": {\n            \"value\": name,\n            \"color\": \"#173177\"\n        },\n        \"thing5\": {\n            \"value\": \"故障报警\",\n            \"color\": \"#173177\"\n        },\n        \"time2\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1080,
        "wires": [
            [
                "50ac4785312e09b7"
            ]
        ]
    },
    {
        "id": "cca96cb8b7e71dd2",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备恢复发送",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nvar name = flow.get(\"statusname1\");\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": \"oVhgJ6T94nhHMRkTgItNrRwMnNIY\",\n    \"template_id\": \"t0VKvfb3zVGKhW56_6EiIFLSHqlQ6rP2IewjMVlqmDU\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing12\": {\n            \"value\": \"中水回用厂\",\n            \"color\": \"#173177\"\n        },\n        \"thing9\": {\n            \"value\": name,\n            \"color\": \"#173177\"\n        },\n        \"thing13\": {\n            \"value\": \"恢复正常\",\n            \"color\": \"#173177\"\n        },\n        \"time6\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1120,
        "wires": [
            [
                "50ac4785312e09b7"
            ]
        ]
    },
    {
        "id": "842e4c6a8306d7bd",
        "type": "switch",
        "z": "e69701cd31309cd3",
        "name": "设备状态切换",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "设备故障",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备正常",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 1100,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "50ac4785312e09b7",
        "type": "http request",
        "z": "e69701cd31309cd3",
        "name": "发送模板消息",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1360,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "4aad67998223ffb4",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备离线告警",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar name = flow.get(\"statusname\")\nvar openid = msg.payload;\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"vpks8dx3GNykOuZPNUKeBYB9v0C6ZOXoOkysC1DNWVY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing7\": {\n            \"value\": \"中水回用厂\",\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": name,\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": \"离线\",\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1020,
        "wires": [
            [
                "50ac4785312e09b7"
            ]
        ]
    },
    {
        "id": "3501376c0f035fc4",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备上线告警",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar name = flow.get(\"statusname\")\nvar openid = msg.payload;\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"-nOwSKt3OHr4NZd0gKG5uJ7YgDa1EI57Qb5Sz2BR_lY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing11\": {\n            \"value\": \"中水回用厂\",\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": name,\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": \"上线\",\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 980,
        "wires": [
            [
                "50ac4785312e09b7"
            ]
        ]
    },
    {
        "id": "89656ab1eaf7173c",
        "type": "switch",
        "z": "e69701cd31309cd3",
        "name": "设备状态切换",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "设备在线",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备离线",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 1020,
        "wires": [
            [
                "e77ae5b73f83d2d8"
            ],
            [
                "c551d697b6d1f001"
            ]
        ]
    },
    {
        "id": "513625685ae9f45a",
        "type": "split",
        "z": "e69701cd31309cd3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 980,
        "wires": [
            [
                "3501376c0f035fc4"
            ]
        ]
    },
    {
        "id": "e77ae5b73f83d2d8",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 980,
        "wires": [
            [
                "513625685ae9f45a"
            ]
        ]
    },
    {
        "id": "c551d697b6d1f001",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1020,
        "wires": [
            [
                "1e2545162f9a9c2f"
            ]
        ]
    },
    {
        "id": "1e2545162f9a9c2f",
        "type": "split",
        "z": "e69701cd31309cd3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 1020,
        "wires": [
            [
                "4aad67998223ffb4"
            ]
        ]
    },
    {
        "id": "2c3a7f1c1dad6fae",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "中水网关wchat",
        "func": "var name = \"中水网关\"\nvar b = flow.get(\"status1\")\nif (b === \"在线\") {\n    var a = 1;\n    flow.set(\"statusname\", name)\n} else if (b === \"离线\") {\n    a = 0;\n    flow.set(\"statusname\", name)\n}\n// 获取保存的上次状态值，存储在 flow 级别的变量中\nlet lastStatus = flow.get(\"lastStatus\");\n\n// 检查是否有状态变化，或者是首次设置状态（lastStatus 为 undefined）\nif (a === 1 && lastStatus !== 1) {\n    // 设备从离线（或首次在线）变为在线，发送在线消息\n    node.send({ payload: \"设备在线\" });\n    flow.set(\"lastStatus\", 1);  // 更新状态为在线\n} else if (a === 0 && lastStatus !== 0) {\n    // 设备从在线（或首次离线）变为离线，发送离线消息\n    node.send({ payload: \"设备离线\" });\n    flow.set(\"lastStatus\", 0);  // 更新状态为离线\n}\n\n// 不发送消息时，返回 null\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 980,
        "wires": [
            [
                "89656ab1eaf7173c"
            ]
        ]
    },
    {
        "id": "6d655e0f7cc22e30",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "光大网关wchat",
        "func": "\nvar b = flow.get(\"status2\")\nvar name = \"光大网关\"\nif (b === \"在线\") {\n    var a = 1;\n    flow.set(\"statusname\",name)\n} else if (b === \"离线\") {\n    a = 0;\n    flow.set(\"statusname\", name)\n}\n// 获取保存的上次状态值，存储在 flow 级别的变量中\nlet lastStatus = flow.get(\"lastStatus1\");\n\n// 检查是否有状态变化，或者是首次设置状态（lastStatus 为 undefined）\nif (a === 1 && lastStatus !== 1) {\n    // 设备从离线（或首次在线）变为在线，发送在线消息\n    node.send({ payload: \"设备在线\" });\n    flow.set(\"lastStatus1\", 1);  // 更新状态为在线\n} else if (a === 0 && lastStatus !== 0) {\n    // 设备从在线（或首次离线）变为离线，发送离线消息\n    node.send({ payload: \"设备离线\" });\n    flow.set(\"lastStatus1\", 0);  // 更新状态为离线\n}\n\n// 不发送消息时，返回 null\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1020,
        "wires": [
            [
                "89656ab1eaf7173c"
            ]
        ]
    },
    {
        "id": "8610807d68a1d969",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "光大流量计wchat",
        "func": "\nvar b = flow.get(\"faultStatus2_1\")\nvar name = \"光大流量计\"\nif (b === \"故障\") {\n    var a = 1;\n    flow.set(\"statusname1\",name)\n} else if (b === \"正常\") {\n    a = 0;\n    flow.set(\"statusname1\", name)\n}\n// 获取保存的上次状态值，存储在 flow 级别的变量中\nlet lastStatus = flow.get(\"lastStatus2_1\");\n\n// 检查是否有状态变化，或者是首次设置状态（lastStatus 为 undefined）\nif (a === 1 && lastStatus !== 1) {\n    // 设备从离线（或首次在线）变为在线，发送在线消息\n    node.send({ payload: \"设备故障\" });\n    flow.set(\"lastStatus2_1\", 1);  // 更新状态为在线\n} else if (a === 0 && lastStatus !== 0) {\n    // 设备从在线（或首次离线）变为离线，发送离线消息\n    node.send({ payload: \"设备正常\" });\n    flow.set(\"lastStatus2_1\", 0);  // 更新状态为离线\n}\n\n// 不发送消息时，返回 null\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1060,
        "wires": [
            [
                "842e4c6a8306d7bd"
            ]
        ]
    },
    {
        "id": "aa1b3c34f235d73e",
        "type": "split",
        "z": "e69701cd31309cd3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 1080,
        "wires": [
            [
                "7cef23e749bf62f7"
            ]
        ]
    },
    {
        "id": "644082f1c507698a",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1080,
        "wires": [
            [
                "aa1b3c34f235d73e"
            ]
        ]
    },
    {
        "id": "45a243af06105383",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1120,
        "wires": [
            [
                "03b96c714d6189ca"
            ]
        ]
    },
    {
        "id": "03b96c714d6189ca",
        "type": "split",
        "z": "e69701cd31309cd3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 1120,
        "wires": [
            [
                "cca96cb8b7e71dd2"
            ]
        ]
    },
    {
        "id": "627c40bdc856061a",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "排口流量计wchat",
        "func": "\nvar b = flow.get(\"faultStatus1_1\")\nvar name = \"排口流量计\"\nif (b === \"故障\") {\n    var a = 1;\n    flow.set(\"statusname1\",name)\n} else if (b === \"正常\") {\n    a = 0;\n    flow.set(\"statusname1\", name)\n}\n// 获取保存的上次状态值，存储在 flow 级别的变量中\nlet lastStatus = flow.get(\"lastStatus1_1\");\n\n// 检查是否有状态变化，或者是首次设置状态（lastStatus 为 undefined）\nif (a === 1 && lastStatus !== 1) {\n    // 设备从离线（或首次在线）变为在线，发送在线消息\n    node.send({ payload: \"设备故障\" });\n    flow.set(\"lastStatus1_1\", 1);  // 更新状态为在线\n} else if (a === 0 && lastStatus !== 0) {\n    // 设备从在线（或首次离线）变为离线，发送离线消息\n    node.send({ payload: \"设备正常\" });\n    flow.set(\"lastStatus1_1\", 0);  // 更新状态为离线\n}\n\n// 不发送消息时，返回 null\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1100,
        "wires": [
            [
                "842e4c6a8306d7bd"
            ]
        ]
    },
    {
        "id": "310fa5e050b04b04",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "超越流量计wchat",
        "func": "\nvar b = flow.get(\"faultStatus1_2\")\nvar name = \"超越流量计\"\nif (b === \"故障\") {\n    var a = 1;\n    flow.set(\"statusname1\",name)\n} else if (b === \"正常\") {\n    a = 0;\n    flow.set(\"statusname1\", name)\n}\n// 获取保存的上次状态值，存储在 flow 级别的变量中\nlet lastStatus = flow.get(\"lastStatus1_2\");\n\n// 检查是否有状态变化，或者是首次设置状态（lastStatus 为 undefined）\nif (a === 1 && lastStatus !== 1) {\n    // 设备从离线（或首次在线）变为在线，发送在线消息\n    node.send({ payload: \"设备故障\" });\n    flow.set(\"lastStatus1_2\", 1);  // 更新状态为在线\n} else if (a === 0 && lastStatus !== 0) {\n    // 设备从在线（或首次离线）变为离线，发送离线消息\n    node.send({ payload: \"设备正常\" });\n    flow.set(\"lastStatus1_2\", 0);  // 更新状态为离线\n}\n\n// 不发送消息时，返回 null\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1140,
        "wires": [
            [
                "842e4c6a8306d7bd"
            ]
        ]
    },
    {
        "id": "ae5ce778acf4dcd3",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "回用流量计wchat",
        "func": "\nvar b = flow.get(\"faultStatus1_3\")\nvar name = \"回用流量计\"\nif (b === \"故障\") {\n    var a = 1;\n    flow.set(\"statusname1\",name)\n} else if (b === \"正常\") {\n    a = 0;\n    flow.set(\"statusname1\", name)\n}\n// 获取保存的上次状态值，存储在 flow 级别的变量中\nlet lastStatus = flow.get(\"lastStatus1_3\");\n\n// 检查是否有状态变化，或者是首次设置状态（lastStatus 为 undefined）\nif (a === 1 && lastStatus !== 1) {\n    // 设备从离线（或首次在线）变为在线，发送在线消息\n    node.send({ payload: \"设备故障\" });\n    flow.set(\"lastStatus1_3\", 1);  // 更新状态为在线\n} else if (a === 0 && lastStatus !== 0) {\n    // 设备从在线（或首次离线）变为离线，发送离线消息\n    node.send({ payload: \"设备正常\" });\n    flow.set(\"lastStatus1_3\", 0);  // 更新状态为离线\n}\n\n// 不发送消息时，返回 null\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1180,
        "wires": [
            [
                "842e4c6a8306d7bd"
            ]
        ]
    },
    {
        "id": "c0b4eb90bca14c8f",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "外用累计-光大",
        "func": "var gdll1 = flow.get(\"gd1\");\nvar gdll= gdll1/3.6\n// 计算累积流量\nif (!flow.get(\"gd3\")) {\n    flow.set(\"gd3\", 0);\n};\nvar cumu = flow.get(\"gd3\");\nvar cumu1 = cumu + gdll;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"gd3\", cumu1);\nvar cumu3 = cumu2.toFixed(3)\nflow.set(\"gdlwji1\", cumu3);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "4e5b1253e63b6d6d",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "外用累计2",
        "func": "\n\nvar wy2 = flow.get('wy_ll2');\nvar wy2_1 = wy2 / 3.6;\nif (!flow.get(\"gd6\")) {\n    flow.set(\"gd6\", 0);\n};\nvar b = flow.get(\"gd6\");\nvar b1 = b + wy2_1;\nvar b2 = b1 / 1000;\nflow.set(\"gd6\", b1);\nvar b3 = b2.toFixed(3)\nflow.set(\"wy02lwji1\", b2.toFixed(3));\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e72672e1c8cefd21",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "外用累计",
        "func": "\nvar wy1 = flow.get(\"wy01lwji1\");\nvar wy2 = flow.get(\"wy02lwji1\");\nvar gd1 = flow.get(\"gdlwji1\");\nvar wy3 = flow.get(\"wy03lwji1\");\n\nvar wy11 = parseFloat(wy1)\nvar wy22 = parseFloat(wy2)\nvar wy33 = parseFloat(wy3)\nvar gd11 = parseFloat(gd1)\nvar wy = wy11+wy22+wy33+gd11\n\nflow.set(\"wylwji1\",wy)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "95eb3d2cc85cb4a8",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "外用累计3",
        "func": "\n\nvar wy2 = flow.get('wy_ll3');\nvar wy2_1 = wy2 / 3.6;\nif (!flow.get(\"gd7\")) {\n    flow.set(\"gd7\", 0);\n};\nvar b = flow.get(\"gd7\");\nvar b1 = b + wy2_1;\nvar b2 = b1 / 1000;\nflow.set(\"gd7\", b1);\nvar b3 = b2.toFixed(3)\nflow.set(\"wy03lwji1\", b2.toFixed(3));\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "f3918ddf2104db87",
        "type": "mqtt in",
        "z": "e69701cd31309cd3",
        "name": "",
        "topic": "/PubTopic1111",
        "qos": "0",
        "datatype": "buffer",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 840,
        "y": 200,
        "wires": [
            [
                "16873a8f295218d0"
            ]
        ]
    },
    {
        "id": "16873a8f295218d0",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "解析数据",
        "func": "// 将接收到的数据转换为十六进制字符串\nlet hexData = msg.payload.toString('hex');\n\n// 解析出设备地址（假设设备地址在前两个字符）\nlet deviceAddress = parseInt(hexData.slice(0, 2), 16);\n\n// 根据设备地址分类处理数据\nswitch(deviceAddress) {\n    case 1:\n        msg.topic = '设备1';\n        break;\n    case 2:\n        msg.topic = '设备2';\n        break;\n    case 3:\n        msg.topic = '设备3';\n        break;\n    case 4:\n        msg.topic = '设备4';\n        break;\n    case 5:\n        msg.topic = '设备5';\n        break;\n    case 8:\n        msg.topic = '设备8';\n        break;\n    case 9:\n        msg.topic = '设备9';\n        break;\n    default:\n        msg.topic = '未知设备';\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 200,
        "wires": [
            [
                "902a06aeb05ecc4f"
            ]
        ]
    },
    {
        "id": "902a06aeb05ecc4f",
        "type": "switch",
        "z": "e69701cd31309cd3",
        "name": "按设备分流",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "设备8",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备9",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 200,
        "wires": [
            [
                "b3ba6fb3911a3316"
            ],
            [
                "ba86c6bfeb4aa99f"
            ]
        ]
    },
    {
        "id": "b3ba6fb3911a3316",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x04) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 300,
        "wires": [
            [
                "f3b3f5bf20c7f68d"
            ]
        ]
    },
    {
        "id": "f3b3f5bf20c7f68d",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "外用2流量计",
        "func": "var value1 = msg.payload[1];\nvar value2 = msg.payload[0];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nif (floatValue < 0){\n    floatValue = 0\n}\nvar aaa = floatValue\n\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"wy_ll2\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 300,
        "wires": [
            [
                "cb6631cb9b2079ff"
            ]
        ]
    },
    {
        "id": "ba86c6bfeb4aa99f",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x04) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 340,
        "wires": [
            [
                "fae3cb69df760534"
            ]
        ]
    },
    {
        "id": "fae3cb69df760534",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "外用3流量计",
        "func": "var value1 = msg.payload[1];\nvar value2 = msg.payload[0];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\nif (floatValue < 0){\n    floatValue = 0\n}\nvar aaa = floatValue\n\nmsg.payload = parseFloat(aaa.toFixed(2));\n\nflow.set(\"wy_ll3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 340,
        "wires": [
            [
                "0faa1f092506687d"
            ]
        ]
    },
    {
        "id": "c0de97db398491c8",
        "type": "mqtt out",
        "z": "e69701cd31309cd3",
        "name": "",
        "topic": "/SubTopic1111",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 1160,
        "y": 120,
        "wires": []
    },
    {
        "id": "108c36e3aab40524",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "生成命令",
        "func": "// 初始化设备索引\ncontext.deviceIndex = context.deviceIndex || 0;\n\n// 设备地址\nconst addresses = [8, 9];\n\n// 获取当前设备地址\nconst currentAddress = addresses[context.deviceIndex];\n\n// 更新设备索引\ncontext.deviceIndex = (context.deviceIndex + 1) % addresses.length;\n\n// 生成采集命令（不含校验码）\nlet command = `${currentAddress.toString(16).padStart(2, '0')}0400630002`;\n\n// 计算CRC校验码\nfunction calculateCRC(command) {\n    let crc = 0xFFFF;\n    for (let pos = 0; pos < command.length; pos += 2) {\n        crc ^= parseInt(command.substr(pos, 2), 16);\n        for (let i = 8; i !== 0; i--) {\n            if ((crc & 0x0001) !== 0) {\n                crc >>= 1;\n                crc ^= 0xA001;\n            } else {\n                crc >>= 1;\n            }\n        }\n    }\n    return crc.toString(16).padStart(4, '0');\n}\n\n// 获取校验码\nconst crc = calculateCRC(command);\n\n// 完整命令（包含校验码）\ncommand += crc.slice(2) + crc.slice(0, 2);\n\n// 设置输出消息\nmsg.topic = `devices/${currentAddress}/command`;\nmsg.payload = Buffer.from(command, 'hex');\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 120,
        "wires": [
            [
                "c0de97db398491c8"
            ]
        ]
    },
    {
        "id": "6d2216778fb6f530",
        "type": "inject",
        "z": "e69701cd31309cd3",
        "name": "",
        "props": [],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 830,
        "y": 120,
        "wires": [
            [
                "108c36e3aab40524"
            ]
        ]
    },
    {
        "id": "cb6631cb9b2079ff",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备检测",
        "func": "const TIMEOUT_DURATION = 10 * 60 * 1000; // 10分钟\n\n// 初始化上下文变量，如果尚未设\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('lastMessageTime', null);\n    context.set('timeoutId', null);\n    context.set('isOnline', null); // 初始状态设置为 null\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    if (context.get('isOnline') !== false) { // 仅在状态不是离线时执行\n        context.set('isOnline', false);\n        node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n        node.send({ payload: \"设备离线\", topic: \"device/status\" });\n    }\n}\n\n// 如果有现有的超时，清除它\nif (context.get('timeoutId') !== null) {\n    clearTimeout(context.get('timeoutId'));\n}\n\n// 更新最后接收到消息的时间\ncontext.set('lastMessageTime', Date.now());\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\ncontext.set('timeoutId', timeoutId);\n\n// 检查并更新设备状态\nif (context.get('isOnline') === null) { // 初始状态\n    context.set('isOnline', true);\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return null; // 初始状态收到数据，不发送消息\n} else if (!context.get('isOnline')) { // 设备从离线变为在线\n    context.set('isOnline', true);\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return { payload: \"设备在线\", topic: \"device/status\" };\n} else {\n    // 如果设备已经在线，不发送消息，只更新状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "0faa1f092506687d",
        "type": "function",
        "z": "e69701cd31309cd3",
        "name": "设备检测",
        "func": "const TIMEOUT_DURATION = 10* 60 * 1000; // 10分\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('lastMessageTime', null);\n    context.set('timeoutId', null);\n    context.set('isOnline', null); // 初始状态设置为 null\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    if (context.get('isOnline') !== false) { // 仅在状态不是离线时执行\n        context.set('isOnline', false);\n        node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n        node.send({ payload: \"设备离线\", topic: \"device/status\" });\n    }\n}\n\n// 如果有现有的超时，清除它\nif (context.get('timeoutId') !== null) {\n    clearTimeout(context.get('timeoutId'));\n}\n\n// 更新最后接收到消息的时间\ncontext.set('lastMessageTime', Date.now());\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\ncontext.set('timeoutId', timeoutId);\n\n// 检查并更新设备状态\nif (context.get('isOnline') === null) { // 初始状态\n    context.set('isOnline', true);\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return null; // 初始状态收到数据，不发送消息\n} else if (!context.get('isOnline')) { // 设备从离线变为在线\n    context.set('isOnline', true);\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return { payload: \"设备在线\", topic: \"device/status\" };\n} else {\n    // 如果设备已经在线，不发送消息，只更新状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "56d90c58bfbe219c",
        "type": "mqtt in",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "topic": "/PubTopic222",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 540,
        "wires": [
            [
                "4194d3bfaeff1d6e",
                "6b90531e67b35cf9"
            ]
        ]
    },
    {
        "id": "f3d5e98ef5d9c29b",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 520,
        "wires": [
            [
                "778e76a2aad8b7c3",
                "27a43cfabfccf7e1",
                "43314736206c0137"
            ]
        ]
    },
    {
        "id": "778e76a2aad8b7c3",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "Parse Modbus Float",
        "func": "var value1 = msg.payload[2];\nvar value2 = msg.payload[3];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 2);\nbuffer.writeUInt16BE(value2, 0);\n\nvar floatValue = buffer.readFloatBE(0);\n\nmsg.payload = parseFloat(floatValue.toFixed(2));\n\nflow.set(\"cod\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 480,
        "wires": [
            [
                "734f0bb14c091179"
            ]
        ]
    },
    {
        "id": "27a43cfabfccf7e1",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "Parse Modbus Float",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 2);\nbuffer.writeUInt16BE(value2, 0);\n\nvar floatValue = buffer.readFloatBE(0);\n\nmsg.payload = parseFloat(floatValue.toFixed(2));\n\nflow.set(\"nh3\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 520,
        "wires": [
            [
                "78c862792bcc91f1"
            ]
        ]
    },
    {
        "id": "43314736206c0137",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "Parse Modbus Float",
        "func": "var value1 = msg.payload[4];\nvar value2 = msg.payload[5];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 2);\nbuffer.writeUInt16BE(value2, 0);\n\nvar floatValue = buffer.readFloatBE(0);\n\nmsg.payload = parseFloat(floatValue.toFixed(2));\n\nflow.set(\"tp\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 560,
        "wires": [
            [
                "bfcbfc45d5ca4448"
            ]
        ]
    },
    {
        "id": "4194d3bfaeff1d6e",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "过滤数据",
        "func": "var buffer = msg.payload;\n\n// 检查第一位是否为 0x08\nif (buffer[0] === 0x08 && buffer[1] === 0x03 && buffer[2] > 0x00  && buffer.length === 17) {\n    return msg; // 符合条件的数据，传递到下一个节点\n} else {\n    return null; // 不符合条件的数据，丢弃\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 520,
        "wires": [
            [
                "f3d5e98ef5d9c29b"
            ]
        ]
    },
    {
        "id": "f3e2b803c2433be3",
        "type": "mqtt out",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "topic": "/SubTopic103",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 660,
        "y": 980,
        "wires": []
    },
    {
        "id": "852b693ce49abfd6",
        "type": "mqtt in",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "topic": "/PubTopic103",
        "qos": "0",
        "datatype": "buffer",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 800,
        "wires": [
            [
                "b993372c6477c0ad",
                "fee75faa06279432",
                "e60b14290ca4ed44"
            ]
        ]
    },
    {
        "id": "9900879103276d79",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "河水流量计",
        "func": "msg.payload = Buffer.from(\"080300630002348c\",\"hex\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1000,
        "wires": [
            [
                "f3e2b803c2433be3"
            ]
        ]
    },
    {
        "id": "9c5cf0a7b7a97c8a",
        "type": "inject",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "props": [],
        "repeat": "14",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1000,
        "wires": [
            [
                "9900879103276d79"
            ]
        ]
    },
    {
        "id": "08c22a5da2949785",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 800,
        "wires": [
            [
                "7103096fa87327d3"
            ]
        ]
    },
    {
        "id": "7103096fa87327d3",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "Parse Modbus Float",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 2);\nbuffer.writeUInt16BE(value2, 0);\n\nvar floatValue = buffer.readFloatBE(0);\n\nmsg.payload = parseFloat(floatValue.toFixed(2));\n\nflow.set(\"lqllr\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 800,
        "wires": [
            [
                "9e3a4b0ba6605ad8"
            ]
        ]
    },
    {
        "id": "184e9712a83a56db",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "出水累计",
        "func": "\nvar lqll1 = flow.get(\"lqllw\");\nvar lqll2 = flow.get(\"lqllr\");\nvar lqll3 = lqll1 / 3.6;\nvar lqll4 = lqll2 / 3.6;\n\n// 计算累积流量\nif (!flow.get(\"lwjilqll10\")) {\n    flow.set(\"lwjilqll10\", 0);\n};\n\nvar cumu = flow.get(\"lwjilqll10\");\nvar cumu1 = cumu + lqll3 + lqll4;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjilqll10\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nmsg.payload = cumu3;\nglobal.set(\"5000lwji\",cumu3);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "9c4126ac42d03b67",
        "type": "inject",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 920,
        "wires": [
            [
                "184e9712a83a56db"
            ]
        ]
    },
    {
        "id": "0aceedba9c290eed",
        "type": "inject",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1200,
        "wires": [
            [
                "19e3c0bbf33dd02c"
            ]
        ]
    },
    {
        "id": "3356c9246c29d0be",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "污水流量计",
        "func": "msg.payload = Buffer.from(\"07030062000265B3\",\"hex\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 960,
        "wires": [
            [
                "f3e2b803c2433be3"
            ]
        ]
    },
    {
        "id": "e73c52e83eee8dad",
        "type": "inject",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "props": [],
        "repeat": "15",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 960,
        "wires": [
            [
                "3356c9246c29d0be"
            ]
        ]
    },
    {
        "id": "b993372c6477c0ad",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "过滤数据",
        "func": "var buffer = msg.payload;\n\n// 检查第一位是否为 0x01\nif (buffer[0] === 0x07 && buffer[1] === 0x03 && buffer[2] === 0x04) {\n    return msg; // 符合条件的数据，传递到下一个节点\n} else {\n    return null; // 不符合条件的数据，丢弃\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 840,
        "wires": [
            [
                "44f1c00aec908245"
            ]
        ]
    },
    {
        "id": "44f1c00aec908245",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "MQTT数据解析函数",
        "func": "// 获取接收到的 MQTT 消息的 payload\nvar inputData = msg.payload;\n\n// 检查是否是一个 Buffer 对象\nif (!Buffer.isBuffer(inputData)) {\n    // 如果不是 Buffer 对象，输出错误信息并返回\n    node.error(\"Payload is not a Buffer object\");\n    return;\n}\n\n// 检查功能码是否为 0x03（读取保持寄存器）\nif (inputData[1] === 0x03) {\n    // 获取返回的寄存器数量\n    const registerCount = inputData[2];\n\n    // 创建数组来存储解析出的寄存器值\n    const registers = [];\n\n    // 从数据的第三个字节开始读取寄存器值\n    let index = 3;\n    for (let i = 0; i < registerCount / 2; i++) {\n        // 读取两个字节并组合成一个寄存器值\n        const registerValue = inputData.readUInt16BE(index);\n        registers.push(registerValue);\n        // 每次读取后，将索引增加2，以便读取下一个寄存器值\n        index += 2;\n    }\n\n    // 输出解析出的寄存器值\n    msg.payload = registers;\n} else {\n    // 如果功能码不是 0x03，输出错误信息\n    node.error('Unsupported function code:', inputData[1]);\n}\n\n// 将解析后的数据发送到下一个节点\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 840,
        "wires": [
            [
                "5f07f7e01f60e93c"
            ]
        ]
    },
    {
        "id": "5f07f7e01f60e93c",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "Parse Modbus Float",
        "func": "var value1 = msg.payload[0];\nvar value2 = msg.payload[1];\n\nvar buffer = Buffer.alloc(4);\nbuffer.writeUInt16BE(value1, 0);\nbuffer.writeUInt16BE(value2, 2);\n\nvar floatValue = buffer.readFloatBE(0);\n\nmsg.payload = parseFloat(floatValue.toFixed(2));\n\nflow.set(\"lqllw\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 840,
        "wires": [
            [
                "79edc655c4427ce2"
            ]
        ]
    },
    {
        "id": "fee75faa06279432",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "过滤数据",
        "func": "var buffer = msg.payload;\n\n// 检查第一位是否为 0x01\nif (buffer[0] === 0x08 && buffer[1] === 0x03 && buffer[2] === 0x04) {\n    return msg; // 符合条件的数据，传递到下一个节点\n} else {\n    return null; // 不符合条件的数据，丢弃\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 800,
        "wires": [
            [
                "08c22a5da2949785"
            ]
        ]
    },
    {
        "id": "8661c801daf92cf9",
        "type": "mqtt out",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "topic": "/SubTopic222",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 500,
        "y": 620,
        "wires": []
    },
    {
        "id": "68132011cd9d2563",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "出水数据",
        "func": "msg.payload = Buffer.from(\"080300000006C551\",\"hex\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 620,
        "wires": [
            [
                "8661c801daf92cf9"
            ]
        ]
    },
    {
        "id": "8a5ea982983ce64c",
        "type": "inject",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "68132011cd9d2563",
                "d533252fe45c9ad5"
            ]
        ]
    },
    {
        "id": "61af60d719209123",
        "type": "inject",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1240,
        "wires": [
            [
                "f071cfc1652cfd7e"
            ]
        ]
    },
    {
        "id": "f071cfc1652cfd7e",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "定时",
        "func": "// 获取全局时间变量\nvar time = global.get(\"cstTimeForSchedule\") || [0, 0, 0]; // 预防 undefined\nvar hour = time[0];  // 数组索引 0 -> 小时\nvar minute = time[1]; // 数组索引 1 -> 分钟\nvar second = time[2]; // 数组索引 2 -> 秒\n\n// 检查是否为 00:00:00\nif (hour === 0 && minute === 0 && second === 0) {\n    msg.payload = 0; // 设置 payload\n    return msg;      // 输出消息\n} else {\n    return null;     // 否则，不输出消息\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1240,
        "wires": [
            [
                "5f50a6e2b844589d"
            ]
        ]
    },
    {
        "id": "5f50a6e2b844589d",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "累计清零",
        "func": "var rest = msg.payload;\nflow.set(\"lwjilqll\", rest);\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "e60b14290ca4ed44",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "网关检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized2') === undefined) {\n    flow.set('initialized2', true);\n    flow.set('lastMessageTime2', null);\n    flow.set('timeoutId2', null);\n    flow.set('status2', \"离线\"); // 用于在线/离线状态\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    return { payload: \"设备离线\", topic: \"device/status\" };\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    flow.set('status2', \"离线\"); // 超时则设备为离线\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    node.send({ payload: \"设备离线\", topic: \"device/status\" });\n}\n\n// 如果有现有的超时，清除它\nif (flow.get('timeoutId2') !== null) {\n    clearTimeout(flow.get('timeoutId2'));\n}\n\n// 更新最后接收到消息的时间\nflow.set('lastMessageTime2', Date.now());\n\n// 接收到任何数据时都视为设备在线\nflow.set('status2', \"在线\");\nnode.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\nnode.send({ payload: \"设备在线\", topic: \"device/status\" });\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId2', timeoutId);\n\n// 向外发送设备当前状态\nreturn { \n    payload: {\n        deviceStatus: flow.get('status2'), \n    }, \n    topic: \"device/status\" \n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "9e3a4b0ba6605ad8",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized2_1') === undefined) {\n    flow.set('initialized2_1', true);\n    flow.set('lastMessageTime2_1', null);\n    flow.set('timeoutId2_1', null);\n    flow.set('faultStatus2_1', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus2_1', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus2_1', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId2_1', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus2_1')\n    }, \n    topic: \"device/status\" \n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "6b90531e67b35cf9",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "网关检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1') === undefined) {\n    flow.set('initialized1', true);\n    flow.set('lastMessageTime1', null);\n    flow.set('timeoutId1', null);\n    flow.set('status1', \"离线\"); // 用于在线/离线状态\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    return { payload: \"设备离线\", topic: \"device/status\" };\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    flow.set('status1', \"离线\"); // 超时则设备为离线\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    node.send({ payload: \"设备离线\", topic: \"device/status\" });\n}\n\n// 如果有现有的超时，清除它\nif (flow.get('timeoutId1') !== null) {\n    clearTimeout(flow.get('timeoutId1'));\n}\n\n// 更新最后接收到消息的时间\nflow.set('lastMessageTime1', Date.now());\n\n// 接收到任何数据时都视为设备在线\nflow.set('status1', \"在线\");\nnode.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\nnode.send({ payload: \"设备在线\", topic: \"device/status\" });\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1', timeoutId);\n\n// 向外发送设备当前状态\nreturn {\n    payload: {\n        deviceStatus: flow.get('status1'),\n    },\n    topic: \"device/status\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "734f0bb14c091179",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1_1') === undefined) {\n    flow.set('initialized1_1', true);\n    flow.set('lastMessageTime1_1', null);\n    flow.set('timeoutId1_1', null);\n    flow.set('faultStatus1_1', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus1_1', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus1_1', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1_1', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus1_1')\n    }, \n    topic: \"device/status\" \n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "78c862792bcc91f1",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1_2') === undefined) {\n    flow.set('initialized1_2', true);\n    flow.set('lastMessageTime1_2', null);\n    flow.set('timeoutId1_2', null);\n    flow.set('faultStatus1_2', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus1_2', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus1_2', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1_2', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus1_2')\n    }, \n    topic: \"device/status\" \n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "bfcbfc45d5ca4448",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1_3') === undefined) {\n    flow.set('initialized1_3', true);\n    flow.set('lastMessageTime1_3', null);\n    flow.set('timeoutId1_3', null);\n    flow.set('faultStatus1_3', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus1_3', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus1_3', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1_3', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus1_3')\n    }, \n    topic: \"device/status\" \n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "79edc655c4427ce2",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized2_2') === undefined) {\n    flow.set('initialized2_2', true);\n    flow.set('lastMessageTime2_2', null);\n    flow.set('timeoutId2_2', null);\n    flow.set('faultStatus2_2', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus2_2', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus2_2', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function () {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId2_2', timeoutId);\n\n// 向外发送故障状态\nreturn {\n    payload: {\n        faultStatus: flow.get('faultStatus2_2')\n    },\n    topic: \"device/status\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "b8b041c2e93904a2",
        "type": "mqtt out",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "topic": "/VSUV001",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 490,
        "y": 660,
        "wires": []
    },
    {
        "id": "d533252fe45c9ad5",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "function 147",
        "func": "// 获取输入数据\nvar burrf = msg.payload || {};\nvar lqllw = flow.get('lqllw');\nvar lqllr = flow.get('lqllr');\nvar lwji = global.get('5000lwji');\nvar tp = flow.get('tp');\nvar nh3 = flow.get('nh3');\nvar cod = flow.get('cod');\n\nmsg.payload = {\n     lqll001 : lqllr,\n     lqll002 : lqllw,\n     leiji:lwji,\n     tp:tp,\n     nh3:nh3,\n     cod:cod\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 660,
        "wires": [
            [
                "b8b041c2e93904a2"
            ]
        ]
    },
    {
        "id": "eda6436380e93542",
        "type": "mysql",
        "z": "6c0ea9e8463e36cf",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 480,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "19e3c0bbf33dd02c",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "上传数据库",
        "func": "// 从流变量中获取所需的值\nvar tag1 = flow.get(['tp', 'nh3', 'cod', 'lqllw', 'lqllr']) || [0, 0, 0, 0, 0];\nvar lwji = global.get(\"5000lwji\") || 0;\nvar time = global.get(\"mariaDBTime\") || new Date().toISOString();\n\n// 将获取的数据转换为浮点数，并检查NaN值\nfunction parseFloatAndCheckNaN(value) {\n    var parsedValue = parseFloat(value);\n    return isNaN(parsedValue) ? 0 : parsedValue;\n}\n\n// 转换数据\nvar ll_r = parseFloatAndCheckNaN(tag1[4]);\nvar ll_w = parseFloatAndCheckNaN(tag1[3]);\nvar cod = parseFloatAndCheckNaN(tag1[2]);\nvar nh3 = parseFloatAndCheckNaN(tag1[1]);\nvar tp = parseFloatAndCheckNaN(tag1[0]);\n\n// 检查数据有效性\nif (isNaN(ll_r) || isNaN(ll_w) || isNaN(cod) || isNaN(nh3) || isNaN(tp)) {\n    node.error(\"Invalid numeric value detected.\");\n    return null; // 阻止后续操作\n}\n\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO yj_5000 (time, lwji, tp, nh3, cod, lqllw, lqllr) \n    VALUES (?, ?, ?, ?, ?, ?, ?)\n`;\n\n// 设置参数\nmsg.payload = [\n    time,\n    lwji,\n    tp,\n    nh3,\n    cod,\n    ll_w,\n    ll_r\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1200,
        "wires": [
            [
                "eda6436380e93542"
            ]
        ]
    },
    {
        "id": "1d510531ac3ba2c5",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "function 174",
        "func": "flow.set(\"lwjilqll\",msg.payload)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "86a671d1dc15488c",
        "type": "inject",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100000",
        "payloadType": "num",
        "x": 130,
        "y": 1060,
        "wires": [
            [
                "1d510531ac3ba2c5"
            ]
        ]
    },
    {
        "id": "dd59fd411c740dcb",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "websocket",
        "func": "var dv1 = flow.get(\"q0.0\")\nvar dv2 = flow.get(\"q0.1\")\nvar lqllw = flow.get('lqllw');\nvar lqllr = flow.get('lqllr');\nvar lwji = global.get('5000lwji');\nvar tp = flow.get('tp');\nvar nh3 = flow.get('nh3');\nvar cod = flow.get('cod');\nvar tsb1 = flow.get('TSB1');\nvar tsb2 = flow.get('TSB2');\nvar tsb1_yx = flow.get('TSB1_YX');\nvar tsb2_yx = flow.get('TSB2_YX');\n\nvar indata = [\n    {name: '进水流量(w)', data: lqllw, dw: 'm³/h', alarm: 0},\n    {name: '进水流量(h)', data: lqllr, dw: 'm³/h', alarm: 1},\n    {name: '进水累计', data: lwji, dw: 'm³', alarm: 0},\n];\n\nvar outdata = [\n    {name: '出水总磷', data: tp, dw: 'mg/l', alarm: 0},\n    {name: '出水氨氮', data: nh3, dw: 'mg/l', alarm: 0},\n    {name: '出水cod', data: cod, dw: 'mg/l', alarm: 0},\n];\n\n// 定义设备列表\nvar devices = [\n  // 干式自吸泵\n  { name: '1#进水泵(h)',  run: tsb1_yx,fault: 0},\n  { name: '2#进水泵(h)',  run: tsb2_yx,fault: 0},\n]\n// 构建最终的消息负载\nmsg.payload = {\n    indata,\n    outdata,\n    devices\n\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1320,
        "wires": [
            [
                "8e6d4eb7262b2340"
            ]
        ]
    },
    {
        "id": "e8187b4ce6bf06fa",
        "type": "http in",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "url": "api/sites/site/2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1400,
        "wires": [
            [
                "8df343d5f4e7a9df"
            ]
        ]
    },
    {
        "id": "8e6d4eb7262b2340",
        "type": "http response",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 1360,
        "wires": []
    },
    {
        "id": "bc60b694c6b64de3",
        "type": "mqtt in",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "topic": "/PubTopic111",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 480,
        "wires": [
            [
                "6fdd68937c373686"
            ]
        ]
    },
    {
        "id": "6fdd68937c373686",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "function 1",
        "func": "flow.set(\"TSB1\", msg.payload.DO1)\nflow.set(\"TSB2\", msg.payload.DO2)\nflow.set(\"TSB1_YX\", msg.payload.DI1)\nflow.set(\"TSB2_YX\", msg.payload.DI2)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "b0f05ca04d32f66e",
        "type": "mqtt in",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "topic": "/RespondTopic111",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 400,
        "wires": [
            [
                "5fa17e15c005f302"
            ]
        ]
    },
    {
        "id": "5fa17e15c005f302",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "function 31",
        "func": "var err = msg.payload.rw_prot.w_data[0].err\n\nif (err === '0'){\n    return msg\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "8df343d5f4e7a9df",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "function 39",
        "func": "// 获取基本数据\nvar lqllw = flow.get('lqllw');\nvar lqllr = flow.get('lqllr');\nvar lwji = global.get('5000lwji');\nvar tp = flow.get('tp');\nvar nh3 = flow.get('nh3');\nvar cod = flow.get('cod');\nvar tsb1 = flow.get('TSB1');\nvar tsb2 = flow.get('TSB2');\nvar tsb1_yx = flow.get('TSB1_YX');\nvar tsb2_yx = flow.get('TSB2_YX');\n\n// 定义原有数据结构\nvar indata = [\n    {name: '进水流量(w)', data: lqllw, dw: 'm³/h', alarm: 0},\n    {name: '进水流量(h)', data: lqllr, dw: 'm³/h', alarm: 1},\n    {name: '进水累计', data: lwji, dw: 'm³', alarm: 0},\n];\n\nvar outdata = [\n    {name: '出水总磷', data: tp, dw: 'mg/l', alarm: 0},\n    {name: '出水氨氮', data: nh3, dw: 'mg/l', alarm: 0},\n    {name: '出水cod', data: cod, dw: 'mg/l', alarm: 0},\n];\n\n// 定义设备列表\nvar devices = [\n    // 干式自吸泵\n    { name: '1#进水泵(h)', run: tsb1_yx, fault: 0 },\n    { name: '2#进水泵(h)', run: tsb2_yx, fault: 0 },\n];\n\n// 创建新格式的数据分组 - 只包含原有数据\nvar dataGroups = [\n    // 1. 进水数据分组\n    {\n        id: \"indata\",\n        name: \"进水数据\",\n        type: \"sensor\",\n        data: indata\n    },\n    // 2. 出水数据分组\n    {\n        id: \"outdata\",\n        name: \"出水数据\",\n        type: \"sensor\",\n        data: outdata\n    },\n    // 3. 设备控制分组\n    {\n        id: \"devices\",\n        name: \"河水提升泵\",\n        type: \"device\",\n        data: devices\n    }\n];\n\n// 构建最终的消息负载 - 同时包含旧格式和新格式\nmsg.payload = {\n    // 保留原有格式的数据\n    indata: indata,\n    outdata: outdata,\n    devices: devices,\n    \n    // 添加新格式的数据分组\n    dataGroups: dataGroups\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1400,
        "wires": [
            [
                "8e6d4eb7262b2340"
            ]
        ]
    },
    {
        "id": "6ac738f6b5a81c5e",
        "type": "http in",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "url": "api/websites/site/2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1320,
        "wires": [
            [
                "dd59fd411c740dcb"
            ]
        ]
    },
    {
        "id": "e69d89bbcf99f29a",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "function 85",
        "func": "// 初始化全局变量存储客户端连接\nif (global.wsClients === undefined) {\n    global.wsClients = {};\n}\n\n// 取得客户端ID (使用WebSocket ID)\nconst clientId = msg._session.id;\n\n// 检查连接状态事件\nif (msg.payload === 'connected') {\n    node.log('新WebSocket客户端连接: ' + clientId);\n    \n    // 为新客户端创建状态对象\n    global.wsClients[clientId] = {\n        id: clientId,\n        connected: true,\n        lastActive: Date.now(),\n        siteId: null,\n        clientInfo: {}\n    };\n    \n    return null;\n}\n\nif (msg.payload === 'disconnected') {\n    node.log('WebSocket客户端断开连接: ' + clientId);\n    \n    if (global.wsClients[clientId]) {\n        delete global.wsClients[clientId];\n    }\n    \n    return null;\n}\n\n// 解析消息\nlet messageData;\ntry {\n    if (typeof msg.payload === 'string') {\n        messageData = JSON.parse(msg.payload);\n    } else {\n        messageData = msg.payload;\n    }\n} catch (e) {\n    node.warn('无效的JSON消息: ' + msg.payload);\n    return null;\n}\n\n// 记录收到的消息\nnode.log('收到WebSocket消息: ' + JSON.stringify(messageData));\n\n// 确保客户端记录存在\nif (!global.wsClients[clientId]) {\n    global.wsClients[clientId] = {\n        id: clientId,\n        connected: true,\n        lastActive: Date.now(),\n        siteId: null,\n        clientInfo: {}\n    };\n}\n\n// 更新客户端活跃时间\nglobal.wsClients[clientId].lastActive = Date.now();\n\n// 如果消息包含siteId，更新客户端记录\nif (messageData.siteId) {\n    global.wsClients[clientId].siteId = messageData.siteId;\n}\n\n// 如果是初始化消息，保存客户端信息\nif (messageData.type === 'init' && messageData.clientInfo) {\n    global.wsClients[clientId].clientInfo = messageData.clientInfo;\n}\n\n// 统一消息格式\nmsg._clientId = clientId;\nmsg.messageType = messageData.type;\nmsg.payload = messageData;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1800,
        "wires": [
            [
                "fa0a796f3b0158a9"
            ]
        ]
    },
    {
        "id": "ae358cb7d1d38907",
        "type": "websocket in",
        "z": "6c0ea9e8463e36cf",
        "name": "Device WebSocket",
        "server": "85bc2088d91de0e1",
        "client": "",
        "x": 110,
        "y": 1800,
        "wires": [
            [
                "e69d89bbcf99f29a"
            ]
        ]
    },
    {
        "id": "fa0a796f3b0158a9",
        "type": "switch",
        "z": "6c0ea9e8463e36cf",
        "name": "路由消息",
        "property": "messageType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "get_device_status",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "command",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "init",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "client_close",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 440,
        "y": 1800,
        "wires": [
            [
                "665b01d741d42bc1"
            ],
            [
                "b3f3e5f0dfd522d7"
            ],
            [
                "de6867d88853c867"
            ],
            [
                "d38213dcfe9e2075"
            ],
            [
                "d07c80bc8ac63c6f"
            ]
        ]
    },
    {
        "id": "665b01d741d42bc1",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "处理心跳",
        "func": "// 发送pong响应\nmsg.payload = {\n    type: 'pong',\n    timestamp: Date.now(),\n    serverTime: new Date().toISOString()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1740,
        "wires": [
            [
                "195d86e54a8e2d71"
            ]
        ]
    },
    {
        "id": "de6867d88853c867",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "处理控制命令",
        "func": "// 命令处理函数 - 将前端命令转换为设备控制指令\nconst command = msg.payload;\nconst clientId = msg._clientId;\nconst siteId = command.siteId;\n\nif (!siteId) {\n    node.warn('命令没有指定siteId');\n    return null;\n}\n\n// 记录命令信息\nnode.log('收到WebSocket命令: ' + JSON.stringify(command));\n\n// 对收到的命令进行分类处理\nlet controlType, deviceId, action, feedbackMessage;\nlet deviceParams = {};\n\n// 根据前端发送的命令格式提取关键信息\nif (command.type === 'command') {\n    // 判断具体是哪种控制类型\n    if (command.deviceName && (command.action === 'start' || command.action === 'stop')) {\n        // 设备启停控制\n        controlType = 'device_control';\n        deviceId = command.deviceName;\n        action = command.action;\n        feedbackMessage = `设备 ${deviceId} ${action === 'start' ? '启动' : '停止'} 命令已接收`;\n        \n        // 构建设备控制参数 - 这里根据实际设备接口定义\n        deviceParams = {\n            device: deviceId,\n            operation: action,\n            siteId:siteId\n            // 可添加特定设备所需参数\n        };\n    } \n    else if (command.valveName && (command.action === 'open' || command.action === 'close')) {\n        // 阀门控制\n        controlType = 'valve_control';\n        deviceId = command.valveName;\n        action = command.action;\n        feedbackMessage = `阀门 ${deviceId} ${action === 'open' ? '打开' : '关闭'} 命令已接收`;\n        \n        // 构建阀门控制参数\n        deviceParams = {\n            valve: deviceId,\n            operation: action,\n            openKey: command.openKey,  // 前端传递的特定开阀键值\n            closeKey: command.closeKey // 前端传递的特定关阀键值\n        };\n    }\n    else if (command.deviceName && command.frequency !== undefined) {\n        // 频率设置\n        controlType = 'set_frequency';\n        deviceId = command.deviceName;\n        action = 'set_frequency';\n        const frequency = parseFloat(command.frequency);\n        feedbackMessage = `设备 ${deviceId} 频率设置为 ${frequency} Hz 命令已接收`;\n        \n        // 构建频率设置参数\n        deviceParams = {\n            device: deviceId,\n            frequency: frequency\n        };\n    }\n    else {\n        // 未知命令类型\n        node.warn('无法识别的命令格式: ' + JSON.stringify(command));\n        \n        // 返回错误反馈\n        msg.payload = {\n            type: 'command_feedback',\n            siteId: siteId,\n            deviceName: command.deviceName || command.valveName,\n            success: false,\n            message: '无法识别的命令格式',\n            timestamp: Date.now()\n        };\n        return msg;\n    }\n    \n    // 设置控制信息到上下文，可用于其他节点\n    flow.set('lastControlCommand', {\n        type: controlType,\n        deviceId: deviceId,\n        action: action,\n        params: deviceParams,\n        timestamp: Date.now()\n    });\n    \n    // 创建设备控制输出 - 这将连接到实际设备控制节点\n    const deviceControlMsg = {\n        topic: controlType,\n        payload: deviceParams\n    };\n    \n    // 创建客户端反馈\n    const feedbackMsg = {\n        payload: {\n            type: 'command_feedback',\n            siteId: siteId,\n            deviceName: command.deviceName || command.valveName,\n            action: action,\n            success: true,\n            message: feedbackMessage,\n            timestamp: Date.now()\n        },\n        _clientId: clientId\n    };\n    \n    // 发送两个输出：[0]客户端反馈, [1]设备控制命令\n    return [feedbackMsg, deviceControlMsg];\n}\nelse {\n    // 非控制类型命令\n    node.warn('接收到非控制类型命令: ' + command.type);\n    return null;\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1820,
        "wires": [
            [
                "195d86e54a8e2d71"
            ],
            [
                "7d177404d055f441",
                "b99599ddef0dda94"
            ]
        ]
    },
    {
        "id": "d38213dcfe9e2075",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "处理初始化消息",
        "func": "const clientId = msg._clientId;\nconst siteId = msg.payload.siteId;\nconst clientInfo = msg.payload.clientInfo || {};\n\nnode.log(`客户端 ${clientId} 初始化连接，站点ID: ${siteId}`);\n\n// 发送确认初始化成功的消息\nmsg.payload = {\n    type: 'init_confirmed',\n    siteId: siteId,\n    message: '初始化成功',\n    timestamp: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1860,
        "wires": [
            [
                "195d86e54a8e2d71"
            ]
        ]
    },
    {
        "id": "d07c80bc8ac63c6f",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "处理客户端关闭",
        "func": "const clientId = msg._clientId;\nconst closeReason = msg.payload.reason || 'unknown';\n\nnode.log('客户端通知关闭: ' + clientId + ', 原因: ' + closeReason);\n\n// 从客户端列表中移除\nif (global.wsClients && global.wsClients[clientId]) {\n    delete global.wsClients[clientId];\n}\n\n// 发送确认关闭的消息\nmsg.payload = {\n    type: 'close_confirmed',\n    message: '连接已正常关闭',\n    timestamp: Date.now()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1900,
        "wires": [
            [
                "195d86e54a8e2d71"
            ]
        ]
    },
    {
        "id": "195d86e54a8e2d71",
        "type": "websocket out",
        "z": "6c0ea9e8463e36cf",
        "name": "WebSocket输出",
        "server": "85bc2088d91de0e1",
        "client": "",
        "x": 1000,
        "y": 1840,
        "wires": []
    },
    {
        "id": "13993e82554d0782",
        "type": "inject",
        "z": "6c0ea9e8463e36cf",
        "name": "定时清理客户端",
        "props": [],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1920,
        "wires": [
            [
                "cd3c13b39e744373"
            ]
        ]
    },
    {
        "id": "cd3c13b39e744373",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "清理断开的客户端",
        "func": "// 此函数定期执行，清理长时间不活跃的客户端\nif (!global.wsClients) {\n    return null;\n}\n\nconst now = Date.now();\nconst inactiveThreshold = 60000; // 60秒不活跃视为断开\n\nlet cleanCount = 0;\nfor (let clientId in global.wsClients) {\n    const client = global.wsClients[clientId];\n    const lastActiveTime = client.lastActive || 0;\n    \n    // 如果客户端超过60秒没有活动，认为已断开\n    if (now - lastActiveTime > inactiveThreshold) {\n        delete global.wsClients[clientId];\n        cleanCount++;\n    }\n}\n\nif (cleanCount > 0) {\n    node.log('已清理 ' + cleanCount + ' 个不活跃的客户端连接');\n}\n\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "b3f3e5f0dfd522d7",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "处理设备状态请求",
        "func": "const siteId = msg.payload.siteId;\nif (!siteId) {\n    node.warn('没有指定siteId，无法获取设备状态');\n    return null;\n}\n\n// 首先确认收到状态请求\nmsg.payload = {\n    type: 'status_request_received',\n    siteId: siteId,\n    message: '状态请求已接收，正在处理',\n    timestamp: Date.now()\n};\n\n// 发送确认消息\nnode.send(msg);\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1780,
        "wires": [
            [
                "195d86e54a8e2d71"
            ]
        ]
    },
    {
        "id": "97371a8226522e51",
        "type": "mqtt out",
        "z": "6c0ea9e8463e36cf",
        "name": "命令主题",
        "topic": "/DownloadTopic111",
        "qos": "2",
        "retain": "",
        "respTopic": "/RespondTopic111",
        "contentType": "",
        "userProps": "",
        "correl": "msg._msgid",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 1300,
        "y": 2020,
        "wires": []
    },
    {
        "id": "84f6590c4f2607ba",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "1#泵控制",
        "func": "var aaa = flow.get(\"TSB1_YX\");\nif(aaa === 1){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO1\", \"value\": \"0\" }] } };\n    flow.set(\"start1\", 0);\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO1\", \"value\": \"1\" }] } };\n    flow.set(\"start1\", 1);\n}\n// 保存原始HTTP请求对象\nmsg._httpReq = msg.req;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 2000,
        "wires": [
            [
                "97371a8226522e51"
            ]
        ]
    },
    {
        "id": "8276543ce28c493f",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "2#泵控制",
        "func": "var aaa = flow.get(\"TSB2_YX\");\nif(aaa === 1){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO2\", \"value\": \"0\" }] } };\n    flow.set(\"start1\", 0);\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO2\", \"value\": \"1\" }] } };\n    flow.set(\"start1\", 1);\n}\n// 保存原始HTTP请求对象\nmsg._httpReq = msg.req;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 2040,
        "wires": [
            [
                "97371a8226522e51"
            ]
        ]
    },
    {
        "id": "b99599ddef0dda94",
        "type": "switch",
        "z": "6c0ea9e8463e36cf",
        "name": "站点",
        "property": "payload.siteId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 750,
        "y": 2020,
        "wires": [
            [
                "6e8a046d222177bc",
                "73f65d33c0025a86"
            ]
        ]
    },
    {
        "id": "6e8a046d222177bc",
        "type": "switch",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "property": "payload.device",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1#进水泵(h)",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2#进水泵(h)",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 2040,
        "wires": [
            [
                "84f6590c4f2607ba"
            ],
            [
                "8276543ce28c493f"
            ]
        ]
    },
    {
        "id": "de59ae3f2aa5c4b1",
        "type": "function",
        "z": "6c0ea9e8463e36cf",
        "name": "处理设备状态请求",
        "func": "const siteId = \"2\";\n\n// 获取设备状态（flow 变量）\nconst tsb1_yx = flow.get('TSB1_YX') || 0;\nconst tsb2_yx = flow.get('TSB2_YX') || 0;\n\n// 延迟发送设备状态\nsetTimeout(() => {\n    const deviceStatusData = {\n        type: 'device_status',\n        siteId: siteId,\n        timestamp: Date.now(),\n        devices: [\n            { name: '1#进水泵(h)', run: tsb1_yx, fault: 0 },\n            { name: '2#进水泵(h)', run: tsb2_yx, fault: 0 },\n        ]\n    };\n\n    // 发送设备状态消息\n    node.send({\n        payload: deviceStatusData,\n        _clientId: msg._clientId\n    });\n}, 500);\n\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1980,
        "wires": [
            [
                "195d86e54a8e2d71"
            ]
        ]
    },
    {
        "id": "d27f4f5e52b3d439",
        "type": "inject",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 1980,
        "wires": [
            [
                "de59ae3f2aa5c4b1"
            ]
        ]
    },
    {
        "id": "7d177404d055f441",
        "type": "json",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 750,
        "y": 1960,
        "wires": [
            [
                "b99599ddef0dda94"
            ]
        ]
    },
    {
        "id": "73f65d33c0025a86",
        "type": "switch",
        "z": "6c0ea9e8463e36cf",
        "name": "",
        "property": "payload.deviceName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1#进水泵(h)",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2#进水泵(h)",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 2000,
        "wires": [
            [
                "84f6590c4f2607ba"
            ],
            [
                "8276543ce28c493f"
            ]
        ]
    },
    {
        "id": "d0a327eb3365febb",
        "type": "mqtt in",
        "z": "b5398a90c32509d2",
        "name": "",
        "topic": "PubTopic999",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 160,
        "wires": [
            [
                "1c86b012279fe261",
                "330c9c22b9c6522a",
                "1750836992685b5d"
            ]
        ]
    },
    {
        "id": "0b5693ea5c31deb5",
        "type": "aedes broker",
        "z": "b5398a90c32509d2",
        "name": "",
        "mqtt_port": 1883,
        "mqtt_ws_bind": "path",
        "mqtt_ws_port": "1880",
        "mqtt_ws_path": "/mqtt",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "dburl": "",
        "usetls": false,
        "x": 110,
        "y": 20,
        "wires": [
            [
                "38e07ed18d8deec7"
            ],
            [
                "eb5d0acb793a46b8"
            ]
        ]
    },
    {
        "id": "ca25a6cfd139702a",
        "type": "websocket out",
        "z": "b5398a90c32509d2",
        "name": "",
        "server": "66af7c552a144e23",
        "client": "",
        "x": 580,
        "y": 180,
        "wires": []
    },
    {
        "id": "14d7beb0ad0c9df1",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "1#PAC",
        "func": "var aaa = flow.get(\"PACJYJLB1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJLB1_ST\", \"value\": \"0\" }, { \"name\": \"PACJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJLB1_ST\", \"value\": \"1\" }, { \"name\": \"PACJBJ_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "5b1f303c4cf040f5",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "2#PACJBJ",
        "func": "var aaa = flow.get(\"TYJYJBJ\")\nif(aaa === 1){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"TYJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"TYJYJBJ_ST\", \"value\": \"1\"}] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "b7e2a1bc96b01a91",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "1#PACJBJ",
        "func": "var aaa = flow.get(\"PACJBJ\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJBJ_ST\", \"value\": \"1\"}] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "0cd616f79319423c",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "2#PAC",
        "func": "var aaa = flow.get(\"PACJYJLB2\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJLB2_ST\", \"value\": \"0\" }, { \"name\": \"PACJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJLB2_ST\", \"value\": \"1\" }, { \"name\": \"PACJBJ_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "786b4f01ca6d7e5a",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "泵",
        "func": "var aaa = flow.get(\"进水泵\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"do1\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"do1\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 480,
        "wires": [
            [
                "159ede38aaaff9cd"
            ]
        ]
    },
    {
        "id": "9c6adc7217cb0ca1",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "1#回流泵",
        "func": "var aaa = flow.get(\"1#回流泵\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"HLB1\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"HLB1\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 520,
        "wires": [
            [
                "159ede38aaaff9cd"
            ]
        ]
    },
    {
        "id": "f125a9113c97da30",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "排泥阀",
        "func": "var aaa = flow.get(\"JBJ1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"QSJBJ1_ST\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"QSJBJ1_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "d7f1bbcf4aea2085",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "1#PAM",
        "func": "var aaa = flow.get(\"XDJYJLB1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJLB1_ST\", \"value\": \"0\" }, { \"name\": \"XDJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJLB1_ST\", \"value\": \"1\" }, { \"name\": \"XDJYJBJ_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "55ba0d910afc8488",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "2#PAM",
        "func": "var aaa = flow.get(\"XDJYJLB2\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJLB2_ST\", \"value\": \"0\" }, { \"name\": \"XDJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJLB2_ST\", \"value\": \"1\" }, { \"name\": \"XDJYJBJ_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "7c862353510dc3c3",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "HNJBJ",
        "func": "var aaa = flow.get(\"混凝搅拌器\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"HN_JBQ\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"HN_JBQ\", \"value\": \"1\"}] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 600,
        "wires": [
            [
                "159ede38aaaff9cd"
            ]
        ]
    },
    {
        "id": "58bac23a2a837e4d",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "2#回流泵",
        "func": "var aaa = flow.get(\"2#回流泵\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"HLB2\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"HLB2\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 560,
        "wires": [
            [
                "159ede38aaaff9cd"
            ]
        ]
    },
    {
        "id": "1c86b012279fe261",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "websocket",
        "func": "// 获取输入数据\nvar burrf = msg.payload || {};\nvar lwji = flow.get('yz_lj');\nvar jsb = msg.payload.SPEND > 10 ? 1 : 0; // 使用三元运算符简化\n\nvar dataflow = [\n    { name: '进水流量计', data: msg.payload.JSL, dw: 'm³/h', alarm: 0 },\n    { name: '进水量累计', data: lwji, dw: 'm³', alarm: 0 },\n    { name: '回流流量计', data: msg.payload.HLL, dw: 'm³/h', alarm: 0 },\n    { name: 'PAC投加量', data: 0, dw: 'm³/h', alarm: 0 },\n    { name: 'PAM投加量', data: 0, dw: 'm³/h', alarm: 1},\n    { name: '出水浊度', data: msg.payload.SS, dw: 'm³', alarm: 0 },\n];\n\nvar deviceFrequency = [\n    { name: '进水泵', hz: msg.payload.HZ, sethz: msg.payload.T1_HZ },\n    { name: '备用', hz: 0, sethz: 0 },\n    { name: '1#回流泵', hz: msg.payload.HL1F_HZ, sethz: msg.payload.HL1P_HZ },\n    { name: '2#回流泵', hz: msg.payload.HL2F_HZ, sethz: msg.payload.HL2P_HZ },\n    { name: '混凝搅拌器', hz: msg.payload.HLQF_HZ, sethz: msg.payload.HLQP_HZ },\n    { name: '絮凝搅拌器', hz: msg.payload.XLQF_HZ, sethz: msg.payload.XLQP_HZ },\n    { name: '刮泥机', hz: msg.payload.GLJF_HZ, sethz: msg.payload.GLJP_HZ },\n    { name: '磁种回收机', hz: msg.payload.CHHF_HZ, sethz: msg.payload.CHHP_HZ },\n];\n\n// 定义设备列表\nvar devices = [\n    { name: '进水泵', running: jsb, fault: 0 },\n    { name: '备用', running: 0, fault: 1 },\n    { name: '1#回流泵', running: 'ZT1', fault: 'GZZ8' },\n    { name: '2#回流泵', running: 'ZT2', fault: 'GZZ9' },\n    { name: '混凝搅拌器', running: 'ZT3', fault: 'GZZ10' },\n    { name: '絮凝搅拌器', running: 'ZT4', fault: 'GZZ11' },\n    { name: '刮泥机', running: 'ZT5', fault: 'GZZ12' },\n    { name: '磁种回收机', running: 'ZT6', fault: 'GZZ13' },\n    { name: '1#PAC搅拌器', running: 'PAC_JBQ1_R', fault: 'GZZ1' },\n    { name: '2#PAC搅拌器', running: 'PAC_JBQ2_R', fault: 'GZZ2' },\n    { name: 'PAC加药1#计量泵', running: 'P101_R', fault: 'GZZ6' },\n    { name: 'PAC加药2#计量泵', running: 'P102_R', fault: 'GZZ7' },\n    { name: 'PAM加药1#计量泵', running: 'YLZ_PAM_JBQ1_R', fault: 'GZZ3' },\n    { name: 'PAM加药2#计量泵', running: 'YLZ_PAM_JBQ2_R', fault: 'GZZ4' },\n    { name: '排泥电动阀', open: 0, close: 1, fault: 0, isValve: true },\n];\n\n// 生成设备状态列表\nvar devicesStatus = devices.map(function (device) {\n    let running = 0;\n    let fault = burrf[device.fault] || 0;\n\n    if (device.isValve) {\n        running = burrf[device.open] ? 1 : (burrf[device.close] ? 0 : 0);\n    } else {\n        // 修改这里以确保进水泵使用 jsb 的值\n        running = device.name === '进水泵' ? jsb : (burrf[device.running] || 0);\n    }\n\n    return {\n        name: device.name,\n        running: running,\n        fault: fault\n    };\n});\n\n// 构建最终的消息负载\nmsg.payload = {\n    dataflow,\n    deviceFrequency,\n    devices: devicesStatus,\n};\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            [
                "ca25a6cfd139702a"
            ]
        ]
    },
    {
        "id": "9f03f331e82a776c",
        "type": "websocket in",
        "z": "b5398a90c32509d2",
        "name": "",
        "server": "66af7c552a144e23",
        "client": "",
        "x": 120,
        "y": 720,
        "wires": [
            [
                "d54a2ac298ab15fd",
                "97cc9ff7e91f55f6"
            ]
        ]
    },
    {
        "id": "8c89045cd3b823b0",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.device;\n\n// 设备名称到输出索引的映射\nconst deviceMapping = {\n    '进水泵': 0,\n    '备用': 1,\n    '1#回流泵': 2,\n    '2#回流泵': 3,\n    '混凝搅拌器': 4,\n    '絮凝搅拌器': 5,\n    '刮泥机': 6,\n    '磁种回收机': 7,\n    '1#PAC搅拌器': 8,\n    '2#PAC搅拌器': 9,\n    'PAC加药1#计量泵': 10,\n    'PAC加药2#计量泵': 11,\n    'PAM加药1#计量泵': 12,\n    'PAM加药2#计量泵': 13,\n    '排泥电动阀': 14,\n    // 添加更多设备名称和索引，如果需要\n};\n\n// 初始化输出数组，包含15个输出端口\nlet outputs = new Array(15).fill(null);\n\n// 获取对应的输出索引\nlet outputIndex = deviceMapping[deviceName];\n\nif (outputIndex !== undefined && outputIndex < outputs.length) {\n    // 设置对应的输出\n    outputs[outputIndex] = msg;\n}\n\n// 返回所有输出端口\nreturn outputs;\n",
        "outputs": 15,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 720,
        "wires": [
            [
                "786b4f01ca6d7e5a"
            ],
            [],
            [
                "9c6adc7217cb0ca1"
            ],
            [
                "58bac23a2a837e4d"
            ],
            [
                "7c862353510dc3c3"
            ],
            [
                "d08d576e1176a53f"
            ],
            [
                "b325df2f76faab4c"
            ],
            [
                "4bc4c53c7c7dc4d5"
            ],
            [
                "b7e2a1bc96b01a91"
            ],
            [
                "5b1f303c4cf040f5"
            ],
            [
                "14d7beb0ad0c9df1"
            ],
            [
                "0cd616f79319423c"
            ],
            [
                "d7f1bbcf4aea2085"
            ],
            [
                "55ba0d910afc8488"
            ],
            [
                "f125a9113c97da30"
            ]
        ]
    },
    {
        "id": "330c9c22b9c6522a",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "function 145",
        "func": "// 获取输入数据\nvar burrf = msg.payload || {};\nvar jsb = burrf.SPEND > 10 ? 1 : 0; // 根据条件设置 jsb 值\nvar yz_ll = msg.payload.JSL;\nflow.set(\"yz_ll\",yz_ll)\n// 定义设备列表\nvar devices = [\n    { name: '进水泵', running: jsb }, // 使用 jsb 的值\n    { name: '备用', running: 0 },\n    { name: '1#回流泵', running: 'ZT1' },\n    { name: '2#回流泵', running: 'ZT2' },\n    { name: '混凝搅拌器', running: 'ZT3' },\n    { name: '絮凝搅拌器', running: 'ZT4' },\n    { name: '刮泥机', running: 'ZT5' },\n    { name: '磁种回收机', running: 'ZT6' },\n    { name: '1#PAC搅拌器', running: 'PAC_JBQ1_R' },\n    { name: '2#PAC搅拌器', running: 'PAC_JBQ2_R' },\n    { name: 'PAC加药1#计量泵', running: 'P101' },\n    { name: 'PAC加药2#计量泵', running: 'P102' },\n    { name: 'PAM加药1#计量泵', running: 'YLZ_PAM_JBQ1_R' },\n    { name: 'PAM加药2#计量泵', running: 'YLZ_PAM_JBQ2_R' },\n    { name: '排泥电动阀', open: 0, close: 1, isValve: true },\n];\n\n// 获取设备状态并存储到上下文变量\ndevices.forEach(function(device) {\n    var running = device.name === '进水泵' ? jsb : (burrf[device.running] || 0); // 使用 jsb 或从 burrf 获取状态\n    flow.set(device.name , running); // 存储到上下文变量\n});\n\n// 返回原始消息\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d08d576e1176a53f",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "XNJBJ",
        "func": "var aaa = flow.get(\"XDJBJ\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJBJ_ST\", \"value\": \"1\"}] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "b325df2f76faab4c",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "GNJ",
        "func": "var aaa = flow.get(\"XDJBJ\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJBJ_ST\", \"value\": \"1\"}] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "4bc4c53c7c7dc4d5",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "CZHSJ",
        "func": "var aaa = flow.get(\"XDJBJ\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJBJ_ST\", \"value\": \"1\"}] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "867b99522a275935",
        "type": "inject",
        "z": "b5398a90c32509d2",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "b631c9b182503ea9",
                "50233144a9848031"
            ]
        ]
    },
    {
        "id": "b631c9b182503ea9",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "总量累计",
        "func": "\nvar gdlqll1 = flow.get(\"yz_ll\");\nvar gdlqll = gdlqll1/3.6;\n// 计算累积流量\nif (!flow.get(\"lwjioutlqll1\")) {\n    flow.set(\"lwjioutlqll1\", 0);\n};\n\n\nvar cumu = flow.get(\"lwjioutlqll1\");\nvar cumu1 = cumu + gdlqll;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjioutlqll1\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nmsg.payload = cumu3;\nflow.set(\"yz_lj\", cumu3);\nglobal.set(\"yzlj\",cumu3);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "c55b4354f1cd8d5e",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "定时",
        "func": "var time = global.get(\"cstTime\"); // 获取时间对象\nvar hour = time.hour;\nvar minute = time.minute;\nvar second = time.second;\n\n// 检查是否为指定的时间 10:47:00\nif (hour === 0 && minute === 0 && second === 0) {\n    msg.payload = 0;\n    return msg; \n} else {\n    return null; \n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 420,
        "wires": [
            [
                "f7e81a01e16b5b86"
            ]
        ]
    },
    {
        "id": "f7e81a01e16b5b86",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "累计清零",
        "func": "var rest = msg.payload;\nflow.set(\"lwjioutlqll1\", rest);\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "a9a68fd558b345c8",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "function 146",
        "func": "var dev = flow.get('device1')\nif (dev === 0){\n    var dataflow = [\n    { name: '进水流量计', data: 0, dw: 'm³/h' },\n    { name: '进水量累计', data: flow.get('yz_lj'), dw: 'm³' },\n    { name: '回流流量计', data: 0, dw: 'm³/h' },\n    { name: 'PAC投加量', data: 0, dw: 'm³/h' },\n    { name: 'PAM投加量', data: 0, dw: 'm³/h' },\n    { name: '出水浊度', data: 0, dw: 'm³' },\n   ];\n\n    var deviceFrequency = [\n    { name: '进水泵', hz: 0, sethz: 0 },\n    { name: '备用', hz: 0, sethz: 0 },\n    { name: '1#回流泵', hz: 0, sethz: 0 },\n    { name: '2#回流泵', hz:0, sethz: 0 },\n    { name: '混凝搅拌器', hz: 0, sethz: 0 },\n    { name: '絮凝搅拌器', hz: 0, sethz:0 },\n    { name: '刮泥机', hz:0, sethz: 0 },\n    { name: '磁种回收机', hz: 0, sethz: 0 },\n  ];\n\n// 定义设备列表\n    var devices = [\n    { name: '进水泵', running: 0, fault: 0 },\n    { name: '备用', running: 0, fault: 1 },\n    { name: '1#回流泵', running: 0, fault: 0 },\n    { name: '2#回流泵', running: 0, fault: 0 },\n    { name: '混凝搅拌器', running: 0, fault: 0 },\n    { name: '絮凝搅拌器', running: 0, fault: 0 },\n    { name: '刮泥机', running: 0, fault: 0 },\n    { name: '磁种回收机', running: 0, fault: 0 },\n    { name: '1#PAC搅拌器', running: 0, fault: 0 },\n    { name: '2#PAC搅拌器', running: 0, fault: 0 },\n    { name: 'PAC加药1#计量泵', running: 0, fault: 0 },\n    { name: 'PAC加药2#计量泵', running: 0, fault: 0 },\n    { name: 'PAM加药1#计量泵', running: 0, fault:0 },\n    { name: 'PAM加药2#计量泵', running: 0, fault: 0 },\n    { name: '排泥电动阀', open: 0, close: 1, fault: 0, isValve: true },\n  ];\n\n// 构建最终的消息负载\n   msg.payload = {\n       dataflow,\n       deviceFrequency,\n       devices,\n   };\n    return msg;\n}else{\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 260,
        "wires": [
            [
                "ca25a6cfd139702a"
            ]
        ]
    },
    {
        "id": "1750836992685b5d",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "网关检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1') === undefined) {\n    flow.set('initialized1', true);\n    flow.set('lastMessageTime1', null);\n    flow.set('timeoutId1', null);\n    flow.set('status1', \"离线\"); // 用于在线/离线状态\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    return { payload: \"设备离线\", topic: \"device/status\" };\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    flow.set('status1', \"离线\"); // 超时则设备为离线\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    node.send({ payload: \"设备离线\", topic: \"device/status\" });\n}\n\n// 如果有现有的超时，清除它\nif (flow.get('timeoutId1') !== null) {\n    clearTimeout(flow.get('timeoutId1'));\n}\n\n// 更新最后接收到消息的时间\nflow.set('lastMessageTime1', Date.now());\n\n// 接收到任何数据时都视为设备在线\nflow.set('status1', \"在线\");\nnode.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\nnode.send({ payload: \"设备在线\", topic: \"device/status\" });\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1', timeoutId);\n\n// 向外发送设备当前状态\nreturn {\n    payload: {\n        deviceStatus: flow.get('status1'),\n    },\n    topic: \"device/status\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8a2e070d05280103",
        "type": "http request",
        "z": "b5398a90c32509d2",
        "name": "发送模板消息",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1220,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f064275686281d27",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "设备离线告警",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"vpks8dx3GNykOuZPNUKeBYB9v0C6ZOXoOkysC1DNWVY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing7\": {\n            \"value\": \"殷庄处理站\",\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": \"终端网关\",\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": \"离线\",\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 340,
        "wires": [
            [
                "8a2e070d05280103"
            ]
        ]
    },
    {
        "id": "3414936b2f7d4309",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "设备上线告警",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"-nOwSKt3OHr4NZd0gKG5uJ7YgDa1EI57Qb5Sz2BR_lY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing11\": {\n            \"value\": \"殷庄处理站\",\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": \"终端网关\",\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": \"上线\",\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 300,
        "wires": [
            [
                "8a2e070d05280103"
            ]
        ]
    },
    {
        "id": "79c1940e7e6d5de8",
        "type": "switch",
        "z": "b5398a90c32509d2",
        "name": "设备状态切换",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "设备在线",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备离线",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 560,
        "y": 320,
        "wires": [
            [
                "ecf70e5d67a19271"
            ],
            [
                "d841415b47e72f8b",
                "a9a68fd558b345c8"
            ]
        ]
    },
    {
        "id": "725035814bcea692",
        "type": "split",
        "z": "b5398a90c32509d2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 300,
        "wires": [
            [
                "3414936b2f7d4309"
            ]
        ]
    },
    {
        "id": "ecf70e5d67a19271",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 300,
        "wires": [
            [
                "725035814bcea692"
            ]
        ]
    },
    {
        "id": "d841415b47e72f8b",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 340,
        "wires": [
            [
                "4d3d63e823152041"
            ]
        ]
    },
    {
        "id": "4d3d63e823152041",
        "type": "split",
        "z": "b5398a90c32509d2",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 340,
        "wires": [
            [
                "f064275686281d27"
            ]
        ]
    },
    {
        "id": "d54a2ac298ab15fd",
        "type": "debug",
        "z": "b5398a90c32509d2",
        "name": "debug 400",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 260,
        "y": 820,
        "wires": []
    },
    {
        "id": "6ac251cb4c551ea7",
        "type": "mqtt out",
        "z": "b5398a90c32509d2",
        "name": "",
        "topic": "SubTopic999",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 1210,
        "y": 700,
        "wires": []
    },
    {
        "id": "159ede38aaaff9cd",
        "type": "debug",
        "z": "b5398a90c32509d2",
        "name": "debug 401",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 540,
        "wires": []
    },
    {
        "id": "97cc9ff7e91f55f6",
        "type": "json",
        "z": "b5398a90c32509d2",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 290,
        "y": 720,
        "wires": [
            [
                "8c89045cd3b823b0"
            ]
        ]
    },
    {
        "id": "50233144a9848031",
        "type": "function",
        "z": "b5398a90c32509d2",
        "name": "function 149",
        "func": "\nvar b = flow.get('status1')\nif (b === \"在线\") {\n    var a = 1;\n} else if (b === \"离线\") {\n    a = 0;\n}\n// 获取保存的上次状态值，存储在 flow 级别的变量中\nlet lastStatus = flow.get(\"lastStatus\");\n\n// 检查是否有状态变化，或者是首次设置状态（lastStatus 为 undefined）\nif (a === 1 && lastStatus !== 1) {\n    // 设备从离线（或首次在线）变为在线，发送在线消息\n    node.send({ payload: \"设备在线\" });\n    flow.set(\"lastStatus\", 1);  // 更新状态为在线\n} else if (a === 0 && lastStatus !== 0) {\n    // 设备从在线（或首次离线）变为离线，发送离线消息\n    node.send({ payload: \"设备离线\" });\n    flow.set(\"lastStatus\", 0);  // 更新状态为离线\n}\n\n// 不发送消息时，返回 null\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 320,
        "wires": [
            [
                "79c1940e7e6d5de8"
            ]
        ]
    },
    {
        "id": "38e07ed18d8deec7",
        "type": "debug",
        "z": "b5398a90c32509d2",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 20,
        "wires": []
    },
    {
        "id": "eb5d0acb793a46b8",
        "type": "debug",
        "z": "b5398a90c32509d2",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 60,
        "wires": []
    },
    {
        "id": "903b5ce5a2b870c4",
        "type": "mqtt in",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "topic": "/PubTopic666",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 1020,
        "wires": [
            [
                "ca3553a1221df671",
                "fc1594aecd8cb6d0",
                "79b6276a6ae8b459",
                "4341bdc1b000e8ee",
                "162746a020230b46",
                "f3f321c5a476e350",
                "a202be4cdbaaebe0",
                "5afc1a1633303e54",
                "eb88fb60a36ba533",
                "ce102c15386dd27b",
                "8e763be125c16b5f",
                "94b144829e0a736e",
                "a75938b8e7956c1c",
                "6e60b0280e162b30",
                "05c489c7cc7621e4",
                "c6dd9b7d47d7a83a",
                "a89a2f3104bde640",
                "0c6dd27390b84c1e",
                "9a793a88b905903b",
                "6fc767403f4b5313",
                "655cbffb0c4495cf",
                "1eb63ce9f82a34ef",
                "f119ec6ff74d664a",
                "84f8335995a0cb41",
                "786a76fb5a0675bc",
                "860e12e46c6395c7",
                "716014f2e3e60a41",
                "2eb6b69aa6d901f8",
                "9702835b8d25c3f6",
                "9ad710b5ece38ef2",
                "39e874a2b640dd2a",
                "fa77ed27c46d481e"
            ]
        ]
    },
    {
        "id": "ca3553a1221df671",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#干式自吸泵运行",
        "func": "\nvar aaa = msg.payload.GSZXB1_YC;\nvar input = msg.payload.GSZXB1_YX;\nflow.set(\"GSZXB1\",input)\nvar input = msg.payload.GSZXB1_GZ;\nflow.set(\"alarm\",input);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "fc1594aecd8cb6d0",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#干式自吸泵运行",
        "func": "var input = msg.payload.GSZXB2_YX;\nvar input1 = msg.payload.GSZXB2_YC;\nflow.set(\"GSZXB2\",input)\nvar input2 = msg.payload.GSZXB2_GZ;\nflow.set(\"alarm\",input2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "79b6276a6ae8b459",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#硝化液回流泵运行",
        "func": "var input = msg.payload.XHYHLB1_YX;\nvar input1 = msg.payload.XHYHLB1_YC;\nvar input2 = msg.payload.XHYHLB1_GZ;\nflow.set(\"XHB1\", input)\nflow.set(\"alarm\",input2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "4341bdc1b000e8ee",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#硝化液回流泵运行",
        "func": "var input = msg.payload.XHYHLB2_YX;\nvar input1 = msg.payload.XHYHLB2_YC;\nvar input2 = msg.payload.XHYHLB2_GZ;\nflow.set(\"XHB2\", input)\nflow.set(\"alarm\", input2);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "162746a020230b46",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#污泥回流泵运行",
        "func": "var input = msg.payload.WNHLB1_YX;\nvar input1 = msg.payload.WNHLB1_YC;\nvar input2 = msg.payload.WNHLB1_GZ;\nflow.set(\"WNHLB1\", input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "f3f321c5a476e350",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#罗茨风机运行",
        "func": "var input = msg.payload.LCFJ1_YX;\nvar input1 = msg.payload.LCFJ1_YC;\nvar input2 = msg.payload.LCFJ1_GZ;\nflow.set(\"LCFJ1\", input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "a202be4cdbaaebe0",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#潜水搅拌机",
        "func": "var input = msg.payload.QSJBJ1_YX;\nvar input1 = msg.payload.QSJBJ1_YC;\nvar input2 = msg.payload.QSJBJ1_GZ;\nflow.set(\"JBJ1\", input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "a89a2f3104bde640",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "碳源加药搅拌机运行",
        "func": "var input = msg.payload.TYJYJBJ_YX;\nvar input1 = msg.payload.TYJYJBJ_YC;\nvar input2 = msg.payload.TYJYJBJ_GZ;\nflow.set(\"TYJYJBJ\",input)\nmsg.payload = input;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "0c6dd27390b84c1e",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "PAC加药搅拌机运行",
        "func": "var input = msg.payload.PACJBJ_YX;\nvar input1 = msg.payload.PACJBJ_YC;\nvar input2 = msg.payload.PACJBJ_GZ;\nflow.set(\"PACJBJ\",input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "9a793a88b905903b",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "消毒加药搅拌机运行",
        "func": "var input = msg.payload.XDJYJBJ_YX;\nvar input1 = msg.payload.XDJYJBJ_YC;\nvar input2 = msg.payload.XDJYJBJ_GZ;\nflow.set(\"XDJBJ\",input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "6fc767403f4b5313",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "碳源加药1#计量泵运行",
        "func": "var input = msg.payload.TYJYJLB1_YX;\nvar input1 = msg.payload.TYJYJLB1_YC;\nvar input2 = msg.payload.TYJYJLB1_GZ;\nflow.set(\"TYJYJLB1\",input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "1eb63ce9f82a34ef",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "PAC加药1#计量泵运行",
        "func": "var input = msg.payload.PACJLB1_YX;\nvar input1 = msg.payload.PACJLB1_YC;\nvar input2 = msg.payload.PACJLB1_GZ;\nflow.set(\"PACJYJLB1\",input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "f119ec6ff74d664a",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "PAC加药2#计量泵运行",
        "func": "var input = msg.payload.PACJLB2_YX;\nvar input1 = msg.payload.PACJLB2_YC;\nvar input2 = msg.payload.PACJLB2_GZ;\n\nflow.set(\"PACJYJLB2\",input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "84f8335995a0cb41",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "消毒加药1#计量泵运行",
        "func": "var input = msg.payload.XDJYJLB1_YX;\nvar input1 = msg.payload.XDJYJLB1_YC;\nvar input2 = msg.payload.XDJYJLB1_GZ;\nflow.set(\"XDJYJLB1\", input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "786a76fb5a0675bc",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "消毒加药2#计量泵运行",
        "func": "var input = msg.payload.XDJYJLB2_YX;\nvar input1 = msg.payload.XDJYJLB2_YC;\nvar input2 = msg.payload.XDJYJLB2_GZ;\nflow.set(\"XDJYJLB2\", input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "860e12e46c6395c7",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "5#电动蝶阀",
        "func": "var input = msg.payload.DDF5_OW;\nvar input1 = msg.payload.DDF5_YC;\nvar input2 = msg.payload.DDF5_CW;\nvar input3 = msg.payload.EM0_IN_15;\nflow.set(\"DFOW5\", input)\nflow.set(\"DFCW5\", input2)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "716014f2e3e60a41",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#电动蝶阀",
        "func": "var input = msg.payload.DDF1_OW;\nvar input1 = msg.payload.DDF1_YC;\nvar input2 = msg.payload.DDF1_CW;\nvar input3 = msg.payload.DDF1_GZ;\n\nflow.set(\"DFOW1\", input)\nflow.set(\"DFCW1\", input2)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "94b144829e0a736e",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#电动蝶阀开到位",
        "func": "var input = msg.payload.DDF2_OW;\nvar input1 = msg.payload.DDF2_YC;\nvar input2 = msg.payload.DDF2_CW;\nvar input3 = msg.payload.DDF2_GZ;\nflow.set(\"DFOW2\", input)\nflow.set(\"DFCW2\", input2)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "a75938b8e7956c1c",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "3#电动蝶阀开到位",
        "func": "var input = msg.payload.DDF3_OW;\nvar input1 = msg.payload.DDF3_YC;\nvar input2 = msg.payload.DDF3_CW;\nvar input3 = msg.payload.DDF3_GZ;\nflow.set(\"DFOW3\", input)\nflow.set(\"DFOW3\", input2)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "6e60b0280e162b30",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "4#电动蝶阀开到位",
        "func": "var input = msg.payload.DDF4_OW;\nvar input1 = msg.payload.DDF4_YC;\nvar input2 = msg.payload.DDF4_CW;\nvar input3 = msg.payload.DDF4_GZ;\n\nflow.set(\"DFOW4\", input)\nflow.set(\"DFCW4\", input2)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "05c489c7cc7621e4",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#电动球阀开到位",
        "func": "var input = msg.payload.DDQF1_OW;\nvar input1 = msg.payload.DDQF1_YC;\nvar input2 = msg.payload.DDQF1_CW;\nvar input3 = msg.payload.DDQF1_GZ;\nflow.set(\"QFOW1\", input)\nflow.set(\"QFCW1\", input2)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "c6dd9b7d47d7a83a",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#电动球阀开到位",
        "func": "var input = msg.payload.DDQF2_OW;\nvar input = msg.payload.DDQF2_YC;\nvar input = msg.payload.DDQF2_CW;\nvar input = msg.payload.DDQF2_GZ;\nflow.set(\"QFOW2\", input)\nflow.set(\"QFCW2\", input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "5afc1a1633303e54",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#污泥回流泵运行",
        "func": "var input = msg.payload.WNHLB2_YX;\nvar input1 = msg.payload.WNHLB2_YC;\nvar input2 = msg.payload.WNHLB2_GZ;\nflow.set(\"WNHLB2\", input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "eb88fb60a36ba533",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#罗茨风机运行",
        "func": "var input = msg.payload.LCFJ2_YX;\nvar input1 = msg.payload.LCFJ2_YC;\nvar input2 = msg.payload.LCFJ2_GZ;\nflow.set(\"LCFJ2\", input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "ce102c15386dd27b",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#潜水搅拌机运行",
        "func": "var input = msg.payload.QSJBJ2_YX;\nvar input1 = msg.payload.QSJBJ2_YC;\nvar input2 = msg.payload.QSJBJ2_GZ;\nflow.set(\"JBJ2\", input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "655cbffb0c4495cf",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "碳源加药2#计量泵运行",
        "func": "var input = msg.payload.TYJYJLB2_YX;\nvar input1 = msg.payload.TYJYJLB2_YC;\nvar input2 = msg.payload.TYJYJLB2_GZ;\nflow.set(\"TYJYJLB2\",input)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "f3592552eba0e538",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#碳源",
        "func": "var aaa = flow.get(\"TYJYJLB1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"TYJYJLB1_ST\", \"value\": \"0\" }, { \"name\": \"TYJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"TYJYJLB1_ST\", \"value\": \"1\" }, { \"name\": \"TYJYJBJ_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 460,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "a0b60fc1953fc13e",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#PAC",
        "func": "var aaa = flow.get(\"PACJYJLB1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJLB1_ST\", \"value\": \"0\" }, { \"name\": \"PACJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJLB1_ST\", \"value\": \"1\" }, { \"name\": \"PACJBJ_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 540,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "58294956f00b4780",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#碳源JBJ",
        "func": "var aaa = flow.get(\"TYJYJBJ\")\nif(aaa === 1){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"TYJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"TYJYJBJ_ST\", \"value\": \"1\"}] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 340,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "9ef9a4024b00a78f",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#PACJBJ",
        "func": "var aaa = flow.get(\"PACJBJ\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJBJ_ST\", \"value\": \"1\"}] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 380,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "735de75f6de5ef9e",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#碳源",
        "func": "var aaa = flow.get(\"TYJYJLB2\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"TYJYJLB2_ST\", \"value\": \"0\" }, { \"name\": \"TYJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"TYJYJLB2_ST\", \"value\": \"1\" }, { \"name\": \"TYJYJBJ_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 500,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "bbf328d408291ecc",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#PAC",
        "func": "var aaa = flow.get(\"PACJYJLB2\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJLB2_ST\", \"value\": \"0\" }, { \"name\": \"PACJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"PACJLB2_ST\", \"value\": \"1\" }, { \"name\": \"PACJBJ_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 580,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "695c985e79310a0d",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#自吸泵",
        "func": "var aaa = flow.get(\"GSZXB1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"GSZXB1_ST\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"GSZXB1_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 20,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "aa9cb97f1eea5742",
        "type": "mqtt out",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "topic": "/SubTopic666",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 920,
        "y": 400,
        "wires": []
    },
    {
        "id": "08b6983feebe72ce",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#自吸泵",
        "func": "var aaa = flow.get(\"GSZXB2\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"GSZXB2_ST\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"GSZXB2_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 60,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "e49e79692fddbf57",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#硝化泵",
        "func": "var aaa = flow.get(\"XHB1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XHYHLB1_ST\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XHYHLB1_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 100,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "7fc6a8c1027a34ca",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#硝化泵",
        "func": "var aaa = flow.get(\"XHB2\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XHYHLB2_ST\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XHYHLB2_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 140,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "aa62a217ce7a8cd6",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#回流泵",
        "func": "var aaa = flow.get(\"WNHLB1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"WNHLB1_ST\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"WNHLB1_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 180,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "87fa28cf85b079c3",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#罗茨风机",
        "func": "var aaa = flow.get(\"LCFJ1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"LCFJ1_ST\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"LCFJ1_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 260,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "7e7e14f940a9804c",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#罗茨风机",
        "func": "var aaa = flow.get(\"LCFJ2\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"LCFJ2_ST\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"LCFJ2_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 300,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "acf4cbde90fc01b3",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#搅拌器",
        "func": "var aaa = flow.get(\"JBJ1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"QSJBJ1_ST\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"QSJBJ1_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 700,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "c33eaf914b47354c",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#搅拌器",
        "func": "var aaa = flow.get(\"JBJ2\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"QSJBJ2_ST\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"QSJBJ2_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 740,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "491f84616cdc5704",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#XD",
        "func": "var aaa = flow.get(\"XDJYJLB1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJLB1_ST\", \"value\": \"0\" }, { \"name\": \"XDJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJLB1_ST\", \"value\": \"1\" }, { \"name\": \"XDJYJBJ_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 620,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "9b1b0e3aa30c30c0",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#XD",
        "func": "var aaa = flow.get(\"XDJYJLB2\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJLB2_ST\", \"value\": \"0\" }, { \"name\": \"XDJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJLB2_ST\", \"value\": \"1\" }, { \"name\": \"XDJYJBJ_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 660,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "9e64d0a93933df44",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#进水泵",
        "func": "var aaa = msg.payload;\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"VW200\", \"value\": aaa}] } };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 460,
        "wires": [
            [
                "c83cef0e69e10bbb"
            ]
        ]
    },
    {
        "id": "c83cef0e69e10bbb",
        "type": "mqtt out",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "topic": "/SubTopic666",
        "qos": "2",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 1560,
        "y": 600,
        "wires": []
    },
    {
        "id": "b7ddf92d950b09c1",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#进水泵",
        "func": "var aaa = msg.payload;\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"VW204\", \"value\": aaa}] } };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 500,
        "wires": [
            [
                "c83cef0e69e10bbb"
            ]
        ]
    },
    {
        "id": "fa285a45dd69da58",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#硝化泵",
        "func": "var aaa = msg.payload;\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"VW208\", \"value\": aaa}] } };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 540,
        "wires": [
            [
                "c83cef0e69e10bbb"
            ]
        ]
    },
    {
        "id": "3f382ac0d4d5aa33",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#硝化泵",
        "func": "var aaa = msg.payload;\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"VW212\", \"value\": aaa}] } };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 580,
        "wires": [
            [
                "c83cef0e69e10bbb"
            ]
        ]
    },
    {
        "id": "6af0ee5fc9dd6997",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#回流泵",
        "func": "var aaa = msg.payload;\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"VW216\", \"value\": aaa}] } };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 620,
        "wires": [
            [
                "c83cef0e69e10bbb"
            ]
        ]
    },
    {
        "id": "1fe8b1594320ed85",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#回流泵",
        "func": "var aaa = msg.payload;\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"VW220\", \"value\": aaa}] } };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 660,
        "wires": [
            [
                "c83cef0e69e10bbb"
            ]
        ]
    },
    {
        "id": "ab2a7dfedbcb32e0",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#风机",
        "func": "var aaa = msg.payload;\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"VW224\", \"value\": aaa}] } };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 700,
        "wires": [
            [
                "c83cef0e69e10bbb"
            ]
        ]
    },
    {
        "id": "256bf995e1d09708",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#风机",
        "func": "var aaa = msg.payload;\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"VW228\", \"value\": aaa}] } };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 740,
        "wires": [
            [
                "c83cef0e69e10bbb"
            ]
        ]
    },
    {
        "id": "2bbc8c05041f188b",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "500t",
        "func": "var lqll = flow.get(\"500t_ll\")\nvar lqll1= lqll/3.6;\n\n// 计算累积流量\nif (!flow.get(\"lwjilqll1\")) {\n    flow.set(\"lwjilqll1\", 0);\n};\n\n\nvar cumu = flow.get(\"lwjilqll1\");\nvar cumu1 = cumu + lqll1;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjilqll1\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nmsg.payload = cumu3;\nglobal.set(\"500lwji\", cumu3);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "32bdce4de071d110",
        "type": "inject",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 240,
        "wires": [
            [
                "2bbc8c05041f188b"
            ]
        ]
    },
    {
        "id": "e8bc2c493fd90e81",
        "type": "http request",
        "z": "4d8e8b950659ca7e",
        "name": "发送模板消息",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 700,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "7727c54bfbb6f19d",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "设备离线告警",
        "func": "var access_token = global.get('access_token');\nvar time = global.get('time');\nvar openid = msg.payload;\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"vpks8dx3GNykOuZPNUKeBYB9v0C6ZOXoOkysC1DNWVY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing7\": {\n            \"value\": \"西地亚处理站\",\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": \"控制终端\",\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": \"离线\",\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1480,
        "wires": [
            [
                "e8bc2c493fd90e81"
            ]
        ]
    },
    {
        "id": "b9654cb4f5df0ec3",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "设备上线告警",
        "func": "var access_token = global.get('access_token');\nvar time = global.get('time');\nvar openid = msg.payload;\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"-nOwSKt3OHr4NZd0gKG5uJ7YgDa1EI57Qb5Sz2BR_lY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing11\": {\n            \"value\": \"西地亚处理站\",\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": \"控制终端\",\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": \"上线\",\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1440,
        "wires": [
            [
                "e8bc2c493fd90e81"
            ]
        ]
    },
    {
        "id": "ba5bb6038fdd092b",
        "type": "switch",
        "z": "4d8e8b950659ca7e",
        "name": "设备状态切换",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "设备在线",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备离线",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 1380,
        "wires": [
            [
                "7ff3767caa6e53be"
            ],
            [
                "07feab02974107b2"
            ]
        ]
    },
    {
        "id": "9b8869f61804bf20",
        "type": "split",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 310,
        "y": 1440,
        "wires": [
            [
                "b9654cb4f5df0ec3"
            ]
        ]
    },
    {
        "id": "7ff3767caa6e53be",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1440,
        "wires": [
            [
                "9b8869f61804bf20"
            ]
        ]
    },
    {
        "id": "07feab02974107b2",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1480,
        "wires": [
            [
                "99c41314491e686b"
            ]
        ]
    },
    {
        "id": "99c41314491e686b",
        "type": "split",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 310,
        "y": 1480,
        "wires": [
            [
                "7727c54bfbb6f19d"
            ]
        ]
    },
    {
        "id": "2eb6b69aa6d901f8",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "设备状态",
        "func": "const TIMEOUT_DURATION = 10 * 60 * 1000; // 10分钟\n\n// 初始化上下文变量，如果尚未设置\nif (context.get('initialized') === undefined) {\n    context.set('initialized', true);\n    context.set('lastMessageTime', null);\n    context.set('timeoutId', null);\n    context.set('isOnline', null); // 初始状态设置为 null\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"未知\" });\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    if (context.get('isOnline') !== false) { // 仅在状态不是离线时执行\n        context.set('isOnline', false);\n        node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n        node.send({ payload: \"设备离线\", topic: \"device/status\" });\n    }\n}\n\n// 如果有现有的超时，清除它\nif (context.get('timeoutId') !== null) {\n    clearTimeout(context.get('timeoutId'));\n}\n\n// 更新最后接收到消息的时间\ncontext.set('lastMessageTime', Date.now());\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\ncontext.set('timeoutId', timeoutId);\n\n// 检查并更新设备状态\nif (context.get('isOnline') === null) { // 初始状态\n    context.set('isOnline', true);\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return null; // 初始状态收到数据，不发送消息\n} else if (!context.get('isOnline')) { // 设备从离线变为在线\n    context.set('isOnline', true);\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return { payload: \"设备在线\", topic: \"device/status\" };\n} else {\n    // 如果设备已经在线，不发送消息，只更新状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\n    return null;\n}\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1280,
        "wires": [
            [
                "ba5bb6038fdd092b"
            ]
        ]
    },
    {
        "id": "47a8b6dcbeb02b93",
        "type": "websocket out",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "server": "c313a047e3c638f1",
        "client": "",
        "x": 1310,
        "y": 840,
        "wires": []
    },
    {
        "id": "f4c8805e12e254e5",
        "type": "websocket in",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "server": "c313a047e3c638f1",
        "client": "",
        "x": 140,
        "y": 560,
        "wires": [
            [
                "3d75221f70eb6eb2",
                "030725e3bb32a4a8"
            ]
        ]
    },
    {
        "id": "3d75221f70eb6eb2",
        "type": "json",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 250,
        "y": 460,
        "wires": [
            [
                "f29bd2a7d6cec6f1"
            ]
        ]
    },
    {
        "id": "f29bd2a7d6cec6f1",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.device;\n\n// 设备名称到输出索引的映射\nconst deviceMapping = {\n    \"1#干式自吸泵(h)\": 0,\n    \"2#干式自吸泵(w)\": 1,\n    \"1#硝化液回流泵\": 2,\n    \"2#硝化液回流泵\": 3,\n    \"1#污泥回流泵\": 4,\n    \"2#污泥回流泵\": 5,\n    \"1#罗茨风机\": 6,\n    \"2#罗茨风机\": 7,\n    \"碳源加药搅拌机\": 8,\n    \"PAC加药搅拌机\": 9,\n    \"消毒加药搅拌机\": 10,\n    \"碳源加药1#计量泵\": 11,\n    \"碳源加药2#计量泵\": 12,\n    \"PAC加药1#计量泵\": 13,\n    \"PAC加药2#计量泵\": 14,\n    \"消毒加药1#计量泵\": 15,\n    \"消毒加药2#计量泵\": 16,\n    \"1#电动蝶阀\": 17,\n    \"2#电动蝶阀\": 18,\n    \"3#电动蝶阀\": 19,\n    \"4#电动蝶阀\": 20,\n    \"5#电动蝶阀\": 21,\n    \"1#电动球阀\": 22,\n    \"2#电动球阀\": 23,\n    \"1#潜水搅拌机\": 24,\n    \"2#潜水搅拌机\": 25\n};\n\n// 初始化输出数组，包含26个输出端口\nlet outputs = new Array(26).fill(null);\n\n// 获取对应的输出索引\nlet outputIndex = deviceMapping[deviceName];\n\nif (outputIndex !== undefined && outputIndex < outputs.length) {\n    // 设置对应的输出\n    outputs[outputIndex] = msg;\n}\n\n// 返回所有输出端口\nreturn outputs;",
        "outputs": 26,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 460,
        "wires": [
            [
                "695c985e79310a0d"
            ],
            [
                "08b6983feebe72ce"
            ],
            [
                "e49e79692fddbf57"
            ],
            [
                "7fc6a8c1027a34ca"
            ],
            [
                "aa62a217ce7a8cd6"
            ],
            [
                "08570180b46b053b"
            ],
            [
                "87fa28cf85b079c3"
            ],
            [
                "7e7e14f940a9804c"
            ],
            [
                "58294956f00b4780"
            ],
            [
                "9ef9a4024b00a78f"
            ],
            [
                "b9ce0e64348d2141"
            ],
            [
                "f3592552eba0e538"
            ],
            [
                "735de75f6de5ef9e"
            ],
            [
                "a0b60fc1953fc13e"
            ],
            [
                "bbf328d408291ecc"
            ],
            [
                "491f84616cdc5704"
            ],
            [
                "9b1b0e3aa30c30c0"
            ],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [
                "acf4cbde90fc01b3"
            ],
            [
                "c33eaf914b47354c"
            ]
        ]
    },
    {
        "id": "8e763be125c16b5f",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "websocket",
        "func": "// 获取输入数据\nvar burrf = msg.payload || {};\nvar lqll = flow.get('500t_ll');\nvar lwji = global.get('500lwji');\nvar wnhl = flow.get('wnhll');\nvar xhhl = flow.get('xhhll')\nvar fdyl = flow.get('fdylj')\n\n// 确保流量值不为负数\nif (lqll < 0){\n  lqll = 0;\n}\nvar dataflow = [\n    {name:'进水流量',data:lqll,dw:'m³/h',alarm: 0},\n    {name:'进水累计',data:lwji,dw:'m³',alarm: 0},\n    {name:'污泥回流量',data:wnhl,dw:'m³/h',alarm: 0},\n    {name:'硝化回流量',data:xhhl,dw:'m³/h',alarm: 0},\n    {name:'翻斗雨量',data:fdyl,dw:'m³/h',alarm: 0},\n];\n\nvar deviceFrequency = [\n    {name:'1#进水泵频率',hz:msg.payload.VW300,sethz:msg.payload.VW200},\n    {name:'2#进水泵频率',hz:msg.payload.VW304,sethz:msg.payload.VW204},\n    {name:'1#回流泵频率',hz:msg.payload.VW316,sethz:msg.payload.VW216},\n    {name:'2#回流泵频率',hz:msg.payload.VW320,sethz:msg.payload.VW220},\n    {name:'1#硝化泵频率',hz:msg.payload.VW308,sethz:msg.payload.VW208},\n    {name:'2#硝化泵频率',hz:msg.payload.VW312,sethz:msg.payload.VW212},\n    {name:'1#风机频率',hz:msg.payload.VW324,sethz:msg.payload.VW224},\n    {name:'2#风机频率',hz:msg.payload.VW328,sethz:msg.payload.VW228},  \n];\n// 定义设备列表\nvar devices = [\n  // 干式自吸泵\n  { name: '1#干式自吸泵(h)', runningKey: 'GSZXB1_YX', faultKey: 'GSZXB1_GZ' },\n  { name: '2#干式自吸泵(w)', runningKey: 'GSZXB2_YX', faultKey: 'GSZXB2_GZ' },\n  \n  // 硝化液回流泵\n  { name: '1#硝化液回流泵', runningKey: 'XHYHLB1_YX', faultKey: 'XHYHLB1_GZ' },\n  { name: '2#硝化液回流泵', runningKey: 'XHYHLB2_YX', faultKey: 'XHYHLB2_GZ' },\n  \n  // 污泥回流泵\n  { name: '1#污泥回流泵', runningKey: 'WNHLB1_YX', faultKey: 'WNHLB1_GZ' },\n  { name: '2#污泥回流泵', runningKey: 'WNHLB2_YX', faultKey: 'WNHLB2_GZ' },\n  \n  // 罗茨风机\n  { name: '1#罗茨风机', runningKey: 'LCFJ1_YX', faultKey: 'LCFJ1_GZ' },\n  { name: '2#罗茨风机', runningKey: 'LCFJ2_YX', faultKey: 'LCFJ2_GZ' },\n  \n  // 潜水搅拌机\n  { name: '1#潜水搅拌机', runningKey: 'QSJBJ1_YX', faultKey: 'QSJBJ1_GZ' },\n  { name: '2#潜水搅拌机', runningKey: 'QSJBJ2_YX', faultKey: 'QSJBJ2_GZ' },\n  \n  // 碳源加药搅拌机\n  { name: '碳源加药搅拌机', runningKey: 'TYJYJBJ_YX', faultKey: 'TYJYJBJ_GZ' },\n  \n  // PAC加药搅拌机\n  { name: 'PAC加药搅拌机', runningKey: 'PACJBJ_YX', faultKey: 'PACJBJ_GZ' },\n  \n  // 消毒加药搅拌机\n  { name: '消毒加药搅拌机', runningKey: 'XDJYJBJ_YX', faultKey: 'XDJYJBJ_GZ' },\n  \n  // 碳源加药计量泵\n  { name: '碳源加药1#计量泵', runningKey: 'TYJYJLB1_YX', faultKey: null },\n  { name: '碳源加药2#计量泵', runningKey: 'TYJYJLB2_YX', faultKey: null },\n  \n  // PAC加药计量泵\n  { name: 'PAC加药1#计量泵', runningKey: 'PACJLB1_YX', faultKey: null },\n  { name: 'PAC加药2#计量泵', runningKey: 'PACJLB2_YX', faultKey: null },\n  \n  // 消毒加药计量泵\n  { name: '消毒加药1#计量泵', runningKey: 'XDJYJLB1_YX', faultKey: null },\n  { name: '消毒加药2#计量泵', runningKey: 'XDJYJLB2_YX', faultKey: null },\n  \n  // 电动蝶阀\n  { name: '1#电动蝶阀', openKey: 'DDF1_OW', closeKey: 'DDF1_CW', faultKey: 'DDF1_GZ', isValve: true },\n  { name: '2#电动蝶阀', openKey: 'DDF2_OW', closeKey: 'DDF2_CW', faultKey: 'DDF2_GZ', isValve: true },\n  { name: '3#电动蝶阀', openKey: 'DDF3_OW', closeKey: 'DDF3_CW', faultKey: 'DDF3_GZ', isValve: true },\n  { name: '4#电动蝶阀', openKey: 'DDF4_OW', closeKey: 'DDF4_CW', faultKey: 'DDF4_GZ', isValve: true },\n  { name: '5#电动蝶阀', openKey: 'DDF5_OW', closeKey: 'DDF5_CW', faultKey: 'DDF5_GZ', isValve: true },\n  \n  // 电动球阀\n  { name: '1#电动球阀', openKey: 'DDQF1_OW', closeKey: 'DDQF1_CW', faultKey: 'DDQF1_GZ', isValve: true },\n  { name: '2#电动球阀', openKey: 'DDQF2_OW', closeKey: 'DDQF2_CW', faultKey: 'DDQF2_GZ', isValve: true },\n];\n\n// 生成设备状态列表\nvar devicesStatus = devices.map(function(device) {\n    var running = 0;\n    var fault = 0;\n    \n    if (device.isValve) {\n        // 处理阀门设备的运行状态\n        if (burrf[device.openKey]) {\n            running = 1;\n        } else if (burrf[device.closeKey]) {\n            running = 0;\n        } else {\n            running = 0; // 默认状态\n        }\n        // 处理阀门设备的故障状态\n        fault = burrf[device.faultKey] || 0;\n    } else {\n        // 处理普通设备的运行状态\n        running = burrf[device.runningKey] || 0;\n        // 处理普通设备的故障状态\n        fault = device.faultKey ? (burrf[device.faultKey] || 0) : 0;\n    }\n    \n    return {\n        name: device.name,\n        running: running,\n        fault: fault\n    };\n});\n\n// 构建最终的消息负载\nmsg.payload = {\n    dataflow,\n    deviceFrequency,\n    devices: devicesStatus\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 840,
        "wires": [
            [
                "47a8b6dcbeb02b93"
            ]
        ]
    },
    {
        "id": "d24a3a96a85b6262",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.name;\nlet deviceHZ = msg.payload.sethz;\n\nif (deviceName === '1#进水泵频率') {\n    msg.payload = deviceHZ;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 460,
        "wires": [
            [
                "9e64d0a93933df44"
            ]
        ]
    },
    {
        "id": "030725e3bb32a4a8",
        "type": "json",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 890,
        "y": 560,
        "wires": [
            [
                "d24a3a96a85b6262",
                "3414bfb585f7a42e",
                "a9fcf171aaba255e",
                "78ff985cdab20cb1",
                "a20da48b81121043",
                "25d1b41ab26626c8",
                "a19c4260472385dd",
                "ef2e949237604a46"
            ]
        ]
    },
    {
        "id": "3414bfb585f7a42e",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.name;\nlet deviceHZ = msg.payload.sethz;\n\n\nif (deviceName === '2#进水泵频率') {\n    msg.payload = deviceHZ;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 500,
        "wires": [
            [
                "b7ddf92d950b09c1"
            ]
        ]
    },
    {
        "id": "b9ce0e64348d2141",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "1#XDJBJ",
        "func": "var aaa = flow.get(\"XDJBJ\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJBJ_ST\", \"value\": \"0\"}] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"XDJYJBJ_ST\", \"value\": \"1\"}] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 420,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "a9fcf171aaba255e",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.name;\nlet deviceHZ = msg.payload.sethz;\n\nif (deviceName === '1#硝化泵频率') {\n    msg.payload = deviceHZ;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 540,
        "wires": [
            [
                "fa285a45dd69da58"
            ]
        ]
    },
    {
        "id": "78ff985cdab20cb1",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.name;\nlet deviceHZ = msg.payload.sethz;\n\n\nif (deviceName === '2#硝化泵频率') {\n    msg.payload = deviceHZ;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 580,
        "wires": [
            [
                "3f382ac0d4d5aa33"
            ]
        ]
    },
    {
        "id": "a20da48b81121043",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.name;\nlet deviceHZ = msg.payload.sethz;\n\nif (deviceName === '1#回流泵频率') {\n    msg.payload = deviceHZ;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 620,
        "wires": [
            [
                "6af0ee5fc9dd6997"
            ]
        ]
    },
    {
        "id": "25d1b41ab26626c8",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.name;\nlet deviceHZ = msg.payload.sethz;\n\n\nif (deviceName === '2#回流泵频率') {\n    msg.payload = deviceHZ;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 660,
        "wires": [
            [
                "1fe8b1594320ed85"
            ]
        ]
    },
    {
        "id": "a19c4260472385dd",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.name;\nlet deviceHZ = msg.payload.sethz;\n\nif (deviceName === '1#风机频率') {\n    msg.payload = deviceHZ;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 740,
        "wires": [
            [
                "ab2a7dfedbcb32e0"
            ]
        ]
    },
    {
        "id": "ef2e949237604a46",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.name;\nlet deviceHZ = msg.payload.sethz;\n\n\nif (deviceName === '2#风机频率') {\n    msg.payload = deviceHZ;\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 700,
        "wires": [
            [
                "256bf995e1d09708"
            ]
        ]
    },
    {
        "id": "08570180b46b053b",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "2#回流泵",
        "func": "var aaa = flow.get(\"WNHLB2\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"WNHLB2_ST\", \"value\": \"0\" }] } };\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"WNHLB2_ST\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 220,
        "wires": [
            [
                "aa9cb97f1eea5742"
            ]
        ]
    },
    {
        "id": "1d580cedcdf039db",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "定时",
        "func": "var time = global.get(\"cstTime\"); // 获取时间对象\nvar hour = time.hour;\nvar minute = time.minute;\nvar second = time.second;\n\n// 检查是否为指定的时间 10:47:00\nif (hour === 0 && minute === 0 && second === 0) {\n    msg.payload = 0;\n    return msg; \n} else {\n    return null; \n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 720,
        "wires": [
            [
                "c2d6af0bfaf508a7"
            ]
        ]
    },
    {
        "id": "c2d6af0bfaf508a7",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "累计清零",
        "func": "var rest = msg.payload;\nflow.set(\"lwjilqll1\", rest);\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "9ad710b5ece38ef2",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "hz",
        "func": "var hz =  msg.payload.VD232;\nflow.set(\"wnhll\",hz);\nvar hz1 =  msg.payload.VD236;\nflow.set(\"xhhll\",hz1);\nvar hz2 =  msg.payload.VD240;\nflow.set(\"500t_ll\",hz2)\nvar hz3 =  msg.payload.VD254;\nflow.set(\"fdylj\", hz3)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "9702835b8d25c3f6",
        "type": "debug",
        "z": "4d8e8b950659ca7e",
        "name": "debug 393",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 780,
        "wires": []
    },
    {
        "id": "39e874a2b640dd2a",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "网关检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized1') === undefined) {\n    flow.set('initialized1', true);\n    flow.set('lastMessageTime1', null);\n    flow.set('timeoutId1', null);\n    flow.set('status1', \"离线\"); // 用于在线/离线状态\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    return { payload: \"设备离线\", topic: \"device/status\" };\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    flow.set('status1', \"离线\"); // 超时则设备为离线\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    node.send({ payload: \"设备离线\", topic: \"device/status\" });\n}\n\n// 如果有现有的超时，清除它\nif (flow.get('timeoutId1') !== null) {\n    clearTimeout(flow.get('timeoutId1'));\n}\n\n// 更新最后接收到消息的时间\nflow.set('lastMessageTime1', Date.now());\n\n// 接收到任何数据时都视为设备在线\nflow.set('status1', \"在线\");\nnode.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\nnode.send({ payload: \"设备在线\", topic: \"device/status\" });\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId1', timeoutId);\n\n// 向外发送设备当前状态\nreturn {\n    payload: {\n        deviceStatus: flow.get('status1'),\n    },\n    topic: \"device/status\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "ba539deda347e995",
        "type": "inject",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "12000",
        "payloadType": "num",
        "x": 90,
        "y": 300,
        "wires": [
            [
                "0c91a85eba1b88ce"
            ]
        ]
    },
    {
        "id": "0c91a85eba1b88ce",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "500t",
        "func": "var rest = msg.payload\nflow.set(\"lwjilqll1\",rest);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "91aaebae9777e279",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "websocket",
        "func": "// 获取输入数据\nvar burrf = flow.get('deviceStatuses'); // 假设burrf是设备状态数组\nvar lqll = flow.get('500t_ll');\nvar lwji = global.get('500lwji');\nvar wnhl = flow.get('wnhll');\nvar xhhl = flow.get('xhhll')\nvar fdyl = flow.get('fdylj')\n\n// 辅助函数：从设备对象中直接根据设备名和属性获取值\nfunction getDeviceValue(deviceName, prop) {\n    if (!burrf[deviceName]) return 0; // 设备不存在时返回默认值\n    return burrf[deviceName][prop] || 0; // 属性不存在时返回0\n}\n\n// 辅助函数：从参数对象中直接根据参数名获取值（如 VW300）\nfunction getParamValue(paramName) {\n    return burrf[paramName] || 0; // 参数不存在时返回0\n}\n\n// 确保流量值不为负数\nif (lqll < 0) {\n  lqll = 0;\n}\n\nvar indata = [\n    { name: '进水流量', data: lqll, dw: 'm³/h', alarm: 0 },\n    { name: '进水累计', data: lwji, dw: 'm³', alarm: 0 },\n    { name: '污泥回流量', data: wnhl, dw: 'm³/h', alarm: 0 },\n    { name: '硝化回流量', data: xhhl, dw: 'm³/h', alarm: 0 },\n    { name: '翻斗雨量', data: fdyl, dw: 'm³/h', alarm: 0 },\n];\n\nvar deviceFrequency = [\n    { name: '1#进水泵频率', hz: 0, sethz: 0 },\n    { name: '2#进水泵频率', hz: 0, sethz: 0 },\n    { name: '1#回流泵频率', hz: 0, sethz: 0 },\n    { name: '2#回流泵频率', hz: 0, sethz: 0},\n    { name: '1#硝化泵频率', hz: 0, sethz: 0},\n    { name: '2#硝化泵频率', hz: 0, sethz: 0 },\n    { name: '1#风机频率', hz: 0, sethz: 0 },\n    { name: '2#风机频率', hz: 0, sethz: 0 },  \n];\n\n// 定义设备列表\nvar devices = [\n  // 干式自吸泵\n  { \n    name: '1#干式自吸泵(h)', \n    run: getDeviceValue('1#干式自吸泵(h)', 'run'),\n    fault: getDeviceValue('1#干式自吸泵(h)', 'fault')\n  },\n  { \n    name: '2#干式自吸泵(w)', \n    run: getDeviceValue('2#干式自吸泵(h)', 'run'), \n    fault: getDeviceValue('2#干式自吸泵(h)', 'fault') \n  },\n\n  // 硝化液回流泵\n  { \n    name: '1#硝化液回流泵', \n    run: getDeviceValue('1#硝化液回流泵', 'run'), \n    fault: getDeviceValue('1#硝化液回流泵', 'fault') \n  },\n  { \n    name: '2#硝化液回流泵', \n    run: getDeviceValue('2#硝化液回流泵', 'run'), \n    fault: getDeviceValue('2#硝化液回流泵', 'fault') \n  },\n\n  // 污泥回流泵\n  { \n    name: '1#污泥回流泵', \n    run: getDeviceValue('1#污泥回流泵', 'run'), \n    fault: getDeviceValue('1#污泥回流泵', 'fault') \n  },\n  { \n    name: '2#污泥回流泵', \n    run: getDeviceValue('2#污泥回流泵', 'run'), \n    fault: getDeviceValue('2#污泥回流泵', 'fault') \n  },\n\n  // 罗茨风机\n  { \n    name: '1#罗茨风机', \n    run: getDeviceValue('1#罗茨风机', 'run'), \n    fault: getDeviceValue('1#罗茨风机', 'fault') \n  },\n  { \n    name: '2#罗茨风机', \n    run: getDeviceValue('2#罗茨风机', 'run'), \n    fault: getDeviceValue('2#罗茨风机', 'fault') \n  },\n\n  // 潜水搅拌机\n  { \n    name: '1#潜水搅拌机', \n    run: getDeviceValue('1#潜水搅拌机', 'run'), \n    fault: getDeviceValue('1#潜水搅拌机', 'fault') \n  },\n  { \n    name: '2#潜水搅拌机', \n    run: getDeviceValue('2#潜水搅拌机', 'run'), \n    fault: getDeviceValue('2#潜水搅拌机', 'fault') \n  },\n\n  // 碳源加药搅拌机\n  { \n    name: '碳源加药搅拌机', \n    run: getDeviceValue('碳源加药搅拌机', 'run'), \n    fault: getDeviceValue('碳源加药搅拌机', 'fault') \n  },\n\n  // PAC加药搅拌机\n  { \n    name: 'PAC加药搅拌机', \n    run: getDeviceValue('PAC加药搅拌机', 'run'), \n    fault: getDeviceValue('PAC加药搅拌机', 'fault') \n  },\n\n  // 消毒加药搅拌机\n  { \n    name: '消毒加药搅拌机', \n    run: getDeviceValue('消毒加药搅拌机', 'run'), \n    fault: getDeviceValue('消毒加药搅拌机', 'fault') \n  },\n\n  // 碳源加药计量泵\n  { \n    name: '碳源加药1#计量泵', \n    run: getDeviceValue('碳源加药1#计量泵', 'run'), \n    fault: null \n  },\n  { \n    name: '碳源加药2#计量泵', \n    run: getDeviceValue('碳源加药2#计量泵', 'run'), \n    fault: null \n  },\n\n  // PAC加药计量泵\n  { \n    name: 'PAC加药1#计量泵', \n    run: getDeviceValue('PAC加药1#计量泵', 'run'), \n    fault: null \n  },\n  { \n    name: 'PAC加药2#计量泵', \n    run: getDeviceValue('PAC加药2#计量泵', 'run'), \n    fault: null \n  },\n\n  // 消毒加药计量泵\n  { \n    name: '消毒加药1#计量泵', \n    run: getDeviceValue('消毒加药1#计量泵', 'run'), \n    fault: null \n  },\n  { \n    name: '消毒加药2#计量泵', \n    run: getDeviceValue('消毒加药2#计量泵', 'run'), \n    fault: null \n  }\n];\n\nvar isValve = [\n  // 电动蝶阀\n  { \n    name: '1#电动蝶阀', \n    open: getDeviceValue('1#电动蝶阀', 'open'), \n    close: getDeviceValue('1#电动蝶阀', 'close'), \n    fault: getDeviceValue('1#电动蝶阀', 'fault') \n  },\n  { \n    name: '2#电动蝶阀', \n    open: getDeviceValue('2#电动蝶阀', 'open'), \n    close: getDeviceValue('2#电动蝶阀', 'close'), \n    fault: getDeviceValue('2#电动蝶阀', 'fault') \n  },\n  { \n    name: '3#电动蝶阀', \n    open: getDeviceValue('3#电动蝶阀', 'open'), \n    close: getDeviceValue('3#电动蝶阀', 'close'), \n    fault: getDeviceValue('3#电动蝶阀', 'fault') \n  },\n  { \n    name: '4#电动蝶阀', \n    open: getDeviceValue('4#电动蝶阀', 'open'), \n    close: getDeviceValue('4#电动蝶阀', 'close'), \n    fault: getDeviceValue('4#电动蝶阀', 'fault') \n  },\n  { \n    name: '5#电动蝶阀', \n    open: getDeviceValue('5#电动蝶阀', 'open'), \n    close: getDeviceValue('5#电动蝶阀', 'close'), \n    fault: getDeviceValue('5#电动蝶阀', 'fault') \n  },\n\n  // 电动球阀\n  { \n    name: '1#电动球阀', \n    open: getDeviceValue('1#电动球阀', 'open'), \n    close: getDeviceValue('1#电动球阀', 'close'), \n    fault: getDeviceValue('1#电动球阀', 'fault') \n  },\n  { \n    name: '2#电动球阀', \n    open: getDeviceValue('2#电动球阀', 'open'), \n    close: getDeviceValue('2#电动球阀', 'close'), \n    fault: getDeviceValue('2#电动球阀', 'fault') \n  }\n];\n\n// 构建最终的消息负载\nmsg.payload = {\n    indata,\n    deviceFrequency,\n    devices,\n    isValve\n};\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 980,
        "wires": [
            [
                "4621e106e1a487b0"
            ]
        ]
    },
    {
        "id": "bd7e8fbdf55eafbf",
        "type": "inject",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "props": [],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1070,
        "y": 1320,
        "wires": [
            [
                "77b17c5ea9643ce3"
            ]
        ]
    },
    {
        "id": "77b17c5ea9643ce3",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "function 2",
        "func": "// 获取设备状态上下文变量\nconst deviceStatuses = flow.get(\"deviceStatuses\") || {};\n\n// 用于存储故障信息的数组\nconst faultyDevices = [];\n\n// 检查各设备的故障信息\nfor (const device in deviceStatuses) {\n    // 设备状态对象\n    const status = deviceStatuses[device];\n\n    // 如果设备有故障，则将故障信息加入数组\n    if (status.fault && status.fault !== 0) {  // 判断故障状态是否存在且不为0\n        faultyDevices.push(`${device} 故障`);\n    }\n}\n\n// 如果存在故障设备，则将故障信息存储到上下文变量中\nif (faultyDevices.length > 0) {\n    global.set(\"faultyDevices\", faultyDevices);  // 将故障设备信息存储到上下文\n} else {\n    global.set(\"faultyDevices\", []);  // 如果没有故障设备，清空故障信息\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 1320,
        "wires": [
            []
        ]
    },
    {
        "id": "fa77ed27c46d481e",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "function 3",
        "func": "// 读取并存储各设备状态\nvar payload = msg.payload;\n\n// 定义设备名称和对应的状态字段\nconst deviceConfigs = [\n    { name: '1#干式自吸泵(h)', run: 'GSZXB1_YX', fault: 'GSZXB1_GZ' },\n    { name: '2#干式自吸泵(w)', run: 'GSZXB2_YX', fault: 'GSZXB2_GZ' },\n    { name: '1#硝化液回流泵', run: 'XHYHLB1_YX', fault: 'XHYHLB1_GZ' },\n    { name: '2#硝化液回流泵', run: 'XHYHLB2_YX', fault: 'XHYHLB2_GZ' },\n    { name: '1#污泥回流泵', run: 'WNHLB1_YX', fault: 'WNHLB1_GZ' },\n    { name: '2#污泥回流泵', run: 'WNHLB2_YX', fault: 'WNHLB2_GZ' },\n    { name: '1#罗茨风机', run: 'LCFJ1_YX', fault: 'LCFJ1_GZ' },\n    { name: '2#罗茨风机', run: 'LCFJ2_YX', fault: 'LCFJ2_GZ' },\n    { name: '1#潜水搅拌机', run: 'QSJBJ1_YX', fault: 'QSJBJ1_GZ' },\n    { name: '2#潜水搅拌机', run: 'QSJBJ2_YX', fault: 'QSJBJ2_GZ' },\n    { name: '碳源加药搅拌机', run: 'TYJYJBJ_YX', fault: 'TYJYJBJ_GZ' },\n    { name: 'PAC加药搅拌机', run: 'PACJBJ_YX', fault: 'PACJBJ_GZ' },\n    { name: '消毒加药搅拌机', run: 'XDJYJBJ_YX', fault: 'XDJYJBJ_GZ' },\n    { name: '碳源加药1#计量泵', run: 'TYJYJLB1_YX', fault: null },\n    { name: '碳源加药2#计量泵', run: 'TYJYJLB2_YX', fault: null },\n    { name: 'PAC加药1#计量泵', run: 'PACJLB1_YX', fault: null },\n    { name: 'PAC加药2#计量泵', run: 'PACJLB2_YX', fault: null },\n    { name: '消毒加药1#计量泵', run: 'XDJYJLB1_YX', fault: null },\n    { name: '消毒加药2#计量泵', run: 'XDJYJLB2_YX', fault: null }\n];\n\n// 定义阀门设备名称\nconst valveDevices = [\n    { name: '1#电动蝶阀', open: 'DDF1_OW', close: 'DDF1_CW', fault: 'DDF1_GZ' },\n    { name: '2#电动蝶阀', open: 'DDF2_OW', close: 'DDF2_CW', fault: 'DDF2_GZ' },\n    { name: '3#电动蝶阀', open: 'DDF3_OW', close: 'DDF3_CW', fault: 'DDF3_GZ' },\n    { name: '4#电动蝶阀', open: 'DDF4_OW', close: 'DDF4_CW', fault: 'DDF4_GZ' },\n    { name: '5#电动蝶阀', open: 'DDF5_OW', close: 'DDF5_CW', fault: 'DDF5_GZ' },\n    { name: '1#电动球阀', open: 'DDQF1_OW', close: 'DDQF1_CW', fault: 'DDQF1_GZ' },\n    { name: '2#电动球阀', open: 'DDQF2_OW', close: 'DDQF2_CW', fault: 'DDQF2_GZ' }\n];\n\n// 用于存储所有设备和阀门的状态\nconst deviceStatuses = {};\n\n// 处理设备状态并存储\ndeviceConfigs.forEach(device => {\n    deviceStatuses[device.name] = {\n        run: payload[device.run] || 0,\n        fault: payload[device.fault] || 0\n    };\n});\n\n// 处理阀门状态并存储\nvalveDevices.forEach(valve => {\n    deviceStatuses[valve.name] = {\n        open: payload[valve.open] || 0,\n        close: payload[valve.close] || 0,\n        fault: payload[valve.fault] || 0\n    };\n});\n\n// 存储所有设备状态到上下文中\nflow.set(\"deviceStatuses\", deviceStatuses);\n\n// 其他变量的存储\nflow.set(\"wnhll\", payload.VD232);\nflow.set(\"xhhll\", payload.VD236);\nflow.set(\"500t_ll\", payload.VD240);\nflow.set(\"fdylj\", payload.VD254);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "600e999ba557ea0a",
        "type": "http in",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "url": "api/sites/site/3",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1090,
        "y": 980,
        "wires": [
            [
                "2b25611adf1b5d1b"
            ]
        ]
    },
    {
        "id": "4621e106e1a487b0",
        "type": "http response",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1630,
        "y": 940,
        "wires": []
    },
    {
        "id": "6451d898ed4175ae",
        "type": "http in",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "url": "api/site/3/command",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1070,
        "y": 1060,
        "wires": [
            [
                "7e5ef33c310d2e19"
            ]
        ]
    },
    {
        "id": "e7eb9a2d187a1290",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "function 10",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1000,
        "wires": [
            [
                "37a4459ad240a25c"
            ]
        ]
    },
    {
        "id": "37a4459ad240a25c",
        "type": "http response",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1790,
        "y": 1000,
        "wires": []
    },
    {
        "id": "7e5ef33c310d2e19",
        "type": "switch",
        "z": "4d8e8b950659ca7e",
        "name": "",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "set_frequency",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "device_control",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 1060,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "2b25611adf1b5d1b",
        "type": "function",
        "z": "4d8e8b950659ca7e",
        "name": "function 37",
        "func": "// Node-RED测试函数 - 生成所有工业数据类型的模拟数据\n// 使用Node-RED函数节点语法而不是module.exports\n// 将此代码直接放入Function节点\n\n// 获取当前时间戳，用于各种时间相关字段\nconst now = Date.now();\nconst yesterday = now - 86400000; // 24小时前\nconst lastWeek = now - 604800000; // 一周前\n\n// 创建模拟数据的完整分组\nconst mockDataGroups = [\n    // 1. 传感器数据 - 已有类型\n    {\n        id: \"indata\",\n        name: \"进水数据\",\n        type: \"sensor\",\n        data: [\n            {name: \"进水流量\", data: 123.45, dw: \"m³/h\", alarm: 0},\n            {name: \"进水COD\", data: 356.78, dw: \"mg/L\", alarm: 0},\n            {name: \"进水氨氮\", data: 26.5, dw: \"mg/L\", alarm: 1},\n            {name: \"进水pH\", data: 7.2, dw: \"\", alarm: 0}\n        ]\n    },\n    {\n        id: \"outdata\",\n        name: \"出水数据\",\n        type: \"sensor\",\n        data: [\n            {name: \"出水流量\", data: 119.35, dw: \"m³/h\", alarm: 0},\n            {name: \"出水COD\", data: 48.32, dw: \"mg/L\", alarm: 0},\n            {name: \"出水氨氮\", data: 5.1, dw: \"mg/L\", alarm: 0},\n            {name: \"出水pH\", data: 6.9, dw: \"\", alarm: 0}\n        ]\n    },\n    \n    // 2. 能耗监控数据 - 新增类型\n    {\n        id: \"energy_stats\",\n        name: \"能耗监控\",\n        type: \"energy\",\n        data: [\n            {name: \"1#泵能耗\", value: 23.5, unit: \"kWh\", trend: -2.4, threshold: 25},\n            {name: \"2#泵能耗\", value: 28.7, unit: \"kWh\", trend: 5.6, threshold: 25},\n            {name: \"鼓风机能耗\", value: 45.2, unit: \"kWh\", trend: -1.8, threshold: 50},\n            {name: \"UV设备能耗\", value: 18.6, unit: \"kWh\", trend: 0.5, threshold: 20},\n            {name: \"全厂总能耗\", value: 156.8, unit: \"kWh\", trend: 3.2, threshold: 180}\n        ]\n    },\n    \n    // 3. 设备运行时间数据 - 新增类型\n    {\n        id: \"equipments\",\n        name: \"设备运行时间\",\n        type: \"runtime\",\n        data: [\n            {name: \"1#鼓风机\", dailyHours: 8.5, totalHours: 3567, nextMaintenance: 433},\n            {name: \"2#鼓风机\", dailyHours: 10.2, totalHours: 1245, nextMaintenance: 55},\n            {name: \"1#回流泵\", dailyHours: 24.0, totalHours: 5689, nextMaintenance: 311},\n            {name: \"2#回流泵\", dailyHours: 0.0, totalHours: 4532, nextMaintenance: 1468}\n        ]\n    },\n    \n    // 4. 工艺参数数据 - 新增类型\n    {\n        id: \"one_process_parameters\",\n        name: \"监控\",\n        type: \"process\",\n        data: [\n            {\n                name: \"反应池MLSS\", \n                value: 3500, \n                unit: \"mg/L\", \n                lowerLimit: 3000, \n                upperLimit: 4000,\n                status: \"normal\"\n            },\n            {\n                name: \"好氧区DO\", \n                value: 1.2, \n                unit: \"mg/L\", \n                lowerLimit: 1.5, \n                upperLimit: 3.0,\n                status: \"abnormal\"\n            },\n            {\n                name: \"SV30\", \n                value: 35, \n                unit: \"%\", \n                lowerLimit: 20, \n                upperLimit: 40,\n                status: \"normal\"\n            },\n            {\n                name: \"水温\", \n                value: 22.5, \n                unit: \"°C\", \n                lowerLimit: 15, \n                upperLimit: 35,\n                status: \"normal\"\n            }\n        ]\n    },\n    {\n        id: \"two_process_parameters\",\n        name: \"工艺参数监控\",\n        type: \"process\",\n        data: [\n            {\n                name: \"反应池MLSS\",\n                value: 3500,\n                unit: \"mg/L\",\n                lowerLimit: 3000,\n                upperLimit: 4000,\n                status: \"normal\"\n            },\n            {\n                name: \"好氧区DO\",\n                value: 1.2,\n                unit: \"mg/L\",\n                lowerLimit: 1.5,\n                upperLimit: 3.0,\n                status: \"abnormal\"\n            },\n            {\n                name: \"SV30\",\n                value: 35,\n                unit: \"%\",\n                lowerLimit: 20,\n                upperLimit: 40,\n                status: \"normal\"\n            },\n            {\n                name: \"水温\",\n                value: 22.5,\n                unit: \"°C\",\n                lowerLimit: 15,\n                upperLimit: 35,\n                status: \"normal\"\n            }\n        ]\n    },\n    \n    // 5. 报警信息数据 - 新增类型\n    {\n        id: \"active_alarms\",\n        name: \"当前报警\",\n        type: \"alarm\",\n        data: [\n            {\n                id: \"ALM-20230615-001\",\n                name: \"2#泵振动超限\",\n                message: \"2#泵振动值超过预设阈值30%，请检查\",\n                level: \"medium\",\n                timestamp: now - 3600000, // 1小时前\n                status: \"unconfirmed\"\n            },\n            {\n                id: \"ALM-20230615-002\",\n                name: \"1#曝气池DO低\",\n                message: \"1#曝气池溶解氧低于0.5mg/L，请检查供氧设备\",\n                level: \"high\",\n                timestamp: now - 1800000, // 30分钟前\n                status: \"unconfirmed\"\n            },\n            {\n                id: \"ALM-20230615-003\",\n                name: \"2#回流泵停机\",\n                message: \"2#回流泵意外停机，请检查电源和控制系统\",\n                level: \"high\",\n                timestamp: now - 7200000, // 2小时前\n                status: \"confirmed\"\n            },\n            {\n                id: \"ALM-20230615-004\",\n                name: \"进水水质异常\",\n                message: \"进水氨氮浓度超过30mg/L，请关注进水水质变化\",\n                level: \"low\",\n                timestamp: now - 10800000, // 3小时前\n                status: \"unconfirmed\"\n            }\n        ]\n    },\n    \n    // 6. 化验数据 - 新增类型\n    {\n        id: \"lab_results\",\n        name: \"水质化验结果\",\n        type: \"laboratory\",\n        data: [\n            {\n                name: \"出水总氮\",\n                value: 12.8,\n                unit: \"mg/L\",\n                standard: \"≤15 mg/L\",\n                isQualified: true,\n                sampleTime: now - 12 * 3600000 // 12小时前\n            },\n            {\n                name: \"出水总磷\",\n                value: 0.8,\n                unit: \"mg/L\",\n                standard: \"≤0.5 mg/L\",\n                isQualified: false,\n                sampleTime: now - 12 * 3600000 // 12小时前\n            },\n            {\n                name: \"出水SS\",\n                value: 7.5,\n                unit: \"mg/L\",\n                standard: \"≤10 mg/L\",\n                isQualified: true,\n                sampleTime: now - 12 * 3600000 // 12小时前\n            },\n            {\n                name: \"污泥含水率\",\n                value: 82.5,\n                unit: \"%\",\n                standard: \"≤80%\",\n                isQualified: false,\n                sampleTime: now - 24 * 3600000 // 24小时前\n            }\n        ]\n    },\n    \n    // 7. 设备健康状态 - 新增类型\n    {\n        id: \"equipment_health\",\n        name: \"设备健康状态\",\n        type: \"health\",\n        data: [\n            {\n                name: \"1#鼓风机\",\n                healthScore: 85,\n                lastMaintenance: lastWeek,\n                issues: []\n            },\n            {\n                name: \"2#鼓风机\",\n                healthScore: 45,\n                lastMaintenance: lastWeek + 2 * 86400000, // 上周+2天\n                issues: [\"轴承振动异常\", \"电机温度偏高\"]\n            },\n            {\n                name: \"污泥脱水机\",\n                healthScore: 70,\n                lastMaintenance: lastWeek - 30 * 86400000, // 一个月前\n                issues: [\"螺旋输送器磨损\"]\n            },\n            {\n                name: \"1#加药装置\",\n                healthScore: 92,\n                lastMaintenance: lastWeek - 10 * 86400000, // 10天前\n                issues: []\n            }\n        ]\n    },\n    \n    // 8. 生产指标 - 新增类型\n    {\n        id: \"production_metrics\",\n        name: \"处理生产指标\",\n        type: \"production\",\n        data: [\n            {\n                name: \"日处理水量\",\n                current: 2800,\n                target: 3000,\n                efficiency: 93,\n                unit: \"吨\"\n            },\n            {\n                name: \"污泥产量\",\n                current: 45,\n                target: 40,\n                efficiency: 85,\n                unit: \"吨\"\n            },\n            {\n                name: \"药剂消耗\",\n                current: 85,\n                target: 100,\n                efficiency: 95,\n                unit: \"kg\"\n            },\n            {\n                name: \"处理达标率\",\n                current: 95,\n                target: 100,\n                efficiency: 98,\n                unit: \"%\"\n            }\n        ]\n    },\n    \n    // 原有类型数据 - 设备控制\n    {\n        id: \"control_devices\",\n        name: \"设备控制\",\n        type: \"device\",\n        data: [\n            {name: \"1#鼓风机\", run: 1, fault: 0},\n            {name: \"2#鼓风机\", run: 0, fault: 1},\n            {name: \"回流泵\", run: 1, fault: 0},\n            {name: \"加药泵\", run: 1, fault: 0}\n        ]\n    },\n    \n    // 原有类型数据 - 阀门控制\n    {\n        id: \"control_valves\",\n        name: \"阀门控制\",\n        type: \"valve\",\n        data: [\n            {name: \"进水阀\", open: 1, close: 0, fault: 0, openKey: \"V1_Open\", closeKey: \"V1_Close\"},\n            {name: \"出水阀\", open: 1, close: 0, fault: 0, openKey: \"V2_Open\", closeKey: \"V2_Close\"},\n            {name: \"回流阀\", open: 0, close: 1, fault: 0, openKey: \"V3_Open\", closeKey: \"V3_Close\"},\n            {name: \"排泥阀\", open: 0, close: 0, fault: 1, openKey: \"V4_Open\", closeKey: \"V4_Close\"}\n        ]\n    },\n    \n    // 原有类型数据 - 频率设置\n    {\n        id: \"freq_control\",\n        name: \"频率设置\",\n        type: \"frequency\",\n        data: [\n            {name: \"1#泵频率\", hz: 35.5, sethz: 35.0},\n            {name: \"2#泵频率\", hz: 0, sethz: 40.0},\n            {name: \"风机频率\", hz: 42.8, sethz: 45.0}\n        ]\n    }\n];\n\n// 创建包含所有数据的完整响应\nmsg.payload = {\n    type: \"device_status\",\n    siteId: msg.siteId || \"your_site_id\", // 使用传入的siteId或默认值\n    timestamp: now,\n    dataGroups: mockDataGroups,\n    \n    // 以下字段用于向后兼容旧格式\n    indata: mockDataGroups.find(g => g.id === \"indata\")?.data || [],\n    outdata: mockDataGroups.find(g => g.id === \"outdata\")?.data || [],\n    devices: mockDataGroups.find(g => g.id === \"control_devices\")?.data || [],\n    isValve: mockDataGroups.find(g => g.id === \"control_valves\")?.data || [],\n    deviceFrequency: mockDataGroups.find(g => g.id === \"freq_control\")?.data || [],\n    \n    // 工业数据类型\n    energy: mockDataGroups.find(g => g.id === \"energy_stats\")?.data || [],\n    runtime: mockDataGroups.find(g => g.id === \"equipments\")?.data || [],\n    process: mockDataGroups.find(g => g.id === \"process_parameters\")?.data || [],\n    alarms: mockDataGroups.find(g => g.id === \"active_alarms\")?.data || [],\n    laboratory: mockDataGroups.find(g => g.id === \"lab_results\")?.data || [],\n    health: mockDataGroups.find(g => g.id === \"equipment_health\")?.data || [],\n    production: mockDataGroups.find(g => g.id === \"production_metrics\")?.data || []\n};\n\n// 在Debug窗口中显示一条状态信息\nnode.status({fill:\"green\", shape:\"dot\", text:\"已生成模拟数据\"});\n\n// 返回消息对象\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 920,
        "wires": [
            [
                "4621e106e1a487b0"
            ]
        ]
    },
    {
        "id": "864a839f0fb8748a",
        "type": "mqtt out",
        "z": "c37c10683bca74ac",
        "name": "",
        "topic": "/DownloadTopic555",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "364713192c0f1178",
        "x": 1240,
        "y": 280,
        "wires": []
    },
    {
        "id": "58ad69f7f062403b",
        "type": "mqtt in",
        "z": "c37c10683bca74ac",
        "name": "",
        "topic": "/RespondTopic555",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1130,
        "y": 460,
        "wires": [
            [
                "15f708e4ae1f99e6"
            ]
        ]
    },
    {
        "id": "9781bfc5ae1909ae",
        "type": "mqtt in",
        "z": "c37c10683bca74ac",
        "name": "",
        "topic": "/UploadTopic555",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "364713192c0f1178",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 220,
        "wires": [
            [
                "20b66d60ef6ee4c7",
                "69422226b44030ed",
                "a715ab9aa445e510",
                "da8370bdcb8e53a0",
                "335442caa773cb2c",
                "84ee3440304ce276",
                "c22fdc035914278d",
                "a64593f2cfde4103"
            ]
        ]
    },
    {
        "id": "20b66d60ef6ee4c7",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "AI1",
        "func": "var input = msg.payload.AI1;\nmsg.payload = input;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 580,
        "wires": [
            [
                "c890af403175315e",
                "58b323304f15cfd7"
            ]
        ]
    },
    {
        "id": "5326f8dca6732c63",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "2#自吸泵",
        "func": "var aaa = flow.get(\"GSZXB2\")\nif(aaa === 1){\n   msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO2\", \"value\": \"0\" }] } };\n   flow.set(\"start2\", 0);\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO2\", \"value\": \"1\" }] } };\n    flow.set(\"start2\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 100,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "b06108ea0ddee393",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "1#自吸泵",
        "func": "var aaa = flow.get(\"GSZXB1\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO1\", \"value\": \"0\" }] } };\n    flow.set(\"start1\", 0);\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO1\", \"value\": \"1\" }] } };\n    flow.set(\"start1\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 20,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "5f5292af5d38fe77",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "1#硝化泵",
        "func": "var aaa = flow.get(\"XHB1\")\nif(aaa === 1){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO6\", \"value\": \"0\" }] } };\n    flow.set(\"start6\", 0);\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO6\", \"value\": \"1\" }] } };\n    flow.set(\"start6\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 420,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "f3d353a462afd063",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "1#回流泵",
        "func": "var aaa = flow.get(\"WNHLB1\")\nif(aaa === 1){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO5\", \"value\": \"0\" }] } };\n    flow.set(\"start5\", 0);\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO5\", \"value\": \"1\" }] } };\n    flow.set(\"start5\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 340,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "458e2c364ae5e897",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "1#罗茨风机",
        "func": "var aaa = flow.get(\"LCFJ1\")\nif(aaa === 1){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO3\", \"value\": \"0\" }] } };\n    flow.set(\"start3\", 0);\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO3\", \"value\": \"1\" }] } };\n    flow.set(\"start3\", 1);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 180,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "8c9bc2cc64135d10",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "2#罗茨风机",
        "func": "var aaa = flow.get(\"LCFJ2\")\nif(aaa === 1){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO4\", \"value\": \"0\" }] } };\n    flow.set(\"start4\", 0);\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO4\", \"value\": \"1\" }] } };\n    flow.set(\"start4\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 260,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "1ff087991da6ea70",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "1#碳源JBJ",
        "func": "var aaa = flow.get(\"JBJ1\")\nif(aaa === 1){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO7\", \"value\": \"0\"}] } };\n    flow.set(\"start7\", 0);\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO7\", \"value\": \"1\"}] } };\n    flow.set(\"start7\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 500,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "f15fe0b09e64a3c7",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "1#碳源",
        "func": "var aaa = flow.get(\"JYB1\")\nif (aaa === 1) {\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO8\", \"value\": \"0\" }] } };\n} else if (aaa === 0) {\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO8\", \"value\": \"1\" }] } };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 540,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "c890af403175315e",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "function 38",
        "func": "var aaa = msg.payload;\nvar bbb = aaa - 4000;\nvar ccc = 14 / 16000;\nvar lqll = bbb * ccc;\nflow.set(\"yaqilqll\",lqll);\nif (lqll < 0){\n    msg.payload = 0;\n}else{\n    msg.payload = parseFloat(lqll.toFixed(4));\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "ca12b43de3e4efcf",
        "type": "inject",
        "z": "c37c10683bca74ac",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 550,
        "y": 620,
        "wires": [
            [
                "93fca56ac7b758ff",
                "8ba238f4dfa15d1e"
            ]
        ]
    },
    {
        "id": "a2ffeff016e98c78",
        "type": "http request",
        "z": "c37c10683bca74ac",
        "name": "发送模板消息",
        "method": "POST",
        "ret": "obj",
        "url": "",
        "tls": "",
        "x": 1380,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "f02f78d43f7fdd15",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "设备离线告警",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"vpks8dx3GNykOuZPNUKeBYB9v0C6ZOXoOkysC1DNWVY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing7\": {\n            \"value\": \"亚琦处理站\",\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": \"控制终端\",\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": \"离线\",\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 940,
        "wires": [
            [
                "a2ffeff016e98c78"
            ]
        ]
    },
    {
        "id": "75fe6d34852b7ec7",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "设备上线告警",
        "func": "var access_token = global.get('access_token');\nvar time = global.get(\"mariaDBTime\");\nvar openid = msg.payload;\nmsg.url = `https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=${access_token}`;\nmsg.headers = {\"Content-Type\":\"application/json\"};\nmsg.payload = {\n    \"touser\": openid,\n    \"template_id\": \"-nOwSKt3OHr4NZd0gKG5uJ7YgDa1EI57Qb5Sz2BR_lY\",\n    \"url\": \"http://weixin.qq.com/download\",\n    \"data\": {\n        \"thing11\": {\n            \"value\": \"亚琦处理站\",\n            \"color\": \"#173177\"\n        },\n        \"thing2\": {\n            \"value\": \"控制终端\",\n            \"color\": \"#173177\"\n        },\n        \"phrase3\": {\n            \"value\": \"上线\",\n            \"color\": \"#173177\"\n        },\n        \"time4\":{\n            \"value\":time,\n            \"color\":\"#173177\"\n        }\n    }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 860,
        "wires": [
            [
                "a2ffeff016e98c78"
            ]
        ]
    },
    {
        "id": "45e064f17c475ca6",
        "type": "switch",
        "z": "c37c10683bca74ac",
        "name": "设备状态切换",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "设备在线",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "设备离线",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 900,
        "wires": [
            [
                "d249680f91b2113b"
            ],
            [
                "9a436dc77b1b0aab"
            ]
        ]
    },
    {
        "id": "755fe721575258a5",
        "type": "split",
        "z": "c37c10683bca74ac",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 950,
        "y": 860,
        "wires": [
            [
                "75fe6d34852b7ec7"
            ]
        ]
    },
    {
        "id": "d249680f91b2113b",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 860,
        "wires": [
            [
                "755fe721575258a5"
            ]
        ]
    },
    {
        "id": "9a436dc77b1b0aab",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "openid",
        "func": "msg.payload = global.get('openid')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 940,
        "wires": [
            [
                "e438c647c65cf41e"
            ]
        ]
    },
    {
        "id": "e438c647c65cf41e",
        "type": "split",
        "z": "c37c10683bca74ac",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 950,
        "y": 940,
        "wires": [
            [
                "f02f78d43f7fdd15"
            ]
        ]
    },
    {
        "id": "69422226b44030ed",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "自保程序",
        "func": "var aaa = msg.payload.DI3;\nvar start = flow.get(\"start3\");\nvar executed = flow.get(\"executed3\") || false; // 获取执行状态，默认为false\n\nif (start === 1 && aaa === 0 && !executed) {\n    // 如果start为1，aaa为0，并且executed为false（即未执行过）\n    msg.payload = {\n        \"rw_prot\": {\n            \"Ver\": \"1.0.1\",\n            \"dir\": \"down\",\n            \"id\": \"01\",\n            \"w_data\": [{ \"name\": \"DO3\", \"value\": \"1\" }]\n        }\n    };\n\n    // 更新执行状态为true，表示已经执行过\n    flow.set(\"executed3\", true);\n    \n    return msg; // 返回消息，表示条件满足并且代码执行\n}\n\n// 如果aaa不为0，重置执行状态为false\nif (aaa !== 0) {\n    flow.set(\"executed3\", false);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 220,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "a715ab9aa445e510",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "自保程序",
        "func": "var aaa = msg.payload.DI6;\nvar start = flow.get(\"start6\");\nvar executed = flow.get(\"executed3\") || false; // 获取执行状态，默认为false\n\nif (start === 1 && aaa === 0 && !executed) {\n    // 如果start为1，aaa为0，并且executed为false（即未执行过）\n    msg.payload = {\n        \"rw_prot\": {\n            \"Ver\": \"1.0.1\",\n            \"dir\": \"down\",\n            \"id\": \"01\",\n            \"w_data\": [{ \"name\": \"DO6\", \"value\": \"1\" }]\n        }\n    };\n\n    // 更新执行状态为true，表示已经执行过\n    flow.set(\"executed3\", true);\n    \n    return msg; // 返回消息，表示条件满足并且代码执行\n}\n\n// 如果aaa不为0，重置执行状态为false\nif (aaa !== 0) {\n    flow.set(\"executed3\", false);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 460,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "c22fdc035914278d",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "自保程序",
        "func": "var aaa = msg.payload.DI1;\nvar start = flow.get(\"start1\");\nvar executed = flow.get(\"executed3\") || false; // 获取执行状态，默认为false\n\nif (start === 1 && aaa === 0 && !executed) {\n    // 如果start为1，aaa为0，并且executed为false（即未执行过）\n    msg.payload = {\n        \"rw_prot\": {\n            \"Ver\": \"1.0.1\",\n            \"dir\": \"down\",\n            \"id\": \"01\",\n            \"w_data\": [{ \"name\": \"DO1\", \"value\": \"1\" }]\n        }\n    };\n\n    // 更新执行状态为true，表示已经执行过\n    flow.set(\"executed3\", true);\n    \n    return msg; // 返回消息，表示条件满足并且代码执行\n}\n\n// 如果aaa不为0，重置执行状态为false\nif (aaa !== 0) {\n    flow.set(\"executed3\", false);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 60,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "da8370bdcb8e53a0",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "自保程序",
        "func": "var aaa = msg.payload.DI2;\nvar start = flow.get(\"start2\");\nvar executed = flow.get(\"executed3\") || false; // 获取执行状态，默认为false\n\nif (start === 1 && aaa === 0 && !executed) {\n    // 如果start为1，aaa为0，并且executed为false（即未执行过）\n    msg.payload = {\n        \"rw_prot\": {\n            \"Ver\": \"1.0.1\",\n            \"dir\": \"down\",\n            \"id\": \"01\",\n            \"w_data\": [{ \"name\": \"DO2\", \"value\": \"1\" }]\n        }\n    };\n\n    // 更新执行状态为true，表示已经执行过\n    flow.set(\"executed3\", true);\n    \n    return msg; // 返回消息，表示条件满足并且代码执行\n}\n\n// 如果aaa不为0，重置执行状态为false\nif (aaa !== 0) {\n    flow.set(\"executed3\", false);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 140,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "335442caa773cb2c",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "自保程序",
        "func": "var aaa = msg.payload.DI4;\nvar start = flow.get(\"start4\");\nvar executed = flow.get(\"executed3\") || false; // 获取执行状态，默认为false\n\nif (start === 1 && aaa === 0 && !executed) {\n    // 如果start为1，aaa为0，并且executed为false（即未执行过）\n    msg.payload = {\n        \"rw_prot\": {\n            \"Ver\": \"1.0.1\",\n            \"dir\": \"down\",\n            \"id\": \"01\",\n            \"w_data\": [{ \"name\": \"DO4\", \"value\": \"1\" }]\n        }\n    };\n\n    // 更新执行状态为true，表示已经执行过\n    flow.set(\"executed3\", true);\n    \n    return msg; // 返回消息，表示条件满足并且代码执行\n}\n\n// 如果aaa不为0，重置执行状态为false\nif (aaa !== 0) {\n    flow.set(\"executed3\", false);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 300,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "84ee3440304ce276",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "自保程序",
        "func": "var aaa = msg.payload.DI5;\nvar start = flow.get(\"start5\");\nvar executed = flow.get(\"executed3\") || false; // 获取执行状态，默认为false\n\nif (start === 1 && aaa === 0 && !executed) {\n    // 如果start为1，aaa为0，并且executed为false（即未执行过）\n    msg.payload = {\n        \"rw_prot\": {\n            \"Ver\": \"1.0.1\",\n            \"dir\": \"down\",\n            \"id\": \"01\",\n            \"w_data\": [{ \"name\": \"DO5\", \"value\": \"1\" }]\n        }\n    };\n\n    // 更新执行状态为true，表示已经执行过\n    flow.set(\"executed3\", true);\n    \n    return msg; // 返回消息，表示条件满足并且代码执行\n}\n\n// 如果aaa不为0，重置执行状态为false\nif (aaa !== 0) {\n    flow.set(\"executed3\", false);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 380,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "93fca56ac7b758ff",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "出水累计",
        "func": "\nvar lqll = flow.get(\"yaqilqll\");\nvar lqll1 = lqll / 3.6;\n\n// 计算累积流量\nif (!flow.get(\"lwjilqll1\")) {\n    flow.set(\"lwjilqll1\", 0);\n};\n\nvar cumu = flow.get(\"lwjilqll1\");\nvar cumu1 = cumu + lqll1;\nvar cumu2 = cumu1 / 1000;\nflow.set(\"lwjilqll1\", cumu1);\nvar cumu3 = parseFloat(cumu2.toFixed(2));\nmsg.payload = cumu3;\nglobal.set(\"300lwji\", cumu3);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "3b066d486332c7c1",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "websocket",
        "func": "var tag = flow.get(\n  [\"GSZXB1\",\"GSZXB2\",\"LCFJ1\",\"LCFJ2\",\"WNHLB1\",\"XHB1\",\"JBJ1\",\"JYB1\"\n  ])\nvar yaqilqll = flow.get('yaqilqll')\nvar yaqilwji = global.get('300lwji')\nif (yaqilqll < 0){\n  yaqilqll = 0\n}\nmsg.payload = {\n    flow: yaqilqll,\n    totalFlow: yaqilwji,\n    alarm : 1,\n    devices: [\n      { name: '1#进水泵', running: tag[0], fault: 0 },\n      { name: '2#进水泵', running: tag[1],fault: 0 },\n      { name: '1#罗茨风机', running: tag[2], fault: 0 },\n      { name: '2#罗茨风机', running: tag[3], fault: 0 },\n      { name: '污泥回流泵', running: tag[4], fault: 0 },\n      { name: '硝化回流泵', running: tag[5], fault: 0 },\n      { name: '加药搅拌器', running: tag[6], fault: 0 },\n      { name: '加药计量泵', running: tag[7], fault: 0 },\n    ],\n  }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 740,
        "wires": [
            [
                "0901c5afb3db9f58",
                "e216ece52947c891"
            ]
        ]
    },
    {
        "id": "1f135f3b51c9e4f8",
        "type": "json",
        "z": "c37c10683bca74ac",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 250,
        "y": 560,
        "wires": [
            [
                "507fdc7452b53791"
            ]
        ]
    },
    {
        "id": "507fdc7452b53791",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.device;\n\n// 根据设备名称发送到不同的输出\nswitch (deviceName) {\n    case \"1#进水泵\":\n        msg.topic = \"button1\";\n        return [msg, null, null, null, null, null, null, null];  // 发送到第一个输出\n    case \"2#进水泵\":\n        msg.topic = \"button2\";\n        return [null, msg, null, null, null, null, null, null];  // 发送到第二个输出\n    case \"1#罗茨风机\":\n        msg.topic = \"button3\";\n        return [null, null, msg, null, null, null, null, null];  // 发送到第三个输出\n    case \"2#罗茨风机\":\n        msg.topic = \"button4\";\n        return [null, null, null, msg, null, null, null, null];  // 发送到第四个输出\n    case \"污泥回流泵\":\n        msg.topic = \"button5\";\n        return [null, null, null, null, msg, null, null, null];  // 发送到第五个输出\n    case \"硝化回流泵\":\n        msg.topic = \"button6\";\n        return [null, null, null, null, null, msg, null, null];  // 发送到第六个输出\n    case \"加药搅拌器\":\n        msg.topic = \"button7\";\n        return [null, null, null, null, null, null, msg, null];  // 发送到第七个输出\n    case \"加药计量泵\":\n        msg.topic = \"button8\";\n        return [null, null, null, null, null, null, null, msg];  // 发送到第八个输出\n    default:\n        return [null, null, null, null, null, null, null, null];  // 如果没有匹配，丢弃消息\n}\n",
        "outputs": 8,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 340,
        "wires": [
            [
                "b06108ea0ddee393"
            ],
            [
                "5326f8dca6732c63"
            ],
            [
                "458e2c364ae5e897"
            ],
            [
                "8c9bc2cc64135d10"
            ],
            [
                "f3d353a462afd063"
            ],
            [
                "5f5292af5d38fe77"
            ],
            [
                "1ff087991da6ea70"
            ],
            [
                "f15fe0b09e64a3c7"
            ]
        ]
    },
    {
        "id": "0901c5afb3db9f58",
        "type": "websocket out",
        "z": "c37c10683bca74ac",
        "name": "",
        "server": "bf84fe50fb7a72d9",
        "client": "",
        "x": 970,
        "y": 720,
        "wires": []
    },
    {
        "id": "a64593f2cfde4103",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "function 114",
        "func": "flow.set(\"GSZXB1\", msg.payload.DI1)\nflow.set(\"GSZXB2\", msg.payload.DI2)\nflow.set(\"LCFJ1\", msg.payload.DI3)\nflow.set(\"LCFJ2\", msg.payload.DI4)\nflow.set(\"WNHLB1\", msg.payload.DI5)\nflow.set(\"XHB1\", msg.payload.DI6)\nflow.set(\"JBJ1\", msg.payload.DI7)\nflow.set(\"JYB1\", msg.payload.DI8)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 100,
        "wires": [
            [
                "4c8e1499d00b5aae"
            ]
        ]
    },
    {
        "id": "15f708e4ae1f99e6",
        "type": "debug",
        "z": "c37c10683bca74ac",
        "name": "debug 384",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 460,
        "wires": []
    },
    {
        "id": "05657acd19c7cd1f",
        "type": "websocket in",
        "z": "c37c10683bca74ac",
        "name": "",
        "server": "bf84fe50fb7a72d9",
        "client": "",
        "x": 80,
        "y": 560,
        "wires": [
            [
                "1f135f3b51c9e4f8"
            ]
        ]
    },
    {
        "id": "8ba238f4dfa15d1e",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "定时",
        "func": "var time = global.get(\"cstTime\"); // 获取时间对象\nvar hour = time.hour;\nvar minute = time.minute;\nvar second = time.second;\n\n// 检查是否为指定的时间 10:47:00\nif (hour === 0 && minute === 0 && second === 0) {\n    msg.payload = 0;\n    return msg; \n} else {\n    return null; \n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 660,
        "wires": [
            [
                "795c0f322567f339"
            ]
        ]
    },
    {
        "id": "795c0f322567f339",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "累计清零",
        "func": "var rest = msg.payload;\nflow.set(\"lwjilqll\", rest);\n\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "c50f032057b768b5",
        "type": "inject",
        "z": "c37c10683bca74ac",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 370,
        "y": 780,
        "wires": [
            [
                "63642f05170e3118",
                "3b066d486332c7c1",
                "e4bdd134c8873901"
            ]
        ]
    },
    {
        "id": "4c8e1499d00b5aae",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "网关检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized2') === undefined) {\n    flow.set('initialized2', true);\n    flow.set('lastMessageTime2', null);\n    flow.set('timeoutId2', null);\n    flow.set('status2', \"离线\"); // 用于在线/离线状态\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    return { payload: \"设备离线\", topic: \"device/status\" };\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    flow.set('status2', \"离线\"); // 超时则设备为离线\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    node.send({ payload: \"设备离线\", topic: \"device/status\" });\n}\n\n// 如果有现有的超时，清除它\nif (flow.get('timeoutId2') !== null) {\n    clearTimeout(flow.get('timeoutId2'));\n}\n\n// 更新最后接收到消息的时间\nflow.set('lastMessageTime2', Date.now());\n\n// 接收到任何数据时都视为设备在线\nflow.set('status2', \"在线\");\nnode.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\nnode.send({ payload: \"设备在线\", topic: \"device/status\" });\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId2', timeoutId);\n\n// 向外发送设备当前状态\nreturn {\n    payload: {\n        deviceStatus: flow.get('status2'),\n    },\n    topic: \"device/status\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "58b323304f15cfd7",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized2_1') === undefined) {\n    flow.set('initialized2_1', true);\n    flow.set('lastMessageTime2_1', null);\n    flow.set('timeoutId2_1', null);\n    flow.set('faultStatus2_1', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus2_1', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus2_1', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId2_1', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus2_1')\n    }, \n    topic: \"device/status\" \n};\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "63642f05170e3118",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "function 148",
        "func": "\nvar b = flow.get('status2')\nif (b === \"在线\") {\n    var a = 1;\n} else if (b === \"离线\") {\n    a = 0;\n}\n// 获取保存的上次状态值，存储在 flow 级别的变量中\nlet lastStatus = flow.get(\"lastStatus\");\n\n// 检查是否有状态变化，或者是首次设置状态（lastStatus 为 undefined）\nif (a === 1 && lastStatus !== 1) {\n    // 设备从离线（或首次在线）变为在线，发送在线消息\n    node.send({ payload: \"设备在线\" });\n    flow.set(\"lastStatus\", 1);  // 更新状态为在线\n} else if (a === 0 && lastStatus !== 0) {\n    // 设备从在线（或首次离线）变为离线，发送离线消息\n    node.send({ payload: \"设备离线\" });\n    flow.set(\"lastStatus\", 0);  // 更新状态为离线\n}\n\n// 不发送消息时，返回 null\nreturn null;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 900,
        "wires": [
            [
                "45e064f17c475ca6"
            ]
        ]
    },
    {
        "id": "19c75cf342283db1",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "function 151",
        "func": "msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO3\", \"value\": \"1\" }] } };\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 40,
        "wires": [
            [
                "864a839f0fb8748a"
            ]
        ]
    },
    {
        "id": "e719985d2a96f4c4",
        "type": "inject",
        "z": "c37c10683bca74ac",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1030,
        "y": 40,
        "wires": [
            [
                "19c75cf342283db1"
            ]
        ]
    },
    {
        "id": "e216ece52947c891",
        "type": "debug",
        "z": "c37c10683bca74ac",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 640,
        "wires": []
    },
    {
        "id": "aa27477c1494b99e",
        "type": "websocket out",
        "z": "c37c10683bca74ac",
        "name": "",
        "server": "2c17e4a73d5171ff",
        "client": "",
        "x": 960,
        "y": 780,
        "wires": []
    },
    {
        "id": "e4bdd134c8873901",
        "type": "function",
        "z": "c37c10683bca74ac",
        "name": "websocket",
        "func": "var tag = flow.get(\n  [\"GSZXB1\",\"GSZXB2\",\"LCFJ1\",\"LCFJ2\",\"WNHLB1\",\"XHB1\",\"JBJ1\",\"JYB1\"\n  ])\nvar yaqilqll = flow.get('yaqilqll')\nvar yaqilwji = global.get('300lwji')\nif (yaqilqll < 0){\n  yaqilqll = 0\n}\nvar yaqilqll = flow.get('yaqilqll')\nvar indata = [\n    { name: '进水流量', data: yaqilqll, dw: 'm³/h', alarm: 0},\n    { name: '进水累计', data: yaqilwji, dw: 'm³', alarm: 0},\n];\nvar devices = [\n  { name: '1#进水泵', run: tag[0], fault: 0 },\n  { name: '2#进水泵', run: tag[1], fault: 0 },\n  { name: '1#罗茨风机', run: tag[2], fault: 0 },\n  { name: '2#罗茨风机', run: tag[3], fault: 0 },\n  { name: '污泥回流泵', run: tag[4], fault: 0 },\n  { name: '硝化回流泵', run: tag[5], fault: 0 },\n  { name: '加药搅拌器', run: tag[6], fault: 0 },\n  { name: '加药计量泵', run: tag[7], fault: 0 },\n];\nmsg.payload = {\n    indata,\n    devices\n  }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 780,
        "wires": [
            [
                "aa27477c1494b99e"
            ]
        ]
    },
    {
        "id": "98a19968776926ea",
        "type": "inject",
        "z": "057ffacb44126a80",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 610,
        "y": 40,
        "wires": [
            [
                "53fdf1a9e5dbb1d3"
            ]
        ]
    },
    {
        "id": "895504c7329c7bb0",
        "type": "websocket out",
        "z": "057ffacb44126a80",
        "name": "",
        "server": "b14678bf90eaa9c2",
        "client": "",
        "x": 950,
        "y": 40,
        "wires": []
    },
    {
        "id": "53fdf1a9e5dbb1d3",
        "type": "function",
        "z": "057ffacb44126a80",
        "name": "websocket",
        "func": "var tag = flow.get(['WFB1_R','WFB1_F','WFB2_R','WFB2_F'])\n\n\nvar dataflow = [\n    {name: '工业厂泵房液位', data: 0, dw: 'm', alarm: 0},\n\n];\n\n// 定义设备列表\nvar devices = [\n\n    { name: '1#外翻泵', running:tag[0]  , faul: tag[1] },\n    { name: '2#外翻泵', running: tag[2], faul: tag[3] },\n    { name: '启闭机开', running: 0, faul: 0 },\n    { name: '启闭机关', running: 0, faul: 0 },\n];\n\nvar deviceFrequency = [\n];\n\n// 构建最终的消息负载\nmsg.payload = {\n    dataflow,\n    deviceFrequency,\n    devices,\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 40,
        "wires": [
            [
                "895504c7329c7bb0"
            ]
        ]
    },
    {
        "id": "c7e922c735c2a7c3",
        "type": "mqtt in",
        "z": "057ffacb44126a80",
        "name": "",
        "topic": "/UploadTopic2222",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "d60221e42718cf36",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 100,
        "wires": [
            [
                "2fe43f51cb40888a",
                "c37405de10c9c048",
                "2e887ce8e8b033b8",
                "eb398c9436ce3df1"
            ]
        ]
    },
    {
        "id": "2fe43f51cb40888a",
        "type": "function",
        "z": "057ffacb44126a80",
        "name": "光大流量计",
        "func": "var aaa = msg.payload.ai1;\nvar bbb = aaa - 4000;\nvar ccc = 100 / 16000;\nvar lqll1 = bbb * ccc;\nmsg.payload = parseFloat(lqll1.toFixed(2));\nflow.set(\"gd1\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 120,
        "wires": [
            [
                "b64ef1ad83269743"
            ]
        ]
    },
    {
        "id": "dc2e6fdd98afe40a",
        "type": "mqtt in",
        "z": "057ffacb44126a80",
        "name": "",
        "topic": "/RespondTopic2222",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "d60221e42718cf36",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "41664f287f22605d"
            ]
        ]
    },
    {
        "id": "41664f287f22605d",
        "type": "debug",
        "z": "057ffacb44126a80",
        "name": "debug 430",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 200,
        "wires": []
    },
    {
        "id": "82b01aa00dafec62",
        "type": "mqtt out",
        "z": "057ffacb44126a80",
        "name": "",
        "topic": "/DownloadTopic2222",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d60221e42718cf36",
        "x": 960,
        "y": 220,
        "wires": []
    },
    {
        "id": "c37405de10c9c048",
        "type": "function",
        "z": "057ffacb44126a80",
        "name": "网关检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized2') === undefined) {\n    flow.set('initialized2', true);\n    flow.set('lastMessageTime2', null);\n    flow.set('timeoutId2', null);\n    flow.set('status2', \"离线\"); // 用于在线/离线状态\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    return { payload: \"设备离线\", topic: \"device/status\" };\n}\n\n// 处理超时的函数\nfunction handleTimeout() {\n    flow.set('status2', \"离线\"); // 超时则设备为离线\n    node.status({ fill: \"red\", shape: \"ring\", text: \"离线\" });\n    node.send({ payload: \"设备离线\", topic: \"device/status\" });\n}\n\n// 如果有现有的超时，清除它\nif (flow.get('timeoutId2') !== null) {\n    clearTimeout(flow.get('timeoutId2'));\n}\n\n// 更新最后接收到消息的时间\nflow.set('lastMessageTime2', Date.now());\n\n// 接收到任何数据时都视为设备在线\nflow.set('status2', \"在线\");\nnode.status({ fill: \"green\", shape: \"dot\", text: \"在线\" });\nnode.send({ payload: \"设备在线\", topic: \"device/status\" });\n\n// 设置新的超时\nlet timeoutId = setTimeout(handleTimeout, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId2', timeoutId);\n\n// 向外发送设备当前状态\nreturn {\n    payload: {\n        deviceStatus: flow.get('status2'),\n    },\n    topic: \"device/status\"\n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b64ef1ad83269743",
        "type": "function",
        "z": "057ffacb44126a80",
        "name": "设备检测",
        "func": "// 定义超时时间（例如10分钟，单位为毫秒）\nconst TIMEOUT_DURATION = 10 * 60 * 1000;\n\n// 初始化上下文变量，如果尚未设置\nif (flow.get('initialized2_1') === undefined) {\n    flow.set('initialized2_1', true);\n    flow.set('lastMessageTime2_1', null);\n    flow.set('timeoutId2_1', null);\n    flow.set('faultStatus2_1', \"正常\"); // 用于设备故障状态\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    return { payload: \"设备正常\", topic: \"device/status\" };\n}\n\n// 获取消息中的数据\nlet input = msg.payload;\n\n// 检查接收到的数据是否为数值\nlet value = parseFloat(input);\nif (isNaN(value)) {\n    // 如果不能转换为数值，认为设备故障\n    flow.set('faultStatus2_1', \"故障\");\n    node.status({ fill: \"yellow\", shape: \"dot\", text: \"设备故障\" });\n    node.send({ payload: \"设备故障: 接收到无效数据\", topic: \"device/status\" });\n} else {\n    // 如果数据为有效数值，设备正常无故障\n    flow.set('faultStatus2_1', \"正常\");\n    node.status({ fill: \"green\", shape: \"dot\", text: \"正常\" });\n    node.send({ payload: \"设备正常\", topic: \"device/status\" });\n}\n\n// 设置新的超时（如果有其他用途可以保留）\nlet timeoutId = setTimeout(function() {\n    // 此处不处理离线状态\n}, TIMEOUT_DURATION);\n\n// 保存新的超时ID\nflow.set('timeoutId2_1', timeoutId);\n\n// 向外发送故障状态\nreturn { \n    payload: {\n        faultStatus: flow.get('faultStatus2_1')\n    }, \n    topic: \"device/status\" \n};\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "32c52ec61ed751ed",
        "type": "websocket in",
        "z": "057ffacb44126a80",
        "name": "",
        "server": "b14678bf90eaa9c2",
        "client": "",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "bb5131dac18c754c"
            ]
        ]
    },
    {
        "id": "bb5131dac18c754c",
        "type": "json",
        "z": "057ffacb44126a80",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 330,
        "y": 260,
        "wires": [
            [
                "99945f99325b0dc8"
            ]
        ]
    },
    {
        "id": "99945f99325b0dc8",
        "type": "function",
        "z": "057ffacb44126a80",
        "name": "Device Function",
        "func": "// 获取设备名称\nlet deviceName = msg.payload.device;\n\n// 设备名称到输出索引的映射\nconst deviceMapping = {\n    '1#外翻泵': 0,\n    '2#外翻泵': 1,\n    '启闭机开': 2,\n    '启闭机关': 3,\n\n};\n\n// 初始化输出数组，包含15个输出端口\nlet outputs = new Array(4).fill(null);\n\n// 获取对应的输出索引\nlet outputIndex = deviceMapping[deviceName];\n\nif (outputIndex !== undefined && outputIndex < outputs.length) {\n    // 设置对应的输出\n    outputs[outputIndex] = msg;\n}\n\n// 返回所有输出端口\nreturn outputs;\n",
        "outputs": 4,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 260,
        "wires": [
            [
                "012176312b9cf104"
            ],
            [
                "b292481399403fce"
            ],
            [],
            []
        ]
    },
    {
        "id": "2e887ce8e8b033b8",
        "type": "function",
        "z": "057ffacb44126a80",
        "name": "获取状态",
        "func": "flow.set(\"WFB1_R\", msg.payload.di1)\nflow.set(\"WFB2_R\", msg.payload.di3)\nflow.set(\"WFB1_F\", msg.payload.di2)\nflow.set(\"WFB2_F\", msg.payload.di4)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "012176312b9cf104",
        "type": "function",
        "z": "057ffacb44126a80",
        "name": "1#自吸泵",
        "func": "var aaa = flow.get(\"WFB1_R\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO1\", \"value\": \"0\" }] } };\n    flow.set(\"start1\", 0);\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO1\", \"value\": \"1\" }] } };\n    flow.set(\"start1\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 200,
        "wires": [
            [
                "82b01aa00dafec62"
            ]
        ]
    },
    {
        "id": "b292481399403fce",
        "type": "function",
        "z": "057ffacb44126a80",
        "name": "2#自吸泵",
        "func": "var aaa = flow.get(\"WFB2_R\")\nif(aaa === 1){\n   \n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO2\", \"value\": \"0\" }] } };\n    flow.set(\"start1\", 0);\n}else if(aaa === 0){\n    msg.payload = { \"rw_prot\": { \"Ver\": \"1.0.1\", \"dir\": \"down\", \"id\": \"01\", \"w_data\": [{ \"name\": \"DO2\", \"value\": \"1\" }] } };\n    flow.set(\"start1\", 1);\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 240,
        "wires": [
            [
                "82b01aa00dafec62"
            ]
        ]
    },
    {
        "id": "eb398c9436ce3df1",
        "type": "debug",
        "z": "057ffacb44126a80",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 160,
        "wires": []
    },
    {
        "id": "f9bb7398.d1d79",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "准备数据库插入",
        "func": "let message = msg.payload;\n\n// 使用反引号包裹 `read` 字段，避免与保留字冲突\nlet sql = `INSERT INTO messages (type, title, content, timestamp, \\`read\\`) VALUES (?, ?, ?, ?, ?)`;\nlet values = [message.type, message.title, message.content, message.timestamp, message.read];\n\nmsg.topic = sql;\nmsg.payload = values;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 40,
        "wires": [
            [
                "dbInsert"
            ]
        ]
    },
    {
        "id": "dbInsert",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "插入消息到数据库",
        "x": 650,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "e0d890a0.a28bf8",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "获取最新10条消息",
        "func": "let sql = `SELECT * FROM messages ORDER BY id DESC LIMIT 10;`;\nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 160,
        "wires": [
            [
                "dbSelect"
            ]
        ]
    },
    {
        "id": "dbSelect",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "查询最新消息",
        "x": 640,
        "y": 160,
        "wires": [
            [
                "aa899a9a395db98e"
            ]
        ]
    },
    {
        "id": "1184cd2482543c54",
        "type": "inject",
        "z": "d7d388fe2f857d05",
        "name": "报警消息",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"alarm\",\"title\":\"高铁污水处理厂\",\"content\":\"48#风机报警\",\"timestamp\":\"2025-03-27 11:10:00\",\"read\":0}",
        "payloadType": "json",
        "x": 160,
        "y": 40,
        "wires": [
            [
                "f9bb7398.d1d79"
            ]
        ]
    },
    {
        "id": "57cf60b0def8d2f4",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "/api/messages",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "e0d890a0.a28bf8"
            ]
        ]
    },
    {
        "id": "aa899a9a395db98e",
        "type": "http response",
        "z": "d7d388fe2f857d05",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 160,
        "wires": []
    },
    {
        "id": "f825c1b6f1ed51b2",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "/api/messagesquery",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "3eae66b301bdc68d"
            ]
        ]
    },
    {
        "id": "2eac7d88bf63554b",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "查询最新消息",
        "x": 640,
        "y": 200,
        "wires": [
            [
                "5235199e8e35f9e8"
            ]
        ]
    },
    {
        "id": "3eae66b301bdc68d",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "获取最新10条消息",
        "func": "var start = new Date(msg.payload.startDate); // 转换为 Date 对象\nvar stop = new Date(msg.payload.endDate);\n\n// 增加 8 小时\nstart.setHours(start.getHours() + 8);\nstop.setHours(stop.getHours() + 8);\n\n// 格式化为 MySQL 兼容的时间格式\nfunction formatDate(date) {\n    return date.toISOString().slice(0, 19).replace('T', ' ');\n}\n\nvar formattedStart = formatDate(start);\nvar formattedStop = formatDate(stop);\n\n// 构造 SQL 查询\nlet sql = `SELECT * FROM messages WHERE timestamp >= '${formattedStart}' \nAND timestamp <= '${formattedStop}' ORDER BY timestamp DESC`;\n\nmsg.topic = sql;\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 200,
        "wires": [
            [
                "2eac7d88bf63554b"
            ]
        ]
    },
    {
        "id": "5235199e8e35f9e8",
        "type": "http response",
        "z": "d7d388fe2f857d05",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 200,
        "wires": []
    },
    {
        "id": "65f50d22b87a3897",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "/api/site/sites",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 300,
        "wires": [
            [
                "30ad7e21876b5bfe"
            ]
        ]
    },
    {
        "id": "30ad7e21876b5bfe",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "gt",
        "func": "// 获取全局变量\nvar inlj = global.get('gtout_lj');\nvar inlj1 = global.get(\"5000lwji\")\nvar inlj2 = global.get(\"500lwji\");\nvar alarm = global.get('faultyDevices')\nvar inlj3 = global.get('300lwji')\nif (inlj3< 0){\n    inlj3 = 0;\n}\n// 初始化输出消息对象\nlet output = [{\n    name: \"高铁污水处理厂\",\n    status: \"在线\",\n    alarm: \"设施正常\",\n    id: 1,\n    address: \"砀山县高铁新区\",\n    totalInflow: inlj,\n    departments: [\"部门管理员\",\"运行班组\",\"管理员\"],\n},\n{\n    name: \"5000吨处理站\",\n    status: \"在线\",\n    alarm: \"设施正常\",\n    id: 2,\n    address: \"砀山县道北路\",\n    totalInflow: inlj1,\n    departments: [\"5000吨处理站\",\"管理员\"],\n    } ,\n    {\n    name: \"西地亚处理站\",\n    status: \"在线\", // 设置通讯终端的在线状态\n    alarm: \"设施停用\",\n    id: 3,\n    address: \"砀山县西地亚\",\n    totalInflow: inlj2,\n    departments: [\"部门管理员\",\"运行班组\",\"管理员\"],\n} ,\n    {\n    name: \"亚琦处理站\",\n    status: \"在线\", // 设置通讯终端的在线状态\n    alarm: \"设施停用\",\n    id: 4,\n    address: \"砀山县亚琦广场北侧\",\n    totalInflow: inlj3,\n    departments: [\"部门管理员\",\"运行班组\",\"管理员\"],\n    }\n\n];\nmsg.payload = output\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 300,
        "wires": [
            [
                "09270b770f339bb2"
            ]
        ]
    },
    {
        "id": "09270b770f339bb2",
        "type": "http response",
        "z": "d7d388fe2f857d05",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 300,
        "wires": []
    },
    {
        "id": "8385b4cd9e8523c5",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "获取数据",
        "func": "var lwji5000 = global.get(\"5000lwji\") || null;\nvar lwji500 = global.get(\"500lwji\") || null;\nvar lwji300 = global.get(\"300lwji\") || null;\nvar time = global.get(\"mariaDBTime\") || null;\nvar lwji3000 = global.get(\"yzlj\") || null;\nvar gtout_lj = global.get('gtout_lj')||null;\nvar gtin_lj = global.get('gtout_lj')||null;\n// 创建 SQL 命令\nmsg.topic = `\n    INSERT INTO leiji (\n    time,\n    yaqistation,\n    yinzhuangstation, \n    xidiyastation,\n    fivestation,\n    gaotie_in,\n    gaotie_out\n\n    ) \n    VALUES (?, ?, ?, ?, ?, ?, ?)\n`;\n\nmsg.payload = [\n    time,\n    lwji300,\n    lwji3000,\n    lwji500,\n    lwji5000,\n    gtin_lj,\n    gtout_lj\n];\n\n// 获取时间对象\nvar currentTime = global.get(\"cstTime\") || null;\nif (currentTime) {\n    var hour = currentTime.hour || null;\n    var minute = currentTime.minute || null;\n    var second = currentTime.second || null;\n\n    if (hour === 23 && minute === 59 && second === 59) {\n        return msg;\n    } else {\n        return null;\n    }\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 80,
        "wires": [
            [
                "fc563b49925e6d1b"
            ]
        ]
    },
    {
        "id": "fc563b49925e6d1b",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 620,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7e4b14d14c3b8b88",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "api/check-admin-status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 340,
        "wires": [
            [
                "49d6545d7e412867"
            ]
        ]
    },
    {
        "id": "33dfcedc98ea84b9",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "806ba83c98eb2e99",
        "name": "",
        "x": 610,
        "y": 340,
        "wires": [
            [
                "788d599b9c61a845"
            ]
        ]
    },
    {
        "id": "49d6545d7e412867",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "function 15",
        "func": "var id = msg.payload.userId;\n\nconst query = `\n    SELECT is_admin \n    FROM users1 \n    WHERE id = ?;\n`;\n\nmsg.topic = query;\nmsg.payload = [id]; // 将参数作为数组传入\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 340,
        "wires": [
            [
                "33dfcedc98ea84b9"
            ]
        ]
    },
    {
        "id": "788d599b9c61a845",
        "type": "http response",
        "z": "d7d388fe2f857d05",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 340,
        "wires": []
    },
    {
        "id": "bbb7fc46fd34ebef",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "/api/messages/:id/read",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "a8753dd69efa6a78"
            ]
        ]
    },
    {
        "id": "a8753dd69efa6a78",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "function 6",
        "func": "var id = msg.req.params.id; \nmsg.topic = \"UPDATE messages SET `read` = 1 WHERE id = ?\";\nmsg.payload = [id]; \nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 240,
        "wires": [
            [
                "1e91ce44fa74cecd"
            ]
        ]
    },
    {
        "id": "1e91ce44fa74cecd",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "查询最新消息",
        "x": 640,
        "y": 240,
        "wires": [
            [
                "3162ba3785558ca9"
            ]
        ]
    },
    {
        "id": "3162ba3785558ca9",
        "type": "http response",
        "z": "d7d388fe2f857d05",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 240,
        "wires": []
    },
    {
        "id": "4c89d26861d8baeb",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "/api/hydata",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "52945a482c0f213e"
            ]
        ]
    },
    {
        "id": "e33f5c20b6c9d0c5",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "查询最新消息",
        "x": 580,
        "y": 1040,
        "wires": [
            [
                "08aa6912492ab07f"
            ]
        ]
    },
    {
        "id": "08aa6912492ab07f",
        "type": "http response",
        "z": "d7d388fe2f857d05",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 1060,
        "wires": []
    },
    {
        "id": "52945a482c0f213e",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "获取最新10条消息",
        "func": "let sql = `SELECT * FROM huayan_data ORDER BY id DESC LIMIT 10;`;\nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1040,
        "wires": [
            [
                "e33f5c20b6c9d0c5"
            ]
        ]
    },
    {
        "id": "b8e2b2716388808d",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "api/wuni",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 120,
        "y": 1100,
        "wires": [
            [
                "6d1ed91ad11ea2b6"
            ]
        ]
    },
    {
        "id": "6d1ed91ad11ea2b6",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "写入污泥化验数据",
        "func": "let response = { success: false, message: \"\", data: null };\n\nif (!msg.payload) {\n    response.message = \"请求数据为空\";\n    msg.statusCode = 400;\n    msg.payload = response;\n    return msg;\n}\n\ntry {\n    const requestData = msg.payload;\n\n    if (!requestData.dbName || !requestData.tableName || !requestData.data) {\n        response.message = \"缺少必要的数据字段(dbName, tableName, data)\";\n        msg.statusCode = 400;\n        msg.payload = response;\n        return msg;\n    }\n\n    if (requestData.dbName !== \"nodered\" || requestData.tableName !== \"sludge_data\") {\n        response.message = \"数据库名或表名不正确\";\n        msg.statusCode = 400;\n        msg.payload = response;\n        return msg;\n    }\n\n    const values = [];\n    const placeholders = [];\n\n    for (const sample of requestData.data) {\n        if (!sample.sample_name || !sample.time) {\n            throw new Error(\"样品名称和采样时间不能为空\");\n        }\n\n        // 添加参数值，确保所有字段都按顺序提供，即使为空也传 null\n        values.push(\n            sample.sample_name,\n            sample.concentration || null,\n            sample.settling_ratio || null,\n            sample.water_content || null,\n            sample.time\n        );\n\n        // 添加 SQL 占位符\n        placeholders.push(\"(?, ?, ?, ?, ?)\");\n    }\n\n    // 构造 SQL 插入语句\n    msg.topic = `\n        INSERT INTO sludge_data \n        (sample_name, concentration, settling_ratio, water_content, time)\n        VALUES ${placeholders.join(\", \")}\n    `;\n    msg.payload = values;\n\n    response.success = true;\n    response.message = `成功插入 ${requestData.data.length} 条污泥数据`;\n    response.data = { count: requestData.data.length };\n\n    flow.set(\"sludgeDataResponse\", response);\n    msg.statusCode = 200;\n    return msg;\n\n} catch (error) {\n    node.error(\"处理污泥数据时出错: \" + error.message, msg);\n    response.message = \"服务器处理数据时出错: \" + error.message;\n    msg.statusCode = 500;\n    msg.payload = response;\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1100,
        "wires": [
            [
                "7fb8a4ded223f38e"
            ]
        ]
    },
    {
        "id": "7fb8a4ded223f38e",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 540,
        "y": 1100,
        "wires": [
            [
                "6a9c4a740801e0df"
            ]
        ]
    },
    {
        "id": "6a9c4a740801e0df",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "function 21",
        "func": "// 从flow中获取之前保存的响应\nconst response = flow.get(\"sludgeDataResponse\") || { \n    success: false, \n    message: \"未知错误\" \n};\n\n// 检查数据库操作是否成功\nif (msg.payload && msg.payload.affectedRows > 0) {\n    // 数据库操作成功\n    response.success = true;\n    if (!response.message) {\n        response.message = `成功插入${msg.payload.affectedRows}条数据`;\n    }\n} else if (msg.error) {\n    // 数据库操作失败\n    response.success = false;\n    response.message = \"数据库错误: \" + msg.error.message;\n}\n\nmsg.payload = response;\nmsg.statusCode = response.success ? 200 : 500;\nmsg.headers = {\n    \"Content-Type\": \"application/json\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1100,
        "wires": [
            [
                "08aa6912492ab07f"
            ]
        ]
    },
    {
        "id": "ef1f1916cadae1fd",
        "type": "inject",
        "z": "d7d388fe2f857d05",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "8385b4cd9e8523c5"
            ]
        ]
    },
    {
        "id": "63d8451612adc6f9",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "api/stats/overview",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1360,
        "wires": [
            [
                "5c265404a1e90560"
            ]
        ]
    },
    {
        "id": "5a9a57beaf31e857",
        "type": "http response",
        "z": "d7d388fe2f857d05",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 1360,
        "wires": []
    },
    {
        "id": "5c265404a1e90560",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "刷新数据",
        "func": "// 获取当前日期\nconst now = new Date();\n\n// 获取当月1号\nconst startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n\n// 格式化函数\nfunction formatDate(date) {\n    const year = date.getFullYear();\n    const month = `${date.getMonth() + 1}`.padStart(2, '0');\n    const day = `${date.getDate()}`.padStart(2, '0');\n    return `${year}-${month}-${day}`;\n}\n\nconst startDate = formatDate(startOfMonth);\nconst endDate = formatDate(now);\n\n// 构建 SQL 查询\nconst query = `\n    SELECT \n        DATE_FORMAT(date, '%Y-%m-%d') AS date, \n        inflow, \n        outflow, \n        carbon_source, \n        phosphorus_removal, \n        disinfectant, \n        sludge_quantity \n    FROM daily_report\n    WHERE date BETWEEN '${startDate}' AND '${endDate}'\n    ORDER BY date DESC;\n`;\n\nmsg.topic = query;\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1360,
        "wires": [
            [
                "666603829306e2f1"
            ]
        ]
    },
    {
        "id": "666603829306e2f1",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 480,
        "y": 1360,
        "wires": [
            [
                "d4fc7787e57fbeb1"
            ]
        ]
    },
    {
        "id": "dce4397c696c3f7e",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "api/logs",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 100,
        "y": 1860,
        "wires": [
            [
                "8ef69b15a28e9aea"
            ]
        ]
    },
    {
        "id": "8ef69b15a28e9aea",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "function 32",
        "func": "// 验证日志数据并添加中国时区的时间戳\n// 名称: 验证日志数据\n// 输出数量: 2 (第一个为有效数据，第二个为无效数据的错误响应)\n\n// 验证必要字段\nconst requiredFields = [\"device_name\", \"operation_type\", \"operation_content\"];\nlet isValid = true;\n\nfor (const field of requiredFields) {\n    if (!msg.payload[field]) {\n        isValid = false;\n        node.warn(`日志数据缺少必要字段: ${field}`);\n        break;\n    }\n}\n\n// 添加中国时区的时间戳 (UTC+8)\nconst now = new Date();\n// 使用标准方法将时间转换为UTC+8\nconst chinaTime = new Date(now.getTime() + (8 * 60 * 60 * 1000));\nmsg.payload.operation_time = chinaTime.toISOString().slice(0, 19).replace(\"T\", \" \");\n\n// 设置默认值\nmsg.payload.user_id = msg.payload.user_id || 0;\nmsg.payload.username = msg.payload.username || \"未知用户\";\nmsg.payload.site_id = msg.payload.site_id || 0;\nmsg.payload.site_name = msg.payload.site_name || \"未知站点\";\nmsg.payload.client_info = msg.payload.client_info || \"未知客户端\";\n\n// 调试日志\nnode.debug(\"处理日志数据: \" + JSON.stringify(msg.payload));\n\nif (isValid) {\n    // 发送有效数据到第一个输出\n    return [msg, null];\n} else {\n    // 发送错误响应到第二个输出\n    return [null, {\n        payload: {error: \"缺少必要字段\", required: requiredFields},\n        statusCode: 400\n    }];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1860,
        "wires": [
            [
                "825cebaeca6c3a12"
            ],
            [
                "a0d17fd70e3bf00e"
            ]
        ]
    },
    {
        "id": "825cebaeca6c3a12",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "function 34",
        "func": "msg.topic = `\nINSERT INTO device_operation_logs \n(user_id, username, site_id, site_name, device_name, operation_type, operation_content, operation_time, client_info) \nVALUES (${msg.payload.user_id}, '${msg.payload.username}', ${msg.payload.site_id}, \n'${msg.payload.site_name}', '${msg.payload.device_name}', '${msg.payload.operation_type}', \n'${msg.payload.operation_content}', '${msg.payload.operation_time}', '${msg.payload.client_info}')\n`;\n\n// 不需要参数数组，因为我们已经内联值\ndelete msg.params;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1860,
        "wires": [
            [
                "44972e6a2efc6e83"
            ]
        ]
    },
    {
        "id": "c40eee087d06aa0f",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "function 35",
        "func": "// 处理数据库操作结果\n// 名称: 处理结果\n// 输出数量: 1\n\n// 检查数据库操作结果\nif (msg.payload && msg.payload.affectedRows > 0) {\n    // 成功记录日志\n    msg.statusCode = 201; // 创建成功\n    msg.payload = { \n        success: true, \n        message: \"操作日志已记录\",\n        timestamp: new Date().toISOString()\n    };\n    node.status({fill:\"green\", shape:\"dot\", text:\"日志记录成功\"});\n} else {\n    // 记录日志失败\n    msg.statusCode = 500; // 服务器错误\n    msg.payload = { \n        success: false, \n        error: \"记录日志失败\",\n        details: msg.payload,\n        timestamp: new Date().toISOString()\n    };\n    node.status({fill:\"red\", shape:\"dot\", text:\"日志记录失败\"});\n    node.warn(\"日志记录失败: \" + JSON.stringify(msg.payload));\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1860,
        "wires": [
            [
                "a0d17fd70e3bf00e"
            ]
        ]
    },
    {
        "id": "44972e6a2efc6e83",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 700,
        "y": 1860,
        "wires": [
            [
                "c40eee087d06aa0f"
            ]
        ]
    },
    {
        "id": "a0d17fd70e3bf00e",
        "type": "http response",
        "z": "d7d388fe2f857d05",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 1860,
        "wires": []
    },
    {
        "id": "bac4ade353fbdd36",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "api/wuni/latest",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 110,
        "y": 1220,
        "wires": [
            [
                "da62d96b7fde20a3"
            ]
        ]
    },
    {
        "id": "da62d96b7fde20a3",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "function 29",
        "func": "// 提取查询参数\nconst date = msg.req.query.date;\n\n// 参数验证\nif (!date) {\n    msg.statusCode = 400;\n    msg.payload = {\n        success: false,\n        message: \"缺少日期参数\"\n    };\n    return msg;\n}\n\n// 格式化日期确保标准格式\nlet queryDate = date;\ntry {\n    const dateParts = date.split('-');\n    if (dateParts.length === 3) {\n        const year = parseInt(dateParts[0]);\n        const month = parseInt(dateParts[1]);\n        const day = parseInt(dateParts[2]);\n\n        queryDate = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;\n    }\n} catch (error) {\n    console.log(\"日期解析错误，使用原始日期参数:\", error);\n}\n\n// 设置 SQL 查询语句与参数（重要改动）\nmsg.topic = \"SELECT * FROM sludge_data WHERE DATE(time) = ?\";\nmsg.payload = [queryDate];\n\n// 可选：你可以在后面的 `template` 节点或 `function` 节点做结果处理\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1220,
        "wires": [
            [
                "e36272c868774467"
            ]
        ]
    },
    {
        "id": "e36272c868774467",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 540,
        "y": 1220,
        "wires": [
            [
                "c9f973f3ef6cf2b1"
            ]
        ]
    },
    {
        "id": "c9f973f3ef6cf2b1",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "function 49",
        "func": "// 只处理成功的查询结果\nif (msg.payload && Array.isArray(msg.payload)) {\n    // 格式化数据\n    const formattedData = msg.payload.map(row => {\n        // 创建新对象避免修改原始对象\n        const newRow = {...row};\n        \n        // 处理浓度值，将整数值转换为小数 (例如 4500 -> 4.5)\n        if (newRow.concentration !== null) {\n            newRow.concentration = (newRow.concentration / 1000).toFixed(2);\n        }\n        \n        // 处理沉降比\n        if (newRow.settling_ratio !== null) {\n            newRow.settling_ratio = (newRow.settling_ratio / 10).toFixed(1);\n        }\n        \n        // 处理含水率\n        if (newRow.water_content !== null) {\n            newRow.water_content = parseFloat(newRow.water_content).toFixed(1);\n        }\n        \n        return newRow;\n    });\n    \n    // 设置响应\n    msg.payload = {\n        success: true,\n        data: formattedData\n    };\n} else {\n    // 处理空结果\n    msg.payload = {\n        success: true,\n        data: [],\n        message: \"未找到指定日期的数据\"\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1220,
        "wires": [
            [
                "08aa6912492ab07f"
            ]
        ]
    },
    {
        "id": "4e97df5e62646581",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "/api/wunidata/query",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 130,
        "y": 1160,
        "wires": [
            [
                "5ffe61281c89d6d2"
            ]
        ]
    },
    {
        "id": "5ffe61281c89d6d2",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "function 63",
        "func": "const date = msg.payload.date;   // 假设 msg.payload.date 传递的是日期\n\n// 构建查询语句\nmsg.topic = `\n  SELECT COUNT(*) AS count\n  FROM sludge_data\n  WHERE time = ? \n`;\n\n// 设置查询参数\nmsg.payload = [date];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1160,
        "wires": [
            [
                "fb5ed2536d75f5de"
            ]
        ]
    },
    {
        "id": "fb5ed2536d75f5de",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 540,
        "y": 1160,
        "wires": [
            [
                "08aa6912492ab07f"
            ]
        ]
    },
    {
        "id": "d4fc7787e57fbeb1",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "更新数据",
        "func": "// 确保 msg.payload 是一个数组\nlet data = msg.payload;\nif (!Array.isArray(data)) {\n    node.error(\"Payload is not an array\");\n    return null;\n}\n\n// 初始化累计变量\nlet totals = {\n    total_inflow: 0,\n    total_outflow: 0,\n    total_carbon_source: 0,\n    total_phosphorus_removal: 0,\n    total_disinfectant: 0,\n    total_sludge_quantity: 0\n};\n\n// 遍历每条数据并累加各字段\ndata.forEach(item => {\n    totals.total_inflow += Number(item.inflow || 0);\n    totals.total_outflow += Number(item.outflow || 0);\n    totals.total_carbon_source += Number(item.carbon_source || 0);\n    totals.total_phosphorus_removal += Number(item.phosphorus_removal || 0);\n    totals.total_disinfectant += Number(item.disinfectant || 0);\n    totals.total_sludge_quantity += Number(item.sludge_quantity || 0);\n});\n\n// 保留1位小数\nfor (let key in totals) {\n    totals[key] = Math.round(totals[key] * 10) / 10;\n}\n\n// 将结果保存在上下文中（可选）\nflow.set(\"total_inflow\", totals.total_inflow);\nflow.set(\"total_outflow\", totals.total_outflow);\nflow.set(\"total_carbon_source\", totals.total_carbon_source);\nflow.set(\"total_phosphorus_removal\", totals.total_phosphorus_removal);\nflow.set(\"total_disinfectant\", totals.total_disinfectant);\nflow.set(\"total_sludge_quantity\", totals.total_sludge_quantity);\n\n// 组装输出\nmsg.payload = {\n    \"totalProcessing_in\": totals.total_inflow,    // 总处理量(吨)\n    \"totalProcessing_out\": totals.total_outflow,  // 总处理量(吨)    \n    \"sludgeProduction\": totals.total_sludge_quantity, // 污泥产量(吨)\n    \"carbonUsage\": totals.total_carbon_source,                  // 碳源\n    \"phosphorusRemoval\": totals.total_phosphorus_removal,      // 除磷剂\n    \"disinfectant\": totals.total_disinfectant,                // 消毒剂\n    \"alarmCount\": 2,                             // 报警设备数量\n    \"offlineSites\": 1,                           // 离线设备数量\n    \"totalDevices\": 24,                          // 总设备数量\n    \"runningDevices\": 20,                         // 运行中的设备数量\n    \"electricity\": 152,\n    \"pacUsage\": 450,\n    \"pamUsage\": 45\n};\n\n\n// 获取当前时间戳，用作插入数据的记录时间\nlet timestamp = global.get(\"mariaDBTime\"); \n\n// 构造 SQL 插入语句\nlet query = `\n    INSERT INTO daily_report_hz (date, inflow, outflow, carbon_source, phosphorus_removal, disinfectant, sludge_quantity)\n    VALUES ('${timestamp}', ${totals.inflow_total}, ${totals.outflow_total}, ${totals.carbon_source_total}, ${totals.phosphorus_removal_total}, ${totals.disinfectant_total}, ${totals.sludge_quantity_total});\n`;\n\n// 将 SQL 查询存入 msg.topic 以便下游的数据库节点使用\nmsg.topic = query;\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1360,
        "wires": [
            [
                "5a9a57beaf31e857"
            ]
        ]
    },
    {
        "id": "748dfe01459406d9",
        "type": "http in",
        "z": "d7d388fe2f857d05",
        "name": "",
        "url": "/api/ota/url",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "8ced4ec4db320a69"
            ]
        ]
    },
    {
        "id": "8ced4ec4db320a69",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "function 11",
        "func": "msg.payload = {\n  \"iosUrl\": \" https://testflight.apple.com/join/Ww4XBNtr\", \n  \"androidUrl\": \"https://your-cdn.com/app.apk\",          \n  \"testflightUrl\": \"备用TestFlight链接\",\n  \"downloadUrl\": \"备用APK下载链接\",\n  \"start\":false\n}\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 460,
        "wires": [
            [
                "788d599b9c61a845"
            ]
        ]
    },
    {
        "id": "d63d7ea9a1b5583c",
        "type": "debug",
        "z": "d7d388fe2f857d05",
        "name": "debug 34",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1460,
        "wires": []
    },
    {
        "id": "bfc00875b3f8a912",
        "type": "mysql",
        "z": "d7d388fe2f857d05",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 640,
        "y": 1460,
        "wires": [
            [
                "d63d7ea9a1b5583c"
            ]
        ]
    },
    {
        "id": "c1d943252f6241eb",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "function 64",
        "func": "// 从上下文变量中获取数据\nconst total_inflow = flow.get(\"total_inflow\") || 0;\nconst total_outflow = flow.get(\"total_outflow\") || 0;\nconst total_carbon_source = flow.get(\"total_carbon_source\") || 0;\nconst total_phosphorus_removal = flow.get(\"total_phosphorus_removal\") || 0;\nconst total_disinfectant = flow.get(\"total_disinfectant\") || 0;\nconst total_sludge_quantity = flow.get(\"total_sludge_quantity\") || 0;\n\n// 构建 SQL 插入语句\nconst sql = `\n    INSERT INTO daily_report_hz (\n        date, inflow, outflow, carbon_source, \n        phosphorus_removal, disinfectant, sludge_quantity\n    ) VALUES (NOW(), ?, ?, ?, ?, ?, ?)\n`;\n\n// 构建参数数组\nconst values = [\n    total_inflow, total_outflow, total_carbon_source, \n    total_phosphorus_removal, total_disinfectant, total_sludge_quantity\n];\n\n// 将 SQL 和参数传递给 MySQL 节点\nmsg.topic = sql;\nmsg.payload = values;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1460,
        "wires": [
            [
                "bfc00875b3f8a912"
            ]
        ]
    },
    {
        "id": "45b010514d0c492c",
        "type": "inject",
        "z": "d7d388fe2f857d05",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 1460,
        "wires": [
            [
                "6a64fda3cf122f2f"
            ]
        ]
    },
    {
        "id": "6a64fda3cf122f2f",
        "type": "function",
        "z": "d7d388fe2f857d05",
        "name": "定时",
        "func": "var time = global.get(\"cstTime\"); // 获取时间对象\nvar hour = time.hour;\nvar minute = time.minute;\nvar second = time.second;\n\n// 检查是否为指定的时间 10:47:00\nif (hour === 23 && minute === 59 && second === 59) {\n    msg.payload = 0;\n    return msg; \n} else {\n    return null; \n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1460,
        "wires": [
            [
                "c1d943252f6241eb"
            ]
        ]
    },
    {
        "id": "f788817e6bc04478",
        "type": "http in",
        "z": "1eef49bcba059fc5",
        "name": "添加评论端点",
        "url": "/api/tickets/:id/comments",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "525c62baa51b9335"
            ]
        ]
    },
    {
        "id": "93e264d92757ab01",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "验证评论",
        "func": "const { comment } = msg.payload;\nconst ticketId = msg.req.params.id;\n\n// 验证评论内容\nif (!comment || !comment.trim()) {\n    msg.statusCode = 400;\n    msg.payload = { error: true, message: '评论内容不能为空' };\n    return [null, msg];\n}\n\n// 存储需要的数据\nmsg.ticketId = ticketId;\nmsg.comment = comment.trim();\nmsg.userId = msg.user.id;\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 380,
        "y": 80,
        "wires": [
            [
                "4cea01f1f669714e"
            ],
            [
                "4caa5239f339c722"
            ]
        ]
    },
    {
        "id": "4cea01f1f669714e",
        "type": "mysql",
        "z": "1eef49bcba059fc5",
        "mydb": "806ba83c98eb2e99",
        "name": "检查工单是否存在",
        "x": 630,
        "y": 40,
        "wires": [
            [
                "017eecc4662a1238"
            ]
        ]
    },
    {
        "id": "017eecc4662a1238",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "验证工单存在",
        "func": "if (!msg.payload) {\n    msg.statusCode = 404;\n    msg.payload = { error: true, message: '工单不存在' };\n    return [null, msg];\n}\n\n// 可以在这里添加额外的权限检查，例如只允许特定用户评论\n// 但一般来说所有有权限看到工单的用户都可以评论\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "x": 860,
        "y": 40,
        "wires": [
            [
                "518631f0d037e5c5"
            ],
            [
                "4caa5239f339c722"
            ]
        ]
    },
    {
        "id": "518631f0d037e5c5",
        "type": "mysql",
        "z": "1eef49bcba059fc5",
        "mydb": "806ba83c98eb2e99",
        "name": "添加评论记录",
        "x": 1060,
        "y": 40,
        "wires": [
            [
                "ae980ca2b06bdffb"
            ]
        ]
    },
    {
        "id": "ae980ca2b06bdffb",
        "type": "mysql",
        "z": "1eef49bcba059fc5",
        "mydb": "806ba83c98eb2e99",
        "name": "获取用户信息",
        "x": 1260,
        "y": 40,
        "wires": [
            [
                "ad9e235f8235413f"
            ]
        ]
    },
    {
        "id": "ad9e235f8235413f",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "格式化评论响应",
        "func": "// 创建评论对象\nconst timeline = {\n    id: msg.payload.insertId,\n    ticket_id: parseInt(msg.ticketId),\n    user_id: msg.userId,\n    user_name: msg.payload.name,\n    action: 'comment',\n    comment: msg.comment,\n    created_at: new Date().toISOString()\n};\n\nmsg.statusCode = 201;\nmsg.payload = timeline;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1440,
        "y": 40,
        "wires": [
            [
                "4caa5239f339c722"
            ]
        ]
    },
    {
        "id": "3fdb8dc7a113a2a5",
        "type": "http response",
        "z": "1eef49bcba059fc5",
        "name": "HTTP响应",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1700,
        "y": 160,
        "wires": []
    },
    {
        "id": "83b789c3618090aa",
        "type": "http in",
        "z": "1eef49bcba059fc5",
        "name": "分配工单端点",
        "url": "/api/tickets/:id/assign",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 220,
        "wires": [
            [
                "15bc82d465249502"
            ]
        ]
    },
    {
        "id": "d0b141d1a6b5968a",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "验证分配数据",
        "func": "const { roleId, comment } = msg.payload;\nconst ticketId = msg.req.params.id;\n\n// 验证角色ID\nif (!roleId) {\n    msg.statusCode = 400;\n    msg.payload = { error: true, message: '必须指定分配的角色' };\n    return [null, msg];\n}\n\n// 存储需要的数据\nmsg.ticketId = ticketId;\nmsg.roleId = roleId;\nmsg.comment = comment || `工单已分配给角色ID: ${roleId}`;\nmsg.userId = msg.user.id;\n\n// 检查是否有管理员权限\nconst isAdmin = msg.user.is_admin === 1 || msg.user.is_admin === 2;\nif (!isAdmin) {\n    msg.statusCode = 403;\n    msg.payload = { error: true, message: '只有管理员可以分配工单' };\n    return [null, msg];\n}\n\n\n// 设置 SQL 查询语句\nmsg.topic = `SELECT * FROM tickets WHERE id = ?`;\nmsg.payload = [ticketId];\n\n\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 220,
        "wires": [
            [
                "5b39d7bdeb081267"
            ],
            [
                "3fdb8dc7a113a2a5"
            ]
        ]
    },
    {
        "id": "5b39d7bdeb081267",
        "type": "mysql",
        "z": "1eef49bcba059fc5",
        "mydb": "806ba83c98eb2e99",
        "name": "检查工单是否存在",
        "x": 650,
        "y": 140,
        "wires": [
            [
                "7d24b731aefebf30"
            ]
        ]
    },
    {
        "id": "7d24b731aefebf30",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "验证工单存在",
        "func": "if (!msg.payload) {\n    msg.statusCode = 404;\n    msg.payload = { error: true, message: '工单不存在' };\n    return [null, msg];\n}\n\n// 检查角色是否存在\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 140,
        "wires": [
            [
                "737f83acde7f7492"
            ],
            [
                "3fdb8dc7a113a2a5"
            ]
        ]
    },
    {
        "id": "b00b1b1699c05ca5",
        "type": "mysql",
        "z": "1eef49bcba059fc5",
        "mydb": "806ba83c98eb2e99",
        "name": "检查角色是否存在",
        "x": 1210,
        "y": 120,
        "wires": [
            [
                "379984bbde514691"
            ]
        ]
    },
    {
        "id": "0bdeb0e31c9ffb99",
        "type": "mysql",
        "z": "1eef49bcba059fc5",
        "mydb": "806ba83c98eb2e99",
        "name": "更新工单分配",
        "x": 660,
        "y": 280,
        "wires": [
            [
                "07ab8be30257fae8"
            ]
        ]
    },
    {
        "id": "28ea353b20da6e8d",
        "type": "mysql",
        "z": "1eef49bcba059fc5",
        "mydb": "806ba83c98eb2e99",
        "name": "添加分配时间线",
        "x": 1060,
        "y": 240,
        "wires": [
            [
                "55b226be5db3eca2"
            ]
        ]
    },
    {
        "id": "55b226be5db3eca2",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "格式化分配响应",
        "func": "msg.statusCode = 200;\nmsg.payload = {\n    message: `工单已分配给角色: ${msg.roleName}`,\n    roleId: parseInt(msg.roleId),\n    roleName: msg.roleName,\n    status: 'assigned'\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 220,
        "wires": [
            [
                "3fdb8dc7a113a2a5"
            ]
        ]
    },
    {
        "id": "15bc82d465249502",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "令牌认证",
        "func": "const authenticatedPaths = [\n    \"/api/tickets\",\n    \"/api/users\",\n    \"/api/workorders\"\n];\n\nfunction onInput(msg) {\n    const req = msg.req;\n    if (!req) {\n        msg.payload = { error: \"无请求对象\" };\n        return [null, msg];\n    }\n\n    const authResult = authenticateRequest(req);\n    msg.authenticated = authResult.authenticated;\n    msg.authError = authResult.error;\n\n    if (authResult.authenticated && authResult.user) {\n        msg.user = authResult.user;\n        if (!msg.originalPayload) msg.originalPayload = msg.payload;\n\n        // 合并认证结果\n        msg.payload = {\n            ...msg.payload,\n            authResult: {\n                authenticated: true,\n                userId: authResult.user.id,\n                isAdmin: authResult.user.is_admin\n            }\n        };\n\n        return [msg, null];\n    } else {\n        msg.statusCode = 401;\n        msg.payload = {\n            error: true,\n            message: authResult.error || \"认证失败\"\n        };\n        return [null, msg];\n    }\n}\n\nfunction authenticateRequest(req) {\n    const path = req.originalUrl?.split(\"?\")[0] || req.url?.split(\"?\")[0] || \"\";\n    if (path.includes(\"/api/login\") || path.includes(\"/api/check-admin-status\") || !authenticatedPaths.some(p => path.startsWith(p))) {\n        return { authenticated: true };\n    }\n\n    const userId = req.headers['user-id'];\n    const isAdmin = req.headers['is-admin'];\n\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n        if (userId) {\n            return {\n                authenticated: true,\n                user: {\n                    id: userId,\n                    is_admin: isAdmin === '1' || isAdmin === 1\n                },\n                message: \"使用请求头中的用户信息作为认证\"\n            };\n        }\n        return { authenticated: false, error: \"缺少认证令牌\" };\n    }\n\n    let token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : authHeader;\n    if (!token || token === \"null\") {\n        return { authenticated: false, error: \"无效的认证令牌\" };\n    }\n\n    try {\n        const parts = token.split('.');\n        if (parts.length !== 3) throw new Error(\"令牌格式错误\");\n\n        const decoded = Buffer.from(parts[1], 'base64').toString();\n        const payload = JSON.parse(decoded);\n\n        if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\n            throw new Error(\"令牌已过期\");\n        }\n\n        const adminValue = payload.is_admin ?? payload.isAdmin ?? payload.admin ?? req.headers['is-admin'] ?? 0;\n        const isAdmin = Number(adminValue);\n\n\n        return {\n            authenticated: true,\n            user: {\n                id: payload.id,\n                username: payload.username || payload.name,\n                email: payload.email,\n                is_admin: isAdmin\n            }\n        };\n    } catch (error) {\n        return { authenticated: false, error: \"令牌验证失败: \" + error.message };\n    }\n}\n\nreturn onInput(msg);",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 220,
        "wires": [
            [
                "d0b141d1a6b5968a"
            ],
            []
        ]
    },
    {
        "id": "525c62baa51b9335",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "令牌认证",
        "func": "const authenticatedPaths = [\n    \"/api/tickets\",\n    \"/api/users\",\n    \"/api/workorders\"\n];\n\nfunction onInput(msg) {\n    const req = msg.req;\n    if (!req) {\n        msg.payload = { error: \"无请求对象\" };\n        return [null, msg];\n    }\n\n    const authResult = authenticateRequest(req);\n    msg.authenticated = authResult.authenticated;\n    msg.authError = authResult.error;\n\n    if (authResult.authenticated && authResult.user) {\n        msg.user = authResult.user;\n        if (!msg.originalPayload) msg.originalPayload = msg.payload;\n\n        // 合并认证结果\n        msg.payload = {\n            ...msg.payload,\n            authResult: {\n                authenticated: true,\n                userId: authResult.user.id,\n                isAdmin: authResult.user.is_admin\n            }\n        };\n\n        return [msg, null];\n    } else {\n        msg.statusCode = 401;\n        msg.payload = {\n            error: true,\n            message: authResult.error || \"认证失败\"\n        };\n        return [null, msg];\n    }\n}\n\nfunction authenticateRequest(req) {\n    const path = req.originalUrl?.split(\"?\")[0] || req.url?.split(\"?\")[0] || \"\";\n    if (path.includes(\"/api/login\") || path.includes(\"/api/check-admin-status\") || !authenticatedPaths.some(p => path.startsWith(p))) {\n        return { authenticated: true };\n    }\n\n    const userId = req.headers['user-id'];\n    const isAdmin = req.headers['is-admin'];\n\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n        if (userId) {\n            return {\n                authenticated: true,\n                user: {\n                    id: userId,\n                    is_admin: isAdmin === '1' || isAdmin === 1\n                },\n                message: \"使用请求头中的用户信息作为认证\"\n            };\n        }\n        return { authenticated: false, error: \"缺少认证令牌\" };\n    }\n\n    let token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : authHeader;\n    if (!token || token === \"null\") {\n        return { authenticated: false, error: \"无效的认证令牌\" };\n    }\n\n    try {\n        const parts = token.split('.');\n        if (parts.length !== 3) throw new Error(\"令牌格式错误\");\n\n        const decoded = Buffer.from(parts[1], 'base64').toString();\n        const payload = JSON.parse(decoded);\n\n        if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\n            throw new Error(\"令牌已过期\");\n        }\n\n        const adminValue = payload.is_admin ?? payload.isAdmin ?? payload.admin ?? req.headers['is-admin'] ?? 0;\n        const isAdmin = Number(adminValue);\n\n\n        return {\n            authenticated: true,\n            user: {\n                id: payload.id,\n                username: payload.username || payload.name,\n                email: payload.email,\n                is_admin: isAdmin\n            }\n        };\n    } catch (error) {\n        return { authenticated: false, error: \"令牌验证失败: \" + error.message };\n    }\n}\n\nreturn onInput(msg);",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            [
                "93e264d92757ab01"
            ],
            []
        ]
    },
    {
        "id": "737f83acde7f7492",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "function 16",
        "func": "const roleId = msg.roleId;\n\n// 设置 SQL 查询语句\nmsg.topic = `SELECT * FROM roles WHERE id = ?`;\nmsg.payload = [roleId];\n\n\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "b00b1b1699c05ca5"
            ]
        ]
    },
    {
        "id": "379984bbde514691",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "验证工单存在",
        "func": "if (!msg.payload || msg.payload.length === 0) {\n    msg.statusCode = 404;\n    msg.payload = { error: true, message: '指定的角色不存在' };\n    return [null, msg];\n}\n\nconst currentTime = new Date().toISOString().slice(0, 19).replace('T', ' ');\n\n// 获取工单数据\nconst ticket = msg.payload;\n\n// 获取用户权限\nconst userPermission = msg.user.id; \nconst status = msg.originalPayload.status\n// 检查用户是否是管理员\nif (userPermission === 1) {  \n    // 更新数据库的 SQL 查询，同时更新工单状态为 \"assigned\"\n    msg.topic = `UPDATE tickets SET assigned_to_role = ?, status = ?, updated_at = ? WHERE id = ?`;\n    msg.payload = [msg.roleId, status, currentTime, msg.ticketId];\n\n    return [msg, null];\n}\n\n// 权限 2 (部门管理员) 只能更改权限 2 以下的工单\nif (userPermission === 2) {\n    if (![1, 2].includes(ticket.permission)) {\n        msg.statusCode = 403;\n        msg.payload = { error: true, message: '您没有权限分配此工单' };\n        return [null, msg];\n    }\n\n    msg.topic = `UPDATE tickets SET assigned_to_role = ?, status = ?, updated_at = ? WHERE id = ?`;\n    msg.payload = [msg.roleId, status, currentTime, msg.ticketId];\n\n    return [msg, null];\n}\n\n// 权限 3-9 (班组权限) 只能更改分配给自己的工单状态\nif (userPermission >= 3 && userPermission <= 9) {\n    if (ticket.assigned_to !== msg.user.id) {\n        msg.statusCode = 403;\n        msg.payload = { error: true, message: '您没有权限更新此工单' };\n        return [null, msg];\n    }\n\n    if (![status, 'inProgress'].includes(ticket.status)) {\n        msg.statusCode = 403;\n        msg.payload = { error: true, message: '该工单当前状态不可更改' };\n        return [null, msg];\n    }\n\n    msg.topic = `UPDATE tickets SET assigned_to_role = ?, status = ?, updated_at = ? WHERE id = ?`;\n    msg.payload = [msg.roleId, status, currentTime, msg.ticketId];\n\n    return [msg, null];\n}\n\n// 如果没有匹配到以上权限，返回权限错误\nmsg.statusCode = 403;\nmsg.payload = { error: true, message: '您没有权限分配此工单状态' };\nreturn [null, msg];\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 120,
        "wires": [
            [
                "0bdeb0e31c9ffb99"
            ],
            [
                "3fdb8dc7a113a2a5"
            ]
        ]
    },
    {
        "id": "07ab8be30257fae8",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "准备时间线记录",
        "func": "// 只有在工单更新成功时才创建时间线\nif (msg.payload && msg.payload.affectedRows > 0) {\n    const ticketId = msg.ticketId;  // 获取工单ID\n    const currentTime = formatDateForMySQL(new Date());  // 当前时间\n    const actiOn = msg.newStatus\n    \n    // 保存工单ID用于后续处理\n    msg.newTicketId = ticketId;\n    \n    // 准备时间线数据\n    const timelineData = {\n        ticket_id: ticketId,  // 确保ticket_id字段被正确赋值\n        action: actiOn,  // 动作类型：更新\n        user_id: msg.user.id,  // 操作用户的ID\n        created_at: currentTime,  // 时间戳\n        details: JSON.stringify({\n            status: msg.originalPayload.status,\n            comment: msg.originalPayload.comment,\n            notify: msg.originalPayload.notify\n        }),\n        comment: msg.originalPayload.comment || ''  // 提供comment字段的值\n    };\n    \n    // 构建SQL语句\n    const columns = [];\n    const placeholders = [];\n    const values = [];\n    \n    // 遍历时间线数据\n    for (const [key, value] of Object.entries(timelineData)) {\n        if (value !== undefined) {\n            columns.push(key);\n            placeholders.push('?');\n            values.push(value);\n        }\n    }\n    \n    // 构建插入SQL语句\n    const sql = `INSERT INTO ticket_timeline (${columns.join(', ')}) VALUES (${placeholders.join(', ')})`;\n    \n    // 为MySQL节点准备数据\n    msg.topic = sql;\n    msg.payload = values;\n    \n    node.warn(\"准备添加时间线记录: \" + JSON.stringify(timelineData));\n    \n    return msg;\n} else {\n    // 如果更新失败，返回错误\n    msg.statusCode = 500;\n    msg.payload = {\n        error: true,\n        message: \"工单更新失败\"\n    };\n    return msg;\n}\n\n// 辅助函数：将JavaScript日期转换为MySQL DATETIME格式 (YYYY-MM-DD HH:MM:SS)\nfunction formatDateForMySQL(date) {\n    if (!(date instanceof Date) || isNaN(date)) {\n        return null;\n    }\n    \n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    \n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "28ea353b20da6e8d"
            ]
        ]
    },
    {
        "id": "3b420f5f5521f217",
        "type": "http in",
        "z": "1eef49bcba059fc5",
        "name": "删除工单端点",
        "url": "/api/tickets/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 380,
        "wires": [
            [
                "f8b56cc49efaf149"
            ]
        ]
    },
    {
        "id": "f8b56cc49efaf149",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "function 17",
        "func": "const userId = msg.payload.user_id; // 获取请求中的用户ID\nconst ticket = msg.payload.ticket_id\nif (userId === 1){\n   msg.topic = `\n    START TRANSACTION;\n    DELETE FROM tickets WHERE creator_id = ${ticket}; \n    COMMIT;\n`;\n   return [msg, null];\n}else if (!ticket) {\n    msg.statusCode = 400;  // 如果未传入 ID，返回 400\n    msg.payload = { error: '缺少用户ID' };\n    return [null, msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 380,
        "wires": [
            [
                "28da8a6c9246e99c"
            ],
            [
                "9a721abdb47b486e"
            ]
        ]
    },
    {
        "id": "28da8a6c9246e99c",
        "type": "mysql",
        "z": "1eef49bcba059fc5",
        "mydb": "806ba83c98eb2e99",
        "name": "删除工单",
        "x": 640,
        "y": 360,
        "wires": [
            [
                "06bfeefcbb3263f8"
            ]
        ]
    },
    {
        "id": "06bfeefcbb3263f8",
        "type": "function",
        "z": "1eef49bcba059fc5",
        "name": "格式化分配响应",
        "func": "msg.statusCode = 200;\nmsg.payload = {\n    message: '工单已删除'\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 360,
        "wires": [
            [
                "9a721abdb47b486e"
            ]
        ]
    },
    {
        "id": "4caa5239f339c722",
        "type": "http response",
        "z": "1eef49bcba059fc5",
        "name": "HTTP响应",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1660,
        "y": 40,
        "wires": []
    },
    {
        "id": "9a721abdb47b486e",
        "type": "http response",
        "z": "1eef49bcba059fc5",
        "name": "HTTP响应",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1680,
        "y": 360,
        "wires": []
    },
    {
        "id": "2a490459755e7c8f",
        "type": "http in",
        "z": "0e92ae84089ec318",
        "name": "获取工单列表",
        "url": "/api/tickets",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "8214ae221942f8e4",
                "b185acc6505daa75"
            ]
        ]
    },
    {
        "id": "8214ae221942f8e4",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "令牌认证",
        "func": "const authenticatedPaths = [\n    \"/api/tickets\",\n    \"/api/users\",\n    \"/api/workorders\"\n];\n\nfunction onInput(msg) {\n    const req = msg.req;\n    if (!req) {\n        msg.payload = { error: \"无请求对象\" };\n        return [null, msg];\n    }\n\n    const authResult = authenticateRequest(req);\n    msg.authenticated = authResult.authenticated;\n    msg.authError = authResult.error;\n\n    if (authResult.authenticated && authResult.user) {\n        msg.user = authResult.user;\n        if (!msg.originalPayload) msg.originalPayload = msg.payload;\n\n        // 合并认证结果\n        msg.payload = {\n            ...msg.payload,\n            authResult: {\n                authenticated: true,\n                userId: authResult.user.id,\n                isAdmin: authResult.user.is_admin\n            }\n        };\n\n        return [msg, null];\n    } else {\n        msg.statusCode = 401;\n        msg.payload = {\n            error: true,\n            message: authResult.error || \"认证失败\"\n        };\n        return [null, msg];\n    }\n}\n\nfunction authenticateRequest(req) {\n    const path = req.originalUrl?.split(\"?\")[0] || req.url?.split(\"?\")[0] || \"\";\n    if (path.includes(\"/api/login\") || path.includes(\"/api/check-admin-status\") || !authenticatedPaths.some(p => path.startsWith(p))) {\n        return { authenticated: true };\n    }\n\n    const userId = req.headers['user-id'];\n    const isAdmin = req.headers['is-admin'];\n\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n        if (userId) {\n            return {\n                authenticated: true,\n                user: {\n                    id: userId,\n                    is_admin: isAdmin === '1' || isAdmin === 1\n                },\n                message: \"使用请求头中的用户信息作为认证\"\n            };\n        }\n        return { authenticated: false, error: \"缺少认证令牌\" };\n    }\n\n    let token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : authHeader;\n    if (!token || token === \"null\") {\n        return { authenticated: false, error: \"无效的认证令牌\" };\n    }\n\n    try {\n        const parts = token.split('.');\n        if (parts.length !== 3) throw new Error(\"令牌格式错误\");\n\n        const decoded = Buffer.from(parts[1], 'base64').toString();\n        const payload = JSON.parse(decoded);\n\n        if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\n            throw new Error(\"令牌已过期\");\n        }\n\n        const adminValue = payload.is_admin ?? payload.isAdmin ?? payload.admin ?? req.headers['is-admin'] ?? 0;\n        const isAdmin = adminValue === true || adminValue === 1 || adminValue === '1';\n\n\n        return {\n            authenticated: true,\n            user: {\n                id: payload.id,\n                username: payload.username || payload.name,\n                email: payload.email,\n                is_admin: isAdmin\n            }\n        };\n    } catch (error) {\n        return { authenticated: false, error: \"令牌验证失败: \" + error.message };\n    }\n}\n\nreturn onInput(msg);\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "17808f0e948b5edf"
            ],
            [
                "aa90cd0a27f1d8e0"
            ]
        ]
    },
    {
        "id": "17808f0e948b5edf",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "工单查询构建",
        "func": "const TABLE_NAME = 'tickets';\nconst DEFAULT_SORT_FIELD = 'created_at';\nconst DEFAULT_SORT_ORDER = 'DESC';\n\nfunction onInput(msg) {\n    try {\n        // 提取查询参数\n        const { status, assignedToRole, creatorId, search, page, pageSize, sortField, sortOrder } = msg.req.query || {};\n        \n        // ✅ 构建查询条件\n        let conditions = [];\n        let params = [];\n\n        if (status && status !== 'all') {\n            conditions.push('t.status = ?');\n            params.push(status);\n        }\n\n        if (assignedToRole) {\n            conditions.push('t.assigned_to_role = ?');\n            params.push(assignedToRole);\n        }\n\n        if (creatorId) {\n            conditions.push('t.creator_id = ?');\n            params.push(creatorId);\n        }\n\n        if (search) {\n            conditions.push('(t.title LIKE ? OR t.description LIKE ?)');\n            params.push(`%${search}%`, `%${search}%`);\n        }\n\n        // ✅ 获取列名（使用默认值）\n        let userNameColumn = global.get('userNameColumn') || msg.userNameColumn || 'username';\n        let roleNameColumn = global.get('roleNameColumn') || msg.roleNameColumn || 'name';\n\n        // ✅ 构建基础 SQL 语句\n        let sql = `\n            SELECT t.*, \n                   u.${userNameColumn} as creator_name,\n                   r.${roleNameColumn} as assigned_role_name\n            FROM ${TABLE_NAME} t\n            LEFT JOIN users1 u ON t.creator_id = u.id\n            LEFT JOIN roles r ON t.assigned_to_role = r.id\n        `;\n\n        if (conditions.length > 0) {\n            sql += ` WHERE ` + conditions.join(' AND ');\n        }\n\n        // ✅ 处理排序（防注入）\n        const validSortFields = ['id', 'title', 'status', 'priority', 'created_at', 'updated_at', 'due_date'];\n        const safeSortField = validSortFields.includes(sortField) ? sortField : DEFAULT_SORT_FIELD;\n        const safeSortOrder = (sortOrder && sortOrder.toUpperCase() === 'ASC') ? 'ASC' : DEFAULT_SORT_ORDER;\n\n        sql += ` ORDER BY t.${safeSortField} ${safeSortOrder}`;\n\n        // ✅ 处理分页（防止溢出）\n        if (page && pageSize) {\n            const pageNum = Math.max(parseInt(page) || 1, 1);\n            const limit = Math.min(Math.max(parseInt(pageSize) || 10, 1), 100);\n            const offset = (pageNum - 1) * limit;\n            sql += ` LIMIT ${offset}, ${limit}`;\n        }\n\n        // ✅ 设置SQL语句和参数\n        msg.topic = String(sql);\n        msg.payload = params;\n\n        // ✅ 输出调试日志（仅限必要输出）\n        node.debug(`SQL: ${msg.topic}`);\n        node.debug(`参数: ${JSON.stringify(params)}`);\n\n        return msg;\n\n    } catch (error) {\n        // ✅ 异常处理\n        node.error(`生成查询失败: ${error.message}`);\n        msg.statusCode = 500;\n        msg.payload = { error: true, message: `查询构建失败: ${error.message}` };\n\n        // ✅ 设置回退查询，确保不中断\n        msg.topic = `SELECT * FROM ${TABLE_NAME} LIMIT 10`;\n        return msg;\n    }\n}\n\nreturn onInput(msg);\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 40,
        "wires": [
            [
                "e15f503dc0d8f04c"
            ]
        ]
    },
    {
        "id": "e15f503dc0d8f04c",
        "type": "mysql",
        "z": "0e92ae84089ec318",
        "mydb": "806ba83c98eb2e99",
        "name": "执行工单查询",
        "x": 740,
        "y": 40,
        "wires": [
            [
                "f078ab05b244a4d1"
            ]
        ]
    },
    {
        "id": "f078ab05b244a4d1",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "准备总数查询",
        "func": "// 保存工单查询结果\nmsg.tickets = msg.payload;\n\n// 构建计数查询\nconst conditions = msg.conditions || '';\nconst countSql = `\nSELECT COUNT(*) as total\nFROM tickets t\n${conditions ? 'WHERE ' + conditions : ''}\n`;\n\n// 设置查询参数\nmsg.topic = countSql;\n// 使用与原始查询相同的参数，但不包括分页参数\nconst origParams = msg.req.query || {};\nconst countParams = [];\n\n// 复制原始参数中的非分页参数\nif (origParams.status && origParams.status !== 'all') {\n    countParams.push(origParams.status);\n}\nif (origParams.assignedToRole) {\n    countParams.push(origParams.assignedToRole);\n}\nif (origParams.creatorId) {\n    countParams.push(origParams.creatorId);\n}\nif (origParams.search) {\n    countParams.push(`%${origParams.search}%`, `%${origParams.search}%`);\n}\n\nmsg.payload = countParams;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 40,
        "wires": [
            [
                "197c4da6d4ef2d03"
            ]
        ]
    },
    {
        "id": "197c4da6d4ef2d03",
        "type": "mysql",
        "z": "0e92ae84089ec318",
        "mydb": "806ba83c98eb2e99",
        "name": "获取工单总数",
        "x": 1120,
        "y": 40,
        "wires": [
            [
                "f334b0a01510dff9"
            ]
        ]
    },
    {
        "id": "f334b0a01510dff9",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "格式化工单列表响应",
        "func": "// 获取工单列表和总数\nconst tickets = msg.tickets || [];\nconst countResult = msg.payload;\n\n// 格式化日期时间\ntickets.forEach(ticket => {\n    // 格式化创建时间\n    if (ticket.created_at) {\n        try {\n            const date = new Date(ticket.created_at);\n            ticket.created_at_iso = date.toISOString();\n            ticket.created_at_formatted = formatDateTime(date);\n        } catch(e) {\n            // 保留原始格式\n        }\n    }\n    \n    // 格式化更新时间\n    if (ticket.updated_at) {\n        try {\n            const date = new Date(ticket.updated_at);\n            ticket.updated_at_iso = date.toISOString();\n            ticket.updated_at_formatted = formatDateTime(date);\n        } catch(e) {\n            // 保留原始格式\n        }\n    }\n    \n    // 格式化截止时间\n    if (ticket.due_date) {\n        try {\n            const date = new Date(ticket.due_date);\n            ticket.due_date_iso = date.toISOString();\n            ticket.due_date_formatted = formatDateTime(date);\n        } catch(e) {\n            // 保留原始格式\n        }\n    }\n    \n    // 格式化状态文本\n    ticket.status_text = getStatusText(ticket.status);\n    \n    // 格式化优先级文本\n    ticket.priority_text = getPriorityText(ticket.priority);\n    \n    // 格式化分类文本\n    ticket.category_text = getCategoryText(ticket.category);\n});\n\n// 计算总数\nlet total = 0;\nif (countResult && countResult[0] && countResult[0].total !== undefined) {\n    total = countResult[0].total;\n}\n\n// 构建响应\nmsg.payload = {\n    success: true,\n    tickets: tickets,\n    total: total,\n    page: parseInt(msg.req.query.page) || 1,\n    pageSize: parseInt(msg.req.query.pageSize) || tickets.length,\n    timestamp: new Date().toISOString()\n};\n\n// 返回 200 OK 状态码\nmsg.statusCode = 200;\n\nreturn msg;\n\n// 辅助函数：格式化日期时间\nfunction formatDateTime(date) {\n    if (!(date instanceof Date)) return '';\n    \n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    \n    return `${year}-${month}-${day} ${hours}:${minutes}`;\n}\n\n// 辅助函数：获取状态文本\nfunction getStatusText(status) {\n    switch(status) {\n        case 'pending': return '待处理';\n        case 'in_progress': return '处理中';\n        case 'resolved': return '已解决';\n        case 'closed': return '已关闭';\n        default: return status || '未知状态';\n    }\n}\n\n// 辅助函数：获取优先级文本\nfunction getPriorityText(priority) {\n    switch(priority) {\n        case 'low': return '低';\n        case 'medium': return '中';\n        case 'high': return '高';\n        case 'urgent': return '紧急';\n        default: return priority || '未知优先级';\n    }\n}\n\n// 辅助函数：获取分类文本\nfunction getCategoryText(category) {\n    switch(category) {\n        case 'facility': return '设施问题';\n        case 'water_quality': return '水质问题';\n        case 'operation': return '运营问题';\n        case 'safety': return '安全问题';\n        case 'other': return '其他问题';\n        default: return category || '未分类';\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 40,
        "wires": [
            [
                "aa90cd0a27f1d8e0"
            ]
        ]
    },
    {
        "id": "2ca94dc1d68f792d",
        "type": "http in",
        "z": "0e92ae84089ec318",
        "name": "创建工单",
        "url": "/api/tickets",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "b2f9a719b0d4ef08"
            ]
        ]
    },
    {
        "id": "2b8900ae48ed269a",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "工单验证",
        "func": "// 可用选项\nconst validCategories = ['facility', 'water_quality', 'operation', 'safety', 'other'];\nconst validPriorities = ['low', 'medium', 'high', 'urgent'];\n\n// 错误处理函数\nfunction returnError(message, statusCode = 400) {\n    node.error(`错误: ${message}`);\n    msg.statusCode = statusCode;\n    msg.payload = { error: true, message };\n    return [null, msg];\n}\n\n// 获取工单数据\nconst ticketPayload = msg.originalPayload || msg.payload;\nconst { title, description, category, priority, dueDate, status, report_id, imagesurl } = ticketPayload;\n\n// ✅ 验证用户是否已认证\nif (!msg.user?.id) return returnError('未认证或用户信息缺失', 401);\n\n// ✅ 验证必要字段\nif (!title?.trim()) return returnError('标题不能为空');\nif (!description?.trim()) return returnError('描述不能为空');\nif (!category) return returnError('必须选择问题类型');\n\n// ✅ 验证类别\nif (!validCategories.includes(category)) return returnError(`无效的问题类型: ${category}`);\n\n// ✅ 验证优先级（如果存在）\nif (priority && !validPriorities.includes(priority)) {\n    return returnError(`无效的优先级: ${priority}`);\n}\n\n// ✅ 使用认证用户ID\nconst creatorId = msg.user.id;\n\n// ✅ 准备插入数据\nmsg.ticketData = {\n    title: title.trim(),\n    description: description.trim(),\n    category,\n    priority: priority || 'medium',\n    creator_id: creatorId,\n    status: status || 'pending', // 默认为 pending\n    report_id: report_id || null,  // 如果报告 ID 不存在，设置为 null\n    imagesurl: imagesurl || null  // 如果图片 URL 不存在，设置为 null\n};\n\n// ✅ 添加截止日期（如果存在）\nif (dueDate) {\n    msg.ticketData.due_date = dueDate;\n}\n\n// ✅ 输出调试（仅限必要输出）\nnode.debug(`准备写入的数据: ${JSON.stringify(msg.ticketData)}`);\n\n// ✅ 返回成功消息\nreturn [msg, null];\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 100,
        "wires": [
            [
                "e8e5d50d7502b46e"
            ],
            [
                "aa90cd0a27f1d8e0"
            ]
        ]
    },
    {
        "id": "e8e5d50d7502b46e",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "工单数据库写入",
        "func": "const TABLE_NAME = 'tickets';\nconst DEFAULT_STATUS = 'pending';\nconst DEFAULT_PRIORITY = 'medium';\n\nfunction onInput(msg) {\n    try {\n        if (!msg.ticketData) {\n            return returnError(\"无效的工单数据\", 400);\n        }\n\n        // 生成当前时间（MySQL格式）\n        const currentDatetime = formatDateForMySQL(new Date());\n\n        // 构建完整数据对象\n        const completeTicketData = {\n            ...msg.ticketData,\n            status: msg.ticketData.status || DEFAULT_STATUS,\n            priority: msg.ticketData.priority || DEFAULT_PRIORITY,\n            assigned_to_role: msg.ticketData.assigned_to_role || null,\n            created_at: currentDatetime,\n            updated_at: currentDatetime\n        };\n\n        // 处理可能存在的截止日期\n        if (completeTicketData.due_date) {\n            const dueDate = formatDateForMySQL(new Date(completeTicketData.due_date));\n            completeTicketData.due_date = dueDate || null;\n        }\n\n        // 构建SQL语句\n        const columns = Object.keys(completeTicketData);\n        const placeholders = columns.map(() => '?').join(', ');\n        const values = Object.values(completeTicketData);\n\n        const sql = `INSERT INTO ${TABLE_NAME} (${columns.join(', ')}) VALUES (${placeholders})`;\n\n        // 仅在调试时输出 SQL 语句\n        node.debug(`SQL: ${sql}`);\n        node.debug(`SQL参数: ${JSON.stringify(values)}`);\n\n        // 准备 SQL 数据\n        msg.topic = sql;\n        msg.payload = values;\n        msg.originalTicketData = completeTicketData;\n        msg.dbPrepared = true;\n\n        return [msg, null];\n\n    } catch (error) {\n        // 捕获并处理错误\n        node.error(`数据库写入准备错误: ${error.message}`);\n        return returnError(`工单创建失败: ${error.message}`, 500);\n    }\n}\n\n// 辅助函数：返回错误信息\nfunction returnError(message, statusCode = 400) {\n    msg.statusCode = statusCode;\n    msg.payload = {\n        error: true,\n        message\n    };\n    return [null, msg];\n}\n\n// 辅助函数：将日期转换为MySQL DATETIME格式\nfunction formatDateForMySQL(date) {\n    if (!(date instanceof Date) || isNaN(date)) {\n        return null;\n    }\n    return date.toISOString().slice(0, 19).replace('T', ' ');\n}\n\nreturn onInput(msg);\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "06150411b1dea99c"
            ],
            [
                "aa90cd0a27f1d8e0"
            ]
        ]
    },
    {
        "id": "06150411b1dea99c",
        "type": "mysql",
        "z": "0e92ae84089ec318",
        "mydb": "806ba83c98eb2e99",
        "name": "执行工单创建",
        "x": 960,
        "y": 100,
        "wires": [
            [
                "5d669466fa8cb3c3"
            ]
        ]
    },
    {
        "id": "5d669466fa8cb3c3",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "准备时间线记录",
        "func": "// 只有在工单创建成功时才创建时间线\nif (msg.payload && msg.payload.insertId) {\n    const ticketId = msg.payload.insertId;\n    const currentTime = formatDateForMySQL(new Date());\n    \n    // 保存工单ID用于后续处理\n    msg.newTicketId = ticketId;\n    \n    // 准备时间线数据\n    const timelineData = {\n        ticket_id: ticketId,\n        action: 'created', // 动作类型：创建\n        user_id: msg.originalTicketData.creator_id, // 将 action_by 改为 user_id\n        created_at: currentTime, // 将 action_at 改为 created_at\n        details: JSON.stringify({\n            title: msg.originalTicketData.title,\n            priority: msg.originalTicketData.priority,\n            category: msg.originalTicketData.category\n        })\n    };\n    \n    // 构建SQL语句\n    const columns = [];\n    const placeholders = [];\n    const values = [];\n    \n    // 遍历时间线数据\n    for (const [key, value] of Object.entries(timelineData)) {\n        if (value !== undefined) {\n            columns.push(key);\n            placeholders.push('?');\n            values.push(value);\n        }\n    }\n    \n    // 构建插入SQL语句\n    const sql = `INSERT INTO ticket_timeline (${columns.join(', ')}) VALUES (${placeholders.join(', ')})`;\n    \n    // 为MySQL节点准备数据\n    msg.topic = sql;\n    msg.payload = values;\n    \n    node.warn(\"准备添加时间线记录: \" + JSON.stringify(timelineData));\n    \n    return msg;\n} else {\n    // 如果创建失败，直接返回错误\n    msg.statusCode = 500;\n    msg.payload = {\n        error: true,\n        message: \"工单创建失败\"\n    };\n    return msg;\n}\n\n// 辅助函数：将JavaScript日期转换为MySQL DATETIME格式 (YYYY-MM-DD HH:MM:SS)\nfunction formatDateForMySQL(date) {\n    if (!(date instanceof Date) || isNaN(date)) {\n        return null;\n    }\n    \n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    \n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 100,
        "wires": [
            [
                "6a6c08b322044a98"
            ]
        ]
    },
    {
        "id": "6a6c08b322044a98",
        "type": "mysql",
        "z": "0e92ae84089ec318",
        "mydb": "806ba83c98eb2e99",
        "name": "创建工单时间线",
        "x": 1420,
        "y": 100,
        "wires": [
            [
                "0a524fa727957957"
            ]
        ]
    },
    {
        "id": "0a524fa727957957",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "格式化创建响应",
        "func": "// 准备工单创建的成功响应\nif (msg.newTicketId) {\n    // 设置成功状态码\n    msg.statusCode = 201; // Created\n    \n    // 格式化创建和更新时间\n    const originalTicketData = msg.originalTicketData || {};\n    let formattedDate = null;\n    if (originalTicketData.created_at) {\n        try {\n            const date = new Date(originalTicketData.created_at);\n            formattedDate = date.toISOString();\n        } catch(e) {\n            formattedDate = originalTicketData.created_at;\n        }\n    }\n    \n    // 构建成功响应\n    msg.payload = {\n        success: true,\n        message: \"工单创建成功\",\n        ticket: {\n            id: msg.newTicketId,\n            ...originalTicketData,\n            created_at_formatted: formattedDate\n        }\n    };\n} else {\n    // 如果没有工单ID，表示创建可能失败了\n    msg.statusCode = 500;\n    msg.payload = {\n        error: true,\n        message: \"工单创建失败，无法获取工单ID\"\n    };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 100,
        "wires": [
            [
                "aa90cd0a27f1d8e0"
            ]
        ]
    },
    {
        "id": "aa90cd0a27f1d8e0",
        "type": "http response",
        "z": "0e92ae84089ec318",
        "name": "API响应",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2220,
        "y": 440,
        "wires": []
    },
    {
        "id": "93aa4a6a95f088fa",
        "type": "http in",
        "z": "0e92ae84089ec318",
        "name": "获取工单详情",
        "url": "/api/tickets/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 180,
        "wires": [
            [
                "0766ced2ec531e04"
            ]
        ]
    },
    {
        "id": "93195ba095e7e1be",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "准备工单详情查询",
        "func": "// 获取工单ID\nconst ticketId = msg.req.params.id;\n\nif (!ticketId) {\n    msg.statusCode = 400;\n    msg.payload = {\n        error: true,\n        message: \"缺少工单ID\"\n    };\n    return msg;\n}\n\n// 构建SQL查询 - 获取工单详情\nconst sql = `\nSELECT t.*, \n       u.username as creator_name,\n       r.name as assigned_role_name\nFROM tickets t\nLEFT JOIN users1 u ON t.creator_id = u.id\nLEFT JOIN roles r ON t.assigned_to_role = r.id\nWHERE t.id = ?\n`;\n\n// 设置查询参数\nmsg.topic = sql;\nmsg.payload = [ticketId];\n\n// 保存工单ID，用于后续查询\nmsg.ticketId = ticketId;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 180,
        "wires": [
            [
                "74c2f72c5d5d4f50"
            ]
        ]
    },
    {
        "id": "74c2f72c5d5d4f50",
        "type": "mysql",
        "z": "0e92ae84089ec318",
        "mydb": "806ba83c98eb2e99",
        "name": "查询工单详情",
        "x": 700,
        "y": 180,
        "wires": [
            [
                "a4a3f8f6d29ff0c8"
            ]
        ]
    },
    {
        "id": "a4a3f8f6d29ff0c8",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "准备时间线查询",
        "func": "// 保存工单详情\nmsg.ticketDetails = msg.payload && msg.payload[0] ? msg.payload[0] : null;\n\n// 如果工单不存在\nif (!msg.ticketDetails) {\n    msg.statusCode = 404;\n    msg.payload = {\n        error: true,\n        message: \"工单不存在\"\n    };\n    return msg;\n}\n\n// 准备查询工单时间线\nconst timelineSql = `\nSELECT tl.*, \n       u.username as action_by_name\nFROM ticket_timeline tl\nLEFT JOIN users1 u ON tl.user_id = u.id\nWHERE tl.ticket_id = ?\nORDER BY tl.created_at DESC\n`;\n\n// 设置查询参数\nmsg.topic = timelineSql;\nmsg.payload = [msg.ticketId];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 180,
        "wires": [
            [
                "70d6465516835a4e"
            ]
        ]
    },
    {
        "id": "70d6465516835a4e",
        "type": "mysql",
        "z": "0e92ae84089ec318",
        "mydb": "806ba83c98eb2e99",
        "name": "查询工单时间线",
        "x": 1120,
        "y": 180,
        "wires": [
            [
                "0673b0eb71ea2b21"
            ]
        ]
    },
    {
        "id": "0673b0eb71ea2b21",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "格式化工单详情响应",
        "func": "// 获取工单详情和时间线\nconst ticketDetails = msg.ticketDetails || {};\nconst timeline = msg.payload || [];\n\n// 格式化日期时间\nfunction formatDateTime(dateStr) {\n    try {\n        const date = new Date(dateStr);\n        return date.toISOString();\n    } catch(e) {\n        return dateStr;\n    }\n}\n\n// 格式化工单详情中的日期\nif (ticketDetails.created_at) {\n    ticketDetails.created_at_formatted = formatDateTime(ticketDetails.created_at);\n}\nif (ticketDetails.updated_at) {\n    ticketDetails.updated_at_formatted = formatDateTime(ticketDetails.updated_at);\n}\nif (ticketDetails.due_date) {\n    ticketDetails.due_date_formatted = formatDateTime(ticketDetails.due_date);\n}\n\n// 格式化时间线日期并解析详情\ntimeline.forEach(entry => {\n    if (entry.action_at) {\n        entry.action_at_formatted = formatDateTime(entry.action_at);\n    }\n    \n    // 尝试解析JSON详情\n    if (entry.details) {\n        try {\n            entry.details_obj = JSON.parse(entry.details);\n        } catch(e) {\n            // 如果解析失败，保留原始字符串\n        }\n    }\n});\n\n// 构建完整响应\nmsg.statusCode = 200;\nmsg.payload = {\n    success: true,\n    ticket: ticketDetails,\n    timeline: timeline\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 180,
        "wires": [
            [
                "aa90cd0a27f1d8e0"
            ]
        ]
    },
    {
        "id": "b2f9a719b0d4ef08",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "令牌认证",
        "func": "const authenticatedPaths = [\n    \"/api/tickets\",\n    \"/api/users\",\n    \"/api/workorders\"\n];\n\nfunction onInput(msg) {\n    const req = msg.req;\n    if (!req) {\n        msg.payload = { error: \"无请求对象\" };\n        return [null, msg];\n    }\n\n    const authResult = authenticateRequest(req);\n    msg.authenticated = authResult.authenticated;\n    msg.authError = authResult.error;\n\n    if (authResult.authenticated && authResult.user) {\n        msg.user = authResult.user;\n        if (!msg.originalPayload) msg.originalPayload = msg.payload;\n\n        // 合并认证结果\n        msg.payload = {\n            ...msg.payload,\n            authResult: {\n                authenticated: true,\n                userId: authResult.user.id,\n                isAdmin: authResult.user.is_admin\n            }\n        };\n\n        return [msg, null];\n    } else {\n        msg.statusCode = 401;\n        msg.payload = {\n            error: true,\n            message: authResult.error || \"认证失败\"\n        };\n        return [null, msg];\n    }\n}\n\nfunction authenticateRequest(req) {\n    const path = req.originalUrl?.split(\"?\")[0] || req.url?.split(\"?\")[0] || \"\";\n    if (path.includes(\"/api/login\") || path.includes(\"/api/check-admin-status\") || !authenticatedPaths.some(p => path.startsWith(p))) {\n        return { authenticated: true };\n    }\n\n    const userId = req.headers['user-id'];\n    const isAdmin = req.headers['is-admin'];\n\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n        if (userId) {\n            return {\n                authenticated: true,\n                user: {\n                    id: userId,\n                    is_admin: isAdmin === '1' || isAdmin === 1\n                },\n                message: \"使用请求头中的用户信息作为认证\"\n            };\n        }\n        return { authenticated: false, error: \"缺少认证令牌\" };\n    }\n\n    let token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : authHeader;\n    if (!token || token === \"null\") {\n        return { authenticated: false, error: \"无效的认证令牌\" };\n    }\n\n    try {\n        const parts = token.split('.');\n        if (parts.length !== 3) throw new Error(\"令牌格式错误\");\n\n        const decoded = Buffer.from(parts[1], 'base64').toString();\n        const payload = JSON.parse(decoded);\n\n        if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\n            throw new Error(\"令牌已过期\");\n        }\n\n        const adminValue = payload.is_admin ?? payload.isAdmin ?? payload.admin ?? req.headers['is-admin'] ?? 0;\n        const isAdmin = adminValue === true || adminValue === 1 || adminValue === '1';\n\n\n        return {\n            authenticated: true,\n            user: {\n                id: payload.id,\n                username: payload.username || payload.name,\n                email: payload.email,\n                is_admin: isAdmin\n            }\n        };\n    } catch (error) {\n        return { authenticated: false, error: \"令牌验证失败: \" + error.message };\n    }\n}\n\nreturn onInput(msg);\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 120,
        "wires": [
            [
                "2b8900ae48ed269a"
            ],
            [
                "aa90cd0a27f1d8e0"
            ]
        ]
    },
    {
        "id": "0766ced2ec531e04",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "令牌认证",
        "func": "const authenticatedPaths = [\n    \"/api/tickets\",\n    \"/api/users\",\n    \"/api/workorders\"\n];\n\nfunction onInput(msg) {\n    const req = msg.req;\n    if (!req) {\n        msg.payload = { error: \"无请求对象\" };\n        return [null, msg];\n    }\n\n    const authResult = authenticateRequest(req);\n    msg.authenticated = authResult.authenticated;\n    msg.authError = authResult.error;\n\n    if (authResult.authenticated && authResult.user) {\n        msg.user = authResult.user;\n        if (!msg.originalPayload) msg.originalPayload = msg.payload;\n\n        // 合并认证结果\n        msg.payload = {\n            ...msg.payload,\n            authResult: {\n                authenticated: true,\n                userId: authResult.user.id,\n                isAdmin: authResult.user.is_admin\n            }\n        };\n\n        return [msg, null];\n    } else {\n        msg.statusCode = 401;\n        msg.payload = {\n            error: true,\n            message: authResult.error || \"认证失败\"\n        };\n        return [null, msg];\n    }\n}\n\nfunction authenticateRequest(req) {\n    const path = req.originalUrl?.split(\"?\")[0] || req.url?.split(\"?\")[0] || \"\";\n    if (path.includes(\"/api/login\") || path.includes(\"/api/check-admin-status\") || !authenticatedPaths.some(p => path.startsWith(p))) {\n        return { authenticated: true };\n    }\n\n    const userId = req.headers['user-id'];\n    const isAdmin = req.headers['is-admin'];\n\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n        if (userId) {\n            return {\n                authenticated: true,\n                user: {\n                    id: userId,\n                    is_admin: isAdmin === '1' || isAdmin === 1\n                },\n                message: \"使用请求头中的用户信息作为认证\"\n            };\n        }\n        return { authenticated: false, error: \"缺少认证令牌\" };\n    }\n\n    let token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : authHeader;\n    if (!token || token === \"null\") {\n        return { authenticated: false, error: \"无效的认证令牌\" };\n    }\n\n    try {\n        const parts = token.split('.');\n        if (parts.length !== 3) throw new Error(\"令牌格式错误\");\n\n        const decoded = Buffer.from(parts[1], 'base64').toString();\n        const payload = JSON.parse(decoded);\n\n        if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\n            throw new Error(\"令牌已过期\");\n        }\n\n        const adminValue = payload.is_admin ?? payload.isAdmin ?? payload.admin ?? req.headers['is-admin'] ?? 0;\n        const isAdmin = adminValue === true || adminValue === 1 || adminValue === '1';\n\n\n        return {\n            authenticated: true,\n            user: {\n                id: payload.id,\n                username: payload.username || payload.name,\n                email: payload.email,\n                is_admin: isAdmin\n            }\n        };\n    } catch (error) {\n        return { authenticated: false, error: \"令牌验证失败: \" + error.message };\n    }\n}\n\nreturn onInput(msg);",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 180,
        "wires": [
            [
                "93195ba095e7e1be"
            ],
            [
                "aa90cd0a27f1d8e0"
            ]
        ]
    },
    {
        "id": "331a27be02a837f0",
        "type": "http in",
        "z": "0e92ae84089ec318",
        "name": "更新状态端点",
        "url": "/api/tickets/:id/status",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "ea241d7e545e5a50",
                "5c54b5a238192b27"
            ]
        ]
    },
    {
        "id": "1a3d6bfd98f8f3d3",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "验证状态数据",
        "func": "const { status, comment } = msg.payload;\nconst ticketId = msg.req.params.id;\n\n// 验证状态值\nconst validStatuses = [ 'approved', 'assigned', 'inProgress', 'completed', 'rejected', 'closed'];\nif (!status || !validStatuses.includes(status)) {\n    msg.statusCode = 400;\n    msg.payload = { error: true, message: '无效的状态值' };\n    return [null, msg];\n}\n\n// 设置 SQL 查询语句\nmsg.topic = `SELECT * FROM tickets WHERE id = ?`;\nmsg.payload = [ticketId];\n\nmsg.ticketId = ticketId;\nmsg.newStatus = status;\nmsg.comment = comment || `工单状态已更新为${status}`;\nmsg.userId = msg.user.id;\n\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 260,
        "wires": [
            [
                "1c288291400b2b34"
            ],
            [
                "13bd59f633f78d45"
            ]
        ]
    },
    {
        "id": "1c288291400b2b34",
        "type": "mysql",
        "z": "0e92ae84089ec318",
        "mydb": "806ba83c98eb2e99",
        "name": "检查工单是否存在",
        "x": 710,
        "y": 260,
        "wires": [
            [
                "3b4a8a5023b8406e"
            ]
        ]
    },
    {
        "id": "3b4a8a5023b8406e",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "验证工单存在",
        "func": "// 如果没有找到工单\nif (!msg.payload) {\n    msg.statusCode = 404;\n    msg.payload = { error: true, message: '工单不存在' };\n    return [null, msg];\n}\nconst currentTime = new Date().toISOString().slice(0, 19).replace('T', ' ');\n// 获取工单数据\nconst ticket = msg.payload;\n\n// 获取用户权限\nconst userPermission = msg.user.id; // 假设用户权限通过 msg.user.permission 获得\n\n// 检查用户是否是管理员\nif (userPermission === 1) {  // 管理员可以更改任何工单状态\n    // 更新数据库的 SQL 查询\n    msg.payload = {\n        id: msg.ticketId, // 工单ID\n        status: msg.newStatus, // 新状态\n        comment: msg.comment, // 审核备注\n        updated_at: currentTime // 更新时间\n    };\n\n    msg.topic = `UPDATE tickets SET status = ?, updated_at = ? WHERE id = ?`;\n    msg.payload = [msg.newStatus, msg.payload.updated_at, msg.ticketId];\n\n    // 返回给数据库更新节点\n    return [msg, null];\n}\n\n// 权限 2 (部门管理员) 只能更改权限 2 以下的工单\nif (userPermission === 2) {\n    if (![1, 2].includes(ticket.permission)) {\n        msg.statusCode = 403;\n        msg.payload = { error: true, message: '您没有权限更新此工单' };\n        return [null, msg];\n    }\n\n    // 更新数据库的 SQL 查询\n    msg.payload = {\n        id: msg.ticketId, // 工单ID\n        status: msg.newStatus, // 新状态\n        comment: msg.comment, // 审核备注\n        updated_at: new Date().toISOString() // 更新时间\n    };\n\n    msg.topic = `UPDATE tickets SET status = ?, updated_at = ? WHERE id = ?`;\n    msg.payload = [msg.newStatus, msg.payload.updated_at, msg.ticketId];\n\n    // 返回给数据库更新节点\n    return [msg, null];\n}\n\n// 权限 3-9 (班组权限) 只能更改分配给自己的工单状态\nif (userPermission >= 3 && userPermission <= 9) {\n    if (ticket.assigned_to !== msg.user.id) {\n        msg.statusCode = 403;\n        msg.payload = { error: true, message: '您没有权限更新此工单' };\n        return [null, msg];\n    }\n\n    // 检查工单是否处于可以更新的状态\n    if (!['assigned', 'inProgress'].includes(ticket.status)) {\n        msg.statusCode = 403;\n        msg.payload = { error: true, message: '该工单当前状态不可更改' };\n        return [null, msg];\n    }\n\n    // 更新数据库的 SQL 查询\n    msg.payload = {\n        id: msg.ticketId, // 工单ID\n        status: msg.newStatus, // 新状态\n        comment: msg.comment, // 审核备注\n        updated_at: currentTime // 更新时间\n    };\n\n    msg.topic = `UPDATE tickets SET status = ?, updated_at = ? WHERE id = ?`;\n    msg.payload = [msg.newStatus, msg.payload.updated_at, msg.ticketId];\n\n    // 返回给数据库更新节点\n    return [msg, null];\n}\n\n// 如果没有匹配到以上权限，返回权限错误\nmsg.statusCode = 403;\nmsg.payload = { error: true, message: '您没有权限更新此工单状态' };\nreturn [null, msg];\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 260,
        "wires": [
            [
                "cee8d4cd2bcdfc5e"
            ],
            [
                "13bd59f633f78d45"
            ]
        ]
    },
    {
        "id": "cee8d4cd2bcdfc5e",
        "type": "mysql",
        "z": "0e92ae84089ec318",
        "mydb": "806ba83c98eb2e99",
        "name": "更新工单状态",
        "x": 1160,
        "y": 260,
        "wires": [
            [
                "d2f6cf77cb04a883"
            ]
        ]
    },
    {
        "id": "6578bdb020a7dfc6",
        "type": "mysql",
        "z": "0e92ae84089ec318",
        "mydb": "806ba83c98eb2e99",
        "name": "添加时间线记录",
        "x": 1580,
        "y": 260,
        "wires": [
            [
                "67a1c148220e1669"
            ]
        ]
    },
    {
        "id": "67a1c148220e1669",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "格式化响应",
        "func": "msg.statusCode = 200;\nmsg.payload = {\n    message: '工单状态已更新',\n    status: msg.newStatus\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1770,
        "y": 260,
        "wires": [
            [
                "13bd59f633f78d45"
            ]
        ]
    },
    {
        "id": "13bd59f633f78d45",
        "type": "http response",
        "z": "0e92ae84089ec318",
        "name": "HTTP响应",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1920,
        "y": 480,
        "wires": []
    },
    {
        "id": "d2f6cf77cb04a883",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "准备时间线记录",
        "func": "// 只有在工单更新成功时才创建时间线\nif (msg.payload && msg.payload.affectedRows > 0) {\n    const ticketId = msg.ticketId;  // 获取工单ID\n    const currentTime = formatDateForMySQL(new Date());  // 当前时间\n    const actiOn = msg.newStatus\n    \n    // 保存工单ID用于后续处理\n    msg.newTicketId = ticketId;\n    \n    // 准备时间线数据\n    const timelineData = {\n        ticket_id: ticketId,  // 确保ticket_id字段被正确赋值\n        action: actiOn,  // 动作类型：更新\n        user_id: msg.user.id,  // 操作用户的ID\n        created_at: currentTime,  // 时间戳\n        details: JSON.stringify({\n            status: msg.originalPayload.status,\n            comment: msg.originalPayload.comment,\n            notify: msg.originalPayload.notify\n        }),\n        comment: msg.originalPayload.comment || ''  // 提供comment字段的值\n    };\n    \n    // 构建SQL语句\n    const columns = [];\n    const placeholders = [];\n    const values = [];\n    \n    // 遍历时间线数据\n    for (const [key, value] of Object.entries(timelineData)) {\n        if (value !== undefined) {\n            columns.push(key);\n            placeholders.push('?');\n            values.push(value);\n        }\n    }\n    \n    // 构建插入SQL语句\n    const sql = `INSERT INTO ticket_timeline (${columns.join(', ')}) VALUES (${placeholders.join(', ')})`;\n    \n    // 为MySQL节点准备数据\n    msg.topic = sql;\n    msg.payload = values;\n    \n    node.warn(\"准备添加时间线记录: \" + JSON.stringify(timelineData));\n    \n    return msg;\n} else {\n    // 如果更新失败，返回错误\n    msg.statusCode = 500;\n    msg.payload = {\n        error: true,\n        message: \"工单更新失败\"\n    };\n    return msg;\n}\n\n// 辅助函数：将JavaScript日期转换为MySQL DATETIME格式 (YYYY-MM-DD HH:MM:SS)\nfunction formatDateForMySQL(date) {\n    if (!(date instanceof Date) || isNaN(date)) {\n        return null;\n    }\n    \n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    \n    return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 260,
        "wires": [
            [
                "6578bdb020a7dfc6"
            ]
        ]
    },
    {
        "id": "ea241d7e545e5a50",
        "type": "function",
        "z": "0e92ae84089ec318",
        "name": "令牌认证",
        "func": "const authenticatedPaths = [\n    \"/api/tickets\",\n    \"/api/users\",\n    \"/api/workorders\"\n];\n\nfunction onInput(msg) {\n    const req = msg.req;\n    if (!req) {\n        msg.payload = { error: \"无请求对象\" };\n        return [null, msg];\n    }\n\n    const authResult = authenticateRequest(req);\n    msg.authenticated = authResult.authenticated;\n    msg.authError = authResult.error;\n\n    if (authResult.authenticated && authResult.user) {\n        msg.user = authResult.user;\n        if (!msg.originalPayload) msg.originalPayload = msg.payload;\n\n        // 合并认证结果\n        msg.payload = {\n            ...msg.payload,\n            authResult: {\n                authenticated: true,\n                userId: authResult.user.id,\n                isAdmin: authResult.user.is_admin\n            }\n        };\n\n        return [msg, null];\n    } else {\n        msg.statusCode = 401;\n        msg.payload = {\n            error: true,\n            message: authResult.error || \"认证失败\"\n        };\n        return [null, msg];\n    }\n}\n\nfunction authenticateRequest(req) {\n    const path = req.originalUrl?.split(\"?\")[0] || req.url?.split(\"?\")[0] || \"\";\n    if (path.includes(\"/api/login\") || path.includes(\"/api/check-admin-status\") || !authenticatedPaths.some(p => path.startsWith(p))) {\n        return { authenticated: true };\n    }\n\n    const userId = req.headers['user-id'];\n    const isAdmin = req.headers['is-admin'];\n\n    const authHeader = req.headers.authorization;\n    if (!authHeader) {\n        if (userId) {\n            return {\n                authenticated: true,\n                user: {\n                    id: userId,\n                    is_admin: isAdmin === '1' || isAdmin === 1\n                },\n                message: \"使用请求头中的用户信息作为认证\"\n            };\n        }\n        return { authenticated: false, error: \"缺少认证令牌\" };\n    }\n\n    let token = authHeader.startsWith(\"Bearer \") ? authHeader.slice(7) : authHeader;\n    if (!token || token === \"null\") {\n        return { authenticated: false, error: \"无效的认证令牌\" };\n    }\n\n    try {\n        const parts = token.split('.');\n        if (parts.length !== 3) throw new Error(\"令牌格式错误\");\n\n        const decoded = Buffer.from(parts[1], 'base64').toString();\n        const payload = JSON.parse(decoded);\n\n        if (payload.exp && payload.exp < Math.floor(Date.now() / 1000)) {\n            throw new Error(\"令牌已过期\");\n        }\n\n        const adminValue = payload.is_admin ?? payload.isAdmin ?? payload.admin ?? req.headers['is-admin'] ?? 0;\n        const isAdmin = Number(adminValue);\n\n\n        return {\n            authenticated: true,\n            user: {\n                id: payload.id,\n                username: payload.username || payload.name,\n                email: payload.email,\n                is_admin: isAdmin\n            }\n        };\n    } catch (error) {\n        return { authenticated: false, error: \"令牌验证失败: \" + error.message };\n    }\n}\n\nreturn onInput(msg);",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 260,
        "wires": [
            [
                "1a3d6bfd98f8f3d3"
            ],
            []
        ]
    },
    {
        "id": "5c54b5a238192b27",
        "type": "debug",
        "z": "0e92ae84089ec318",
        "name": "debug 19",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 230,
        "y": 380,
        "wires": []
    },
    {
        "id": "b185acc6505daa75",
        "type": "debug",
        "z": "0e92ae84089ec318",
        "name": "debug 37",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "notificationEndpoint",
        "type": "http in",
        "z": "pushNotificationFlow",
        "name": "",
        "url": "/api/register-device",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "validateNotification",
                "5036f4873eeee933"
            ]
        ]
    },
    {
        "id": "validateNotification",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "写入设备数据到数数据库",
        "func": "// 获取传入数据\nconst data = msg.payload;\n\nconst sql = `\nINSERT INTO devices (user_id, push_token, platform, device_info, created_at)\nVALUES (?, ?, ?, ?, NOW())\nON DUPLICATE KEY UPDATE\n    push_token = VALUES(push_token),\n    device_info = VALUES(device_info),\n    platform = VALUES(platform),\n    updated_at = NOW()\n`;\n\nconst params = [\n    data.user_id,\n    data.push_token,\n    data.platform,\n    data.device_info,\n    data.push_token, // 用于 update\n    data.device_info,\n    data.platform\n];\n\nmsg.topic = sql;\nmsg.payload = params;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 60,
        "wires": [
            [
                "saveNotification",
                "2f980527d60f0e71"
            ]
        ]
    },
    {
        "id": "saveNotification",
        "type": "mysql",
        "z": "pushNotificationFlow",
        "mydb": "806ba83c98eb2e99",
        "name": "设备数据库",
        "x": 610,
        "y": 60,
        "wires": [
            [
                "aeaabd765e8b166c"
            ]
        ]
    },
    {
        "id": "aeaabd765e8b166c",
        "type": "http response",
        "z": "pushNotificationFlow",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 60,
        "wires": []
    },
    {
        "id": "9866daa842711213",
        "type": "http in",
        "z": "pushNotificationFlow",
        "name": "",
        "url": "/api/send-notification",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 500,
        "wires": [
            [
                "692aeb4fdb476a54"
            ]
        ]
    },
    {
        "id": "ecfd9802b3fd4617",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 26",
        "func": "const notificationData = msg.payload;\n\n// 验证必要参数\nif (!notificationData.userId && !notificationData.tokens) {\n    msg.statusCode = 400;\n    msg.payload = { error: \"缺少userId或tokens参数\" };\n    return msg;\n}\n\n// 保存通知内容以便后续使用\nmsg.notificationData = {\n    title: notificationData.title || \"通知\",\n    body: notificationData.body || \"\",\n    data: notificationData.data || {}\n};\n\n// 如果提供了tokens，跳过数据库查询\nif (notificationData.tokens) {\n    msg.payload = notificationData.tokens.map(token => ({\n        token: token,\n        platform: notificationData.platform || 'unknown',\n        push_service: notificationData.pushService || \n                     (notificationData.platform === 'android' ? 'jpush' : 'expo')\n    }));\n    return [null, msg]; // 跳过数据库查询，直接到下一个函数\n}\n\n// 根据userId查询设备\nmsg.topic = `\n    SELECT token, platform, push_service \n    FROM devices \n    WHERE user_id = ? \n    AND updated_at > DATE_SUB(NOW(), INTERVAL 30 DAY)\n`;\nmsg.params = [notificationData.userId];\n\nreturn [msg, null]; // 继续到数据库查询",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "02c23ba9edda4146"
            ]
        ]
    },
    {
        "id": "69e2df56a72b361e",
        "type": "http in",
        "z": "pushNotificationFlow",
        "name": "",
        "url": "/api/send-notification-to-user/:userId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "7ee2873088cbf338"
            ]
        ]
    },
    {
        "id": "7ee2873088cbf338",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 27",
        "func": "msg.topic = \"SELECT push_token FROM devices WHERE user_id = ? AND updated_at > DATE_SUB(NOW(), INTERVAL 30 DAY)\";\nmsg.params = [msg.req.params.userId];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 180,
        "wires": [
            [
                "df94a7a5d7957158"
            ]
        ]
    },
    {
        "id": "44a5c0d602ebf6a8",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 28",
        "func": "const tokens = msg.payload.map(row => row.push_token);\nif (tokens.length === 0) {\n    msg.statusCode = 404;\n    msg.payload = { error: \"未找到有效的设备令牌\" };\n    return msg;\n}\n\nconst notificationData = msg.req.query;\n\nmsg.url = \"https://exp.host/--/api/v2/push/send\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n};\n\nconst messages = tokens.map(token => ({\n    to: token,\n    sound: \"default\",\n    title: notificationData.title || \"新通知\",\n    body: notificationData.body || \"\",\n    data: JSON.parse(notificationData.data || \"{}\")\n}));\n\nmsg.payload = messages;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 180,
        "wires": [
            [
                "f533fc79b458b166"
            ]
        ]
    },
    {
        "id": "df94a7a5d7957158",
        "type": "mysql",
        "z": "pushNotificationFlow",
        "mydb": "806ba83c98eb2e99",
        "name": "设备数据库",
        "x": 630,
        "y": 180,
        "wires": [
            [
                "44a5c0d602ebf6a8"
            ]
        ]
    },
    {
        "id": "f533fc79b458b166",
        "type": "http request",
        "z": "pushNotificationFlow",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": false,
        "url": "",
        "persist": false,
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1040,
        "y": 180,
        "wires": [
            [
                "4d8dedeedc79a7f4"
            ]
        ]
    },
    {
        "id": "02c23ba9edda4146",
        "type": "mysql",
        "z": "pushNotificationFlow",
        "mydb": "806ba83c98eb2e99",
        "name": "设备数据库",
        "x": 570,
        "y": 120,
        "wires": [
            [
                "50455ed14893a9ef"
            ]
        ]
    },
    {
        "id": "50455ed14893a9ef",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 30",
        "func": "// 获取设备列表\nconst devices = msg.payload || [];\n\n// 通知内容\nconst notificationData = msg.notificationData;\n\nif (devices.length === 0) {\n    msg.statusCode = 404;\n    msg.payload = { error: \"未找到设备\" };\n    return [null, null, msg]; // 直接到HTTP响应节点\n}\n\n// 按推送服务分组设备\nconst jpushDevices = devices.filter(d => \n    d.push_service === 'jpush' || \n    (d.push_service !== 'expo' && d.platform === 'android')\n);\n\nconst expoDevices = devices.filter(d => \n    d.push_service === 'expo' || \n    (d.push_service !== 'jpush' && d.platform === 'ios')\n);\n\n// 准备极光推送数据\nif (jpushDevices.length > 0) {\n    const jpushTokens = jpushDevices.map(d => d.token);\n    const jpushMsg = {\n        jpushTokens: jpushTokens,\n        notificationData: notificationData\n    };\n    return [jpushMsg, null, null]; // 发送到极光准备函数\n}\n\n// 准备Expo推送数据\nif (expoDevices.length > 0) {\n    const expoTokens = expoDevices.map(d => d.token);\n    const expoMsg = {\n        expoTokens: expoTokens,\n        notificationData: notificationData\n    };\n    return [null, expoMsg, null]; // 发送到Expo准备函数\n}\n\n// 如果都没有匹配的设备\nmsg.statusCode = 404;\nmsg.payload = { error: \"未找到匹配的推送服务\" };\nreturn [null, null, msg]; // 直接到HTTP响应节点",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 120,
        "wires": [
            [
                "switch-push-service"
            ]
        ]
    },
    {
        "id": "f88a40d2ebe5c492",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "极光",
        "func": "const jpushTokens = msg.jpushTokens;\nconst notificationData = msg.notificationData;\n\n// 准备极光API请求\nmsg.url = \"https://api.jpush.cn/v3/push\";\nmsg.method = \"POST\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Authorization\": \"Basic \" + Buffer.from(\n        \"你的极光AppKey:你的极光Master Secret\"\n    ).toString('base64')\n};\n\n// 极光推送负载\nmsg.payload = {\n    platform: \"android\",\n    audience: {\n        registration_id: jpushTokens\n    },\n    notification: {\n        android: {\n            alert: notificationData.body,\n            title: notificationData.title,\n            extras: notificationData.data\n        }\n    },\n    message: {\n        msg_content: notificationData.body,\n        title: notificationData.title,\n        extras: notificationData.data\n    },\n    options: {\n        time_to_live: 86400,  // 消息有效期1天\n        apns_production: true // 生产环境\n    }\n};\n\n// 保存请求信息用于日志\nmsg.requestInfo = {\n    service: \"jpush\",\n    tokens: jpushTokens,\n    payload: msg.payload\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 100,
        "wires": [
            [
                "1dd5495a0e3e50cc"
            ]
        ]
    },
    {
        "id": "25457a7e43b9cb6b",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "expo",
        "func": "const expoTokens = msg.expoTokens;\nconst notificationData = msg.notificationData;\n\n// 准备Expo API请求\nmsg.url = \"https://exp.host/--/api/v2/push/send\";\nmsg.method = \"POST\";\nmsg.headers = {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\"\n};\n\n// Expo推送负载\nmsg.payload = expoTokens.map(token => ({\n    to: token,\n    sound: \"default\",\n    title: notificationData.title,\n    body: notificationData.body,\n    data: notificationData.data,\n    channelId: \"default\",\n    priority: \"high\"\n}));\n\n// 保存请求信息用于日志\nmsg.requestInfo = {\n    service: \"expo\",\n    tokens: expoTokens,\n    payload: msg.payload\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 140,
        "wires": [
            [
                "6f92fb10b964fc6b"
            ]
        ]
    },
    {
        "id": "1dd5495a0e3e50cc",
        "type": "http request",
        "z": "pushNotificationFlow",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1180,
        "y": 100,
        "wires": [
            [
                "d7b118cbcf399375"
            ]
        ]
    },
    {
        "id": "4d8dedeedc79a7f4",
        "type": "http response",
        "z": "pushNotificationFlow",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 180,
        "wires": []
    },
    {
        "id": "6f92fb10b964fc6b",
        "type": "http request",
        "z": "pushNotificationFlow",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1180,
        "y": 140,
        "wires": [
            [
                "d7b118cbcf399375"
            ]
        ]
    },
    {
        "id": "d7b118cbcf399375",
        "type": "join",
        "z": "pushNotificationFlow",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1330,
        "y": 120,
        "wires": [
            [
                "e16a8fc0085e1fea"
            ]
        ]
    },
    {
        "id": "6818fab9f7981e67",
        "type": "http response",
        "z": "pushNotificationFlow",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1570,
        "y": 120,
        "wires": []
    },
    {
        "id": "e16a8fc0085e1fea",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "响应",
        "func": "const results = [];\n\n// 处理极光响应\nif (msg[0] && msg[0].requestInfo) {\n    results.push({\n        service: \"jpush\",\n        success: msg[0].statusCode >= 200 && msg[0].statusCode < 300,\n        response: msg[0].payload,\n        tokens: msg[0].requestInfo.tokens\n    });\n}\n\n// 处理Expo响应\nif (msg[1] && msg[1].requestInfo) {\n    results.push({\n        service: \"expo\",\n        success: msg[1].statusCode >= 200 && msg[1].statusCode < 300,\n        response: msg[1].payload,\n        tokens: msg[1].requestInfo.tokens\n    });\n}\n\n// 构建最终响应\nconst allSuccess = results.every(r => r.success);\nmsg.statusCode = allSuccess ? 200 : 500;\nmsg.payload = {\n    success: allSuccess,\n    results: results\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 120,
        "wires": [
            [
                "6818fab9f7981e67"
            ]
        ]
    },
    {
        "id": "switch-push-service",
        "type": "switch",
        "z": "pushNotificationFlow",
        "name": "推送类型",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "hask",
                "v": "jpushTokens",
                "vt": "str"
            },
            {
                "t": "hask",
                "v": "expoTokens",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 880,
        "y": 120,
        "wires": [
            [
                "f88a40d2ebe5c492"
            ],
            [
                "25457a7e43b9cb6b"
            ]
        ]
    },
    {
        "id": "aeba3517d8429dc6",
        "type": "http in",
        "z": "pushNotificationFlow",
        "name": "",
        "url": "/api/send-expo-push",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "743c7dc9d7ae631d",
                "a2f8cfa95dc81423"
            ]
        ]
    },
    {
        "id": "743c7dc9d7ae631d",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 44",
        "func": "// 解析请求\nconst request = msg.payload;\nconst token = request.token;\nconst title = request.title || \"Node-RED推送测试\";\nconst body = request.body || \"这是来自Node-RED的推送消息\";\nconst data = request.data || { type: \"node_red_test\" };\n\n// 验证token\nif (!token || !token.startsWith('ExponentPushToken[')) {\n    msg.statusCode = 400;\n    msg.payload = { success: false, error: \"Invalid token\" };\n    return msg;\n}\n\n// 构建Expo推送消息\nmsg.payload = {\n    to: token,\n    title: title,\n    body: body,\n    data: data,\n    sound: 'default',\n    badge: 1\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 260,
        "wires": [
            [
                "72923963b948062b"
            ]
        ]
    },
    {
        "id": "72923963b948062b",
        "type": "http request",
        "z": "pushNotificationFlow",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://exp.host/--/api/v2/push/send",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "Accept",
                "valueType": "other",
                "valueValue": "application/json"
            },
            {
                "keyType": "other",
                "keyValue": "Accept-encoding",
                "valueType": "other",
                "valueValue": "gzip, deflate"
            }
        ],
        "x": 700,
        "y": 280,
        "wires": [
            [
                "8260e8d19f5e4c45"
            ]
        ]
    },
    {
        "id": "8260e8d19f5e4c45",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 45",
        "func": "if (msg.statusCode === 200 && msg.payload.data && msg.payload.data.status === 'ok') {\n    msg.payload = { success: true, message: \"Push notification sent successfully\" };\n} else {\n    msg.payload = { success: false, error: \"Failed to send push notification\", details: msg.payload };\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 280,
        "wires": [
            [
                "bca9d4e408305b83"
            ]
        ]
    },
    {
        "id": "bca9d4e408305b83",
        "type": "http response",
        "z": "pushNotificationFlow",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1410,
        "y": 280,
        "wires": []
    },
    {
        "id": "a2f8cfa95dc81423",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 360,
        "wires": []
    },
    {
        "id": "692aeb4fdb476a54",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 46",
        "func": "   // 获取请求数据\n   const requestData = msg.payload || {};\n   \n   // 验证必要参数\n   if (!requestData.title || !requestData.body) {\n       msg.statusCode = 400;\n       msg.payload = { success: false, error: \"通知标题和内容不能为空\" };\n       return msg;\n   }\n   \n   // 设置触发类型\n   msg.triggerType = 'manual';\n   \n   // 设置查询条件\n   msg.queryCondition = {\n       user_id: requestData.user_id,\n       device_id: requestData.device_id,\n       platform: requestData.platform\n   };\n   \n   // 传递通知内容\n   msg.notificationData = {\n       title: requestData.title,\n       body: requestData.body,\n       data: requestData.data || { type: \"manual\" }\n   };\n   \n   return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 500,
        "wires": [
            [
                "52f7d48785468eca"
            ]
        ]
    },
    {
        "id": "52f7d48785468eca",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 47",
        "func": "   // 获取查询条件\n   const queryCondition = msg.queryCondition || {};\n   \n   // 构建 SQL 查询\n   let whereClause = \"\";\n   let params = [];\n   \n   if (queryCondition.user_id) {\n       whereClause = \"WHERE user_id = ?\";\n       params.push(queryCondition.user_id);\n   } else if (queryCondition.device_id) {\n       whereClause = \"WHERE id = ?\";\n       params.push(queryCondition.device_id);\n   } else {\n       // 默认查询活跃设备\n       whereClause = \"WHERE updated_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)\";\n   }\n   \n   // 设置 SQL 查询\n   msg.topic = `SELECT id, user_id, push_token, platform FROM devices ${whereClause}`;\n   msg.params = params;\n   \n   return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 420,
        "wires": [
            [
                "234cd4ee8c6a7924"
            ]
        ]
    },
    {
        "id": "97726a9043edf1c1",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 48",
        "func": "     // 获取设备和通知数据\n     const devices = msg.payload;\n     const notification = msg.notificationData;\n     \n     if (!devices || devices.length === 0) {\n         node.warn(\"没有找到设备，无法发送推送\");\n         msg.payload = { success: false, error: \"没有找到设备\" };\n         return msg;\n     }\n     \n     // 分离Expo和极光推送设备\n     const expoTokens = [];\n     const jpushTokens = [];\n     \n     devices.forEach(device => {\n         if (device.push_token) {\n             if (device.push_token.startsWith('ExponentPushToken[')) {\n                 expoTokens.push({\n                     token: device.push_token,\n                     user_id: device.user_id,\n                     device_id: device.id\n                 });\n             } else {\n                 jpushTokens.push({\n                     token: device.push_token,\n                     user_id: device.user_id,\n                     device_id: device.id\n                 });\n             }\n         }\n     });\n     \n     // 记录消息\n     node.log(`找到 ${expoTokens.length} 个Expo设备和 ${jpushTokens.length} 个极光设备`);\n     \n     // 构建Expo推送请求\n     if (expoTokens.length > 0) {\n         const messages = expoTokens.map(item => ({\n             to: item.token,\n             title: notification.title,\n             body: notification.body,\n             data: notification.data || {},\n             sound: \"default\",\n             badge: 1\n         }));\n         \n         msg.expoPayload = messages;\n         msg.sendExpo = true;\n     }\n     \n     return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 500,
        "wires": [
            [
                "1a7d67d62aa8795c",
                "b73a209c57f6f2d6"
            ]
        ]
    },
    {
        "id": "234cd4ee8c6a7924",
        "type": "mysql",
        "z": "pushNotificationFlow",
        "mydb": "806ba83c98eb2e99",
        "name": "设备数据库",
        "x": 810,
        "y": 420,
        "wires": [
            [
                "97726a9043edf1c1",
                "efb1cc51af57f5c7"
            ]
        ]
    },
    {
        "id": "ab2fdd503008f1ed",
        "type": "inject",
        "z": "pushNotificationFlow",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"title\":\"通知\",\"body\":\"设备故障请立刻查看\",\"data\":{\"type\":\"test\",\"timestamp\":\"\"}}",
        "payloadType": "json",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "c2cbc3c5aac23c48"
            ]
        ]
    },
    {
        "id": "c2cbc3c5aac23c48",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 50",
        "func": "     // 添加时间戳\n     msg.payload.data.timestamp = new Date().toISOString();\n     \n     // 设置通知数据\n     msg.notificationData = msg.payload;\n     \n     // 设置查询条件 - 可以查询特定用户或所有活跃设备\n     msg.queryCondition = {\n          user_id: 1 \n     };\n     \n     return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 560,
        "wires": [
            [
                "235216ba20a07645",
                "3a81b0b64c0b6808"
            ]
        ]
    },
    {
        "id": "235216ba20a07645",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 51",
        "func": "     // 获取查询条件\n     const condition = msg.queryCondition || {};\n     \n     // 构建WHERE子句\n     let whereClause = \"\";\n     let params = [];\n     \n     if (condition.user_id) {\n         whereClause = \"WHERE user_id = ?\";\n         params.push(condition.user_id);\n     } else {\n         // 默认查询30天内活跃的设备\n         whereClause = \"WHERE updated_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)\";\n     }\n     \n     // 添加平台过滤条件(可选)\n     if (condition.platform) {\n         whereClause += whereClause ? \" AND platform = ?\" : \"WHERE platform = ?\";\n         params.push(condition.platform);\n     }\n     \n     // 设置SQL查询\n     msg.topic = `SELECT * FROM devices ${whereClause} LIMIT 10`;\n     msg.params = params;\n     \n     return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 540,
        "wires": [
            [
                "8bf1fc7bc3361846",
                "234cd4ee8c6a7924"
            ]
        ]
    },
    {
        "id": "b35b0c1307a96b7d",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 52",
        "func": "     // 获取响应数据\n     const response = msg.payload;\n     const notification = msg.notificationData;\n     \n     // 统计成功/失败数\n     let success = 0;\n     let failure = 0;\n     \n     if (response && response.data) {\n         success = response.data.filter(item => item.status === \"ok\").length;\n         failure = response.data.filter(item => item.status !== \"ok\").length;\n     }\n     \n     // 记录结果信息\n     node.log(`推送结果: 成功=${success}, 失败=${failure}`);\n     node.log(`通知标题: \"${notification.title}\"`);\n     node.log(`通知内容: \"${notification.body}\"`);\n     \n     // 构建结果记录\n     const result = {\n         title: notification.title,\n         body: notification.body,\n         type: notification.data?.type || \"test\",\n         sent_time: new Date().toISOString(),\n         success_count: success,\n         failure_count: failure,\n         service: \"expo\"\n     };\n     \n     msg.payload = result;\n     \n     // 如果有需要，可以设置SQL插入语句\n     // msg.topic = \"INSERT INTO notification_logs (title, body, type, sent_time, success_count, failure_count, service) VALUES (?, ?, ?, ?, ?, ?, ?)\";\n     // msg.params = [result.title, result.body, result.type, result.sent_time, result.success_count, result.failure_count, result.service];\n     \n     return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 560,
        "wires": [
            [
                "5189312f4de4f688"
            ]
        ]
    },
    {
        "id": "5189312f4de4f688",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1680,
        "y": 560,
        "wires": []
    },
    {
        "id": "3a81b0b64c0b6808",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 640,
        "wires": []
    },
    {
        "id": "8bf1fc7bc3361846",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 640,
        "wires": []
    },
    {
        "id": "efb1cc51af57f5c7",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 380,
        "wires": []
    },
    {
        "id": "1a7d67d62aa8795c",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 400,
        "wires": []
    },
    {
        "id": "260097692d191dbc",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 420,
        "wires": []
    },
    {
        "id": "dbc56ca8177d39cf",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 17",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1580,
        "y": 420,
        "wires": []
    },
    {
        "id": "0f81d8b04b2e9adc",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 380,
        "wires": []
    },
    {
        "id": "b73a209c57f6f2d6",
        "type": "function",
        "z": "pushNotificationFlow",
        "name": "function 53",
        "func": "     // 检查是否需要发送Expo推送\n     if (!msg.sendExpo || !msg.expoPayload) {\n         return null; // 停止继续执行\n     }\n     \n     // 设置HTTP请求参数\n     msg.url = 'https://exp.host/--/api/v2/push/send';\n     msg.method = 'POST';\n     msg.headers = {\n         'Content-Type': 'application/json',\n         'Accept': 'application/json'\n     };\n     msg.payload = msg.expoPayload;\n     \n     return msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 580,
        "wires": [
            [
                "f915516af2972a74",
                "acb1d922e7fb4b72"
            ]
        ]
    },
    {
        "id": "f915516af2972a74",
        "type": "http request",
        "z": "pushNotificationFlow",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{{url}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1360,
        "y": 500,
        "wires": [
            [
                "948affad44318e3f"
            ]
        ]
    },
    {
        "id": "2f980527d60f0e71",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 20",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 20,
        "wires": []
    },
    {
        "id": "5036f4873eeee933",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 22",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 120,
        "wires": []
    },
    {
        "id": "acb1d922e7fb4b72",
        "type": "debug",
        "z": "pushNotificationFlow",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 640,
        "wires": []
    },
    {
        "id": "948affad44318e3f",
        "type": "http response",
        "z": "pushNotificationFlow",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1590,
        "y": 480,
        "wires": []
    },
    {
        "id": "http-in",
        "type": "http in",
        "z": "diet-app-flows",
        "name": "API 入口",
        "url": "/api",
        "method": "use",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "route-handler"
            ]
        ]
    },
    {
        "id": "route-handler",
        "type": "switch",
        "z": "diet-app-flows",
        "name": "路由处理",
        "property": "req.url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^/api/user",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^/api/recipes",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^/api/meal-plan",
                "vt": "str"
            },
            {
                "t": "regex",
                "v": "^/api/weight",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "user-handler"
            ],
            [
                "recipe-handler"
            ],
            [
                "meal-plan-handler"
            ],
            [
                "weight-handler"
            ]
        ]
    },
    {
        "id": "user-handler",
        "type": "switch",
        "z": "diet-app-flows",
        "name": "用户处理",
        "property": "req.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PUT",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 480,
        "y": 60,
        "wires": [
            [
                "get-user"
            ],
            [
                "create-user"
            ],
            []
        ]
    },
    {
        "id": "recipe-handler",
        "type": "switch",
        "z": "diet-app-flows",
        "name": "食谱处理",
        "property": "req.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 100,
        "wires": [
            [],
            [
                "generate-recipe"
            ]
        ]
    },
    {
        "id": "meal-plan-handler",
        "type": "switch",
        "z": "diet-app-flows",
        "name": "备餐计划处理",
        "property": "req.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 140,
        "wires": [
            [
                "get-meal-plan"
            ],
            []
        ]
    },
    {
        "id": "weight-handler",
        "type": "switch",
        "z": "diet-app-flows",
        "name": "体重记录处理",
        "property": "req.method",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "POST",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 180,
        "wires": [
            [
                "get-weight-records"
            ],
            []
        ]
    },
    {
        "id": "get-user",
        "type": "function",
        "z": "diet-app-flows",
        "name": "获取用户信息",
        "func": "msg.topic = `SELECT * FROM users WHERE id = ${msg.req.params.id}`;\nreturn msg;",
        "outputs": 1,
        "x": 700,
        "y": 40,
        "wires": [
            [
                "650e6a6602c77132"
            ]
        ]
    },
    {
        "id": "create-user",
        "type": "function",
        "z": "diet-app-flows",
        "name": "创建用户",
        "func": "msg.topic = `INSERT INTO users (nickname, current_weight, target_weight, height, activity_level, dietary_preferences) VALUES ('${msg.req.body.nickname}', '${msg.req.body.current_weight}', '${msg.req.body.target_weight}', '${msg.req.body.height}', '${msg.req.body.activity_level}', '${msg.req.body.dietary_preferences}')`;\nreturn msg;",
        "outputs": 1,
        "x": 700,
        "y": 80,
        "wires": [
            [
                "64df87f5542befa2"
            ]
        ]
    },
    {
        "id": "generate-recipe",
        "type": "function",
        "z": "diet-app-flows",
        "name": "生成食谱",
        "func": "msg.payload = {\n    recipe: {\n        name: '健康早餐',\n        ingredients: '全麦面包,牛奶,水煮蛋',\n        instructions: '1. 准备食材\\n2. 制作步骤',\n        calories: 350\n    }\n};\nreturn msg;",
        "outputs": 1,
        "x": 700,
        "y": 120,
        "wires": [
            [
                "43dfe59424124c4c"
            ]
        ]
    },
    {
        "id": "get-meal-plan",
        "type": "function",
        "z": "diet-app-flows",
        "name": "获取备餐计划",
        "func": "msg.topic = `SELECT * FROM daily_plans WHERE user_id = ${msg.req.params.userId} AND date = '${msg.req.params.date}'`;\nreturn msg;",
        "outputs": 1,
        "x": 720,
        "y": 160,
        "wires": [
            [
                "8ebd3b8c63386e50"
            ]
        ]
    },
    {
        "id": "get-weight-records",
        "type": "function",
        "z": "diet-app-flows",
        "name": "获取体重记录",
        "func": "msg.topic = `SELECT * FROM weight_records WHERE user_id = ${msg.req.params.userId} ORDER BY record_date DESC`;\nreturn msg;",
        "outputs": 1,
        "x": 720,
        "y": 200,
        "wires": [
            [
                "37a56540f469cec9"
            ]
        ]
    },
    {
        "id": "response",
        "type": "http response",
        "z": "diet-app-flows",
        "name": "HTTP 响应",
        "statusCode": "200",
        "headers": {
            "Content-Type": "application/json"
        },
        "x": 1150,
        "y": 120,
        "wires": []
    },
    {
        "id": "650e6a6602c77132",
        "type": "mysql",
        "z": "diet-app-flows",
        "mydb": "50fcbda9bec92cec",
        "name": "设备数据库",
        "x": 910,
        "y": 40,
        "wires": [
            [
                "response"
            ]
        ]
    },
    {
        "id": "64df87f5542befa2",
        "type": "mysql",
        "z": "diet-app-flows",
        "mydb": "50fcbda9bec92cec",
        "name": "设备数据库",
        "x": 910,
        "y": 80,
        "wires": [
            [
                "response"
            ]
        ]
    },
    {
        "id": "43dfe59424124c4c",
        "type": "mysql",
        "z": "diet-app-flows",
        "mydb": "50fcbda9bec92cec",
        "name": "设备数据库",
        "x": 910,
        "y": 120,
        "wires": [
            [
                "response"
            ]
        ]
    },
    {
        "id": "8ebd3b8c63386e50",
        "type": "mysql",
        "z": "diet-app-flows",
        "mydb": "50fcbda9bec92cec",
        "name": "设备数据库",
        "x": 910,
        "y": 160,
        "wires": [
            [
                "response"
            ]
        ]
    },
    {
        "id": "37a56540f469cec9",
        "type": "mysql",
        "z": "diet-app-flows",
        "mydb": "50fcbda9bec92cec",
        "name": "设备数据库",
        "x": 910,
        "y": 200,
        "wires": [
            [
                "response"
            ]
        ]
    },
    {
        "id": "a1b3c5d7.8e9f10",
        "type": "function",
        "z": "b5991e6b.6c1f3",
        "name": "数据处理与通知触发",
        "func": "// 配置区（生产环境请改用环境变量）\nconst NOTION_API_KEY = \"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\";\nconst NOTION_PAGE_ID = \"1d249caf-37e3-8070-8baa-d226902c19c6\";\nconst COOLDOWN = 300000; // 5分钟冷却\n\ntry {\n    // 主逻辑\n    if (typeof msg.payload === \"string\" && msg.payload.includes(\"没有查询到最新的日报数据\")) {\n        // 冷却检查\n        const lastNotice = context.global.get(\"last_notion_notice\") || 0;\n        const now = Date.now();\n        \n        if (now - lastNotice < COOLDOWN) {\n            node.warn(`冷却中，剩余:${Math.ceil((COOLDOWN - (now - lastNotice))/1000)}秒`);\n            return [msg, null];\n        }\n\n        // 构造请求\n        msg.req = {\n            method: \"PATCH\",\n            url: `https://api.notion.com/v1/blocks/${NOTION_PAGE_ID}/children`,\n            headers: {\n                \"Authorization\": `Bearer ${NOTION_API_KEY}`,\n                \"Notion-Version\": \"2022-06-28\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: {\n                children: [{\n                    object: \"block\",\n                    type: \"paragraph\",\n                    paragraph: {\n                        rich_text: [{\n                            type: \"text\",\n                            text: {\n                                content: [\n                                    `⚠️ 数据异常 #${(context.global.get(\"notice_counter\") || 0) + 1}`,\n                                    `▸ 时间：${new Date().toLocaleString()}`,\n                                    `▸ 详情：${msg.payload}`\n                                ].join(\"\\n\")\n                            }\n                        }]\n                    }\n                }]\n            }\n        };\n\n        // 更新状态\n        context.global.set(\"notice_counter\", (context.global.get(\"notice_counter\") || 0) + 1);\n        context.global.set(\"last_notion_notice\", now);\n\n        return [msg, msg];\n    }\n    return [msg, null];\n} catch (e) {\n    node.error(\"处理错误\", e);\n    return [msg, null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [
            [
                "d3f5g7h9.j1k2l3"
            ],
            [
                "m4n5b6v7.c8x9z0"
            ]
        ]
    },
    {
        "id": "m4n5b6v7.c8x9z0",
        "type": "http request",
        "z": "b5991e6b.6c1f3",
        "name": "Notion API",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "use",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "q1w2e3r4.t5y6u7"
            ]
        ]
    },
    {
        "id": "q1w2e3r4.t5y6u7",
        "type": "function",
        "z": "b5991e6b.6c1f3",
        "name": "处理响应",
        "func": "if (msg.statusCode === 200) {\n    node.log(\"成功更新Notion\");\n    msg.payload = {\n        status: \"success\",\n        data: msg.payload\n    };\n} else {\n    node.error(`失败: ${msg.statusCode}`, msg.payload);\n    msg.payload = {\n        status: \"error\",\n        code: msg.statusCode,\n        detail: msg.payload?.message || \"未知错误\"\n    };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 200,
        "wires": [
            [
                "s8d9f0g1.h2j3k4"
            ]
        ]
    },
    {
        "id": "s8d9f0g1.h2j3k4",
        "type": "debug",
        "z": "b5991e6b.6c1f3",
        "name": "调试输出",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 200,
        "wires": []
    },
    {
        "id": "d3f5g7h9.j1k2l3",
        "type": "debug",
        "z": "b5991e6b.6c1f3",
        "name": "原始数据流",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 140,
        "wires": []
    },
    {
        "id": "k9l8m7n6.o5p4q3",
        "type": "inject",
        "z": "b5991e6b.6c1f3",
        "name": "测试触发器",
        "props": [
            {
                "p": "payload",
                "v": "没有查询到最新的日报数据",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "a1b3c5d7.8e9f10"
            ]
        ]
    },
    {
        "id": "r2s3t4u5.v6w7x8",
        "type": "comment",
        "z": "b5991e6b.6c1f3",
        "name": "使用说明",
        "info": "## 使用前检查：\n1. 确认Notion页面已共享给集成\n2. 修改代码中的API_KEY和PAGE_ID\n3. 测试流程前触发【测试触发器】节点\n\n## 输出说明：\n- 端口1: 原始数据流\n- 端口2: API请求流",
        "x": 400,
        "y": 140,
        "wires": []
    },
    {
        "id": "c1d2e3f4.g5h6i7",
        "type": "catch",
        "z": "b5991e6b.6c1f3",
        "name": "全局错误捕获",
        "scope": null,
        "uncaught": false,
        "x": 600,
        "y": 260,
        "wires": [
            [
                "s8d9f0g1.h2j3k4"
            ]
        ]
    },
    {
        "id": "fcebe1178d679fc7",
        "type": "http in",
        "z": "514ec94e7d382f6a",
        "name": "登录接口",
        "url": "/api/auth/login/",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 60,
        "wires": [
            [
                "2b3e427d203d6fee",
                "7bfa113b384b097e"
            ]
        ]
    },
    {
        "id": "2b3e427d203d6fee",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "处理登录请求",
        "func": "// 获取用户名/邮箱和密码\nconst email = msg.payload.email;\nconst password = msg.payload.password;\n\n// 验证参数\nif (!email || !password) {\n    msg.statusCode = 400;\n    msg.payload = {\n        success: false,\n        error: {\n            code: \"INVALID_PARAMS\",\n            message: \"邮箱和密码不能为空\"\n        }\n    };\n    return msg;\n}\n\n// 设置查询参数 - 支持使用邮箱或用户名登录\nmsg.topic = \"SELECT * FROM users1 WHERE email = ? \";\nmsg.payload = [email];\n\nreturn msg;",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "129d352e7cd37318",
                "119b10b15b07a8a7"
            ],
            [
                "bd6e9432646a2051",
                "ef91cdfd8e1ece95"
            ]
        ]
    },
    {
        "id": "129d352e7cd37318",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "查询用户",
        "x": 560,
        "y": 40,
        "wires": [
            [
                "71212ac9a0d2aaa2"
            ]
        ]
    },
    {
        "id": "71212ac9a0d2aaa2",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "验证密码",
        "func": "const users = msg.payload;  // payload 是用户数组\nconst password = msg.req.body.password; // 获取前端提交的密码\n\n// 全局依赖\nconst bcrypt = global.get('bcrypt');\nconst jwt = global.get('jwt');\nconst uuid = global.get('uuid');\nconst jwtSecret = global.get('jwtSecret');\nconst jwtRefreshSecret = global.get('jwtRefreshSecret');\n\n// 用户不存在\nif (!users || users.length === 0) {\n    return [null, {\n            \"error\": {\n                \"code\": \"ERROR_CODE\",\n                \"message\": \"用户不存在'\",\n                \"success\": false,   \n            }\n    }];\n}\n\nconst user = users[0];\n\n// 密码不匹配\nconst passwordMatch = bcrypt.compareSync(password, user.password);\nif (!passwordMatch) {\n    return [null, {\n            \"error\": {\n                \"code\": \"ERROR_CODE\",\n                \"message\": \"用户名或密码错误\",\n                \"success\": false,\n            }\n    }];\n}\n\n// 登录成功：生成 JWT 和 Refresh Token\nconst tokenId = uuid.v4();\nconst refreshTokenId = uuid.v4();\n\nconst tokenExpiry = new Date();\ntokenExpiry.setHours(tokenExpiry.getHours() + 24); // 24小时有效\n\nconst tokenPayload = {\n    id: user.id,\n    username: user.username,\n    role: user.role || 'user',\n    company: user.company,\n    jti: tokenId\n};\n\nconst refreshPayload = {\n    id: user.id,\n    jti: refreshTokenId\n};\n\nconst token = jwt.sign(tokenPayload, jwtSecret, { expiresIn: '24h' });\nconst refreshToken = jwt.sign(refreshPayload, jwtRefreshSecret, { expiresIn: '7d' });\n\nmsg.tokenInfo = {\n    id: tokenId,\n    user_id: user.id,\n    token: token,\n    refresh_token: refreshToken,\n    expires_at: tokenExpiry\n};\n\nmsg.topic = \"INSERT INTO tokens (id, user_id, token, refresh_token, expires_at) VALUES (?, ?, ?, ?, ?)\";\nmsg.payload = [tokenId, user.id, token, refreshToken, tokenExpiry];\n\nmsg.userResponse = {\n    success: true,\n    data: {\n        token: token,\n        refreshToken: refreshToken,\n        message: '登录成功',\n        user: {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            phone: user.phone,\n            department: user.department,\n            avatar_seed: user.avatar_seed,\n            company: user.company,\n            is_admin: user.is_admin || false\n        }\n    }\n};\n\n// 正常登录 -> 输出1\nreturn [msg, null];\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 40,
        "wires": [
            [
                "e2ecf5e1fad297da"
            ],
            [
                "bd6e9432646a2051"
            ]
        ]
    },
    {
        "id": "e2ecf5e1fad297da",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "保存Token",
        "x": 970,
        "y": 20,
        "wires": [
            [
                "851b86051510e225",
                "481ffe7dad64abb3"
            ]
        ]
    },
    {
        "id": "851b86051510e225",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "构建登录响应",
        "func": "// 无论保存token成功或失败，都返回登录成功响应\nmsg.payload = msg.userResponse;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 40,
        "wires": [
            [
                "bd6e9432646a2051",
                "25713032e80df106"
            ]
        ]
    },
    {
        "id": "efc328b4427f30c1",
        "type": "http in",
        "z": "514ec94e7d382f6a",
        "name": "刷新Token接口",
        "url": "/api/auth/refresh-token/",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "eebdbea650d41b39"
            ]
        ]
    },
    {
        "id": "eebdbea650d41b39",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "处理刷新Token请求",
        "func": "// 获取刷新令牌\nconst refreshToken = msg.payload.refreshToken;\n\n// 验证参数\nif (!refreshToken) {\n    msg.statusCode = 400;\n    msg.payload = {\n        success: false,\n        error: {\n            code: \"INVALID_PARAMS\",\n            message: \"刷新令牌不能为空\"\n        }\n    };\n    return msg;\n}\n\n// 验证刷新令牌\nconst jwt = global.get('jwt');\nlet decoded;\ntry {\n    decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET);\n} catch (error) {\n    msg.statusCode = 401;\n    msg.payload = {\n        success: false,\n        error: {\n            code: \"INVALID_REFRESH_TOKEN\",\n            message: \"刷新令牌无效或已过期\"\n        }\n    };\n    return msg;\n}\n\n// 查询令牌是否存在于数据库\nmsg.topic = \"SELECT * FROM tokens WHERE refresh_token = ? AND user_id = ?\";\nmsg.payload = [refreshToken, decoded.id];\nmsg.decoded = decoded; // 保存解码后的数据以供后续使用\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "586e71e03b192e79"
            ]
        ]
    },
    {
        "id": "586e71e03b192e79",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "检查Token是否存在",
        "x": 590,
        "y": 120,
        "wires": [
            [
                "9b9731b092868eba"
            ]
        ]
    },
    {
        "id": "9b9731b092868eba",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "生成新Token",
        "func": "const tokens = msg.payload;\nconst decoded = msg.decoded;\n\n// 验证令牌是否存在于数据库\nif (tokens.length === 0) {\n    msg.statusCode = 401;\n    msg.payload = {\n        success: false,\n        error: {\n            code: \"INVALID_REFRESH_TOKEN\",\n            message: \"刷新令牌已失效，请重新登录\"\n        }\n    };\n    return msg;\n}\n\n// 获取用户信息\nmsg.topic = \"SELECT id, username, email, role, company FROM users1 WHERE id = ?\";\nmsg.payload = [decoded.id];\nmsg.oldToken = tokens[0]; // 保存旧令牌信息以供后续使用\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 120,
        "wires": [
            [
                "ee014dc649af6e4b"
            ]
        ]
    },
    {
        "id": "ee014dc649af6e4b",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "获取用户信息",
        "x": 940,
        "y": 120,
        "wires": [
            [
                "0cb3db378b2953e8"
            ]
        ]
    },
    {
        "id": "0cb3db378b2953e8",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "创建新Token",
        "func": "const users = msg.payload;\n\n// 用户不存在\nif (users.length === 0) {\n    msg.statusCode = 401;\n    msg.payload = {\n        success: false,\n        error: {\n            code: \"USER_NOT_FOUND\",\n            message: \"用户不存在，请重新登录\"\n        }\n    };\n    return msg;\n}\n\nconst user = users[0];\nconst oldToken = msg.oldToken;\n\n// 生成新令牌\nconst jwt = global.get('jwt');\nconst uuid = global.get('uuid');\n\nconst tokenId = uuid.v4();\nconst refreshTokenId = uuid.v4();\n\n// 设置token过期时间\nconst tokenExpiry = new Date();\ntokenExpiry.setHours(tokenExpiry.getHours() + 24); // 24小时有效\n\n// 创建token payload\nconst tokenPayload = {\n    id: user.id,\n    username: user.username,\n    role: user.role || 'user',\n    company: user.company,\n    jti: tokenId\n};\n\n// 创建refresh token payload\nconst refreshPayload = {\n    id: user.id,\n    jti: refreshTokenId\n};\n\n// 签发token\nconst token = jwt.sign(tokenPayload, process.env.JWT_SECRET, { expiresIn: '24h' });\nconst refreshToken = jwt.sign(refreshPayload, process.env.JWT_REFRESH_SECRET, { expiresIn: '7d' });\n\n// 准备更新token的SQL语句\nmsg.topic = \"UPDATE tokens SET token = ?, refresh_token = ?, expires_at = ? WHERE id = ?\";\nmsg.payload = [token, refreshToken, tokenExpiry, oldToken.id];\n\n// 保存token信息，用于响应\nmsg.tokenResponse = {\n    success: true,\n    data: {\n        token: token,\n        refreshToken: refreshToken\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 120,
        "wires": [
            [
                "84d6a2b151cb994c"
            ]
        ]
    },
    {
        "id": "84d6a2b151cb994c",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "更新Token",
        "x": 810,
        "y": 180,
        "wires": [
            [
                "04ea003bab93a361"
            ]
        ]
    },
    {
        "id": "04ea003bab93a361",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "刷新Token响应",
        "func": "// 无论更新token成功或失败，都返回新token\nmsg.payload = msg.tokenResponse;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 180,
        "wires": [
            [
                "bd6e9432646a2051"
            ]
        ]
    },
    {
        "id": "6a9db7a3d4d7686c",
        "type": "http in",
        "z": "514ec94e7d382f6a",
        "name": "检查管理员状态接口",
        "url": "/api/auth/check-admin/",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 260,
        "wires": [
            [
                "6c8a1c916d594008"
            ]
        ]
    },
    {
        "id": "6c8a1c916d594008",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "处理管理员检查请求",
        "func": "// 获取用户ID\nconst userId = msg.payload.userId;\n\n// 验证参数\nif (!userId) {\n    msg.statusCode = 400;\n    msg.payload = {\n        success: false,\n        error: {\n            code: \"INVALID_PARAMS\",\n            message: \"用户ID不能为空\"\n        }\n    };\n    return msg;\n}\n\n// 查询用户角色\nmsg.topic = \"SELECT roles FROM users1 WHERE id = ?\";\nmsg.payload = [userId];\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 260,
        "wires": [
            [
                "355a36260d4405ab"
            ]
        ]
    },
    {
        "id": "355a36260d4405ab",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "获取用户角色",
        "x": 600,
        "y": 260,
        "wires": [
            [
                "a8c24e569fc82ed2"
            ]
        ]
    },
    {
        "id": "a8c24e569fc82ed2",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "管理员检查响应",
        "func": "const users = msg.payload;\n\n// 用户不存在\nif (users.length === 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        success: false,\n        error: {\n            code: \"USER_NOT_FOUND\",\n            message: \"用户不存在\"\n        }\n    };\n    return msg;\n}\n\nconst user = users[0];\n\n// 检查用户角色\nconst isAdmin = user.role === 'admin' || user.role === 'superadmin';\n\nmsg.payload = {\n    success: true,\n    data: {\n        is_admin: isAdmin ? 1 : 0,\n        role: user.role\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 260,
        "wires": [
            [
                "bd6e9432646a2051"
            ]
        ]
    },
    {
        "id": "b9cbbdc381150e77",
        "type": "http in",
        "z": "514ec94e7d382f6a",
        "name": "登出接口",
        "url": "/api/auth/logout/",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "7dbccb064494de4e"
            ]
        ]
    },
    {
        "id": "7dbccb064494de4e",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "处理登出请求",
        "func": "// 从请求头获取令牌\nconst authHeader = msg.req.headers.authorization;\nif (!authHeader || !authHeader.startsWith('Bearer ')) {\n    msg.statusCode = 400;\n    msg.payload = {\n        success: false,\n        error: {\n            code: \"INVALID_TOKEN\",\n            message: \"未提供有效的令牌\"\n        }\n    };\n    return msg;\n}\n\nconst token = authHeader.substring(7);\n\n// 将令牌加入黑名单\nmsg.topic = \"DELETE FROM tokens WHERE token = ?\";\nmsg.payload = [token];\n\n// 保存响应结果供后续使用\nmsg.logoutResponse = {\n    success: true,\n    message: \"已成功登出\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 320,
        "wires": [
            [
                "d332cba5904f325f"
            ]
        ]
    },
    {
        "id": "d332cba5904f325f",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "将Token加入黑名单",
        "x": 610,
        "y": 320,
        "wires": [
            [
                "e8768dc722b54322"
            ]
        ]
    },
    {
        "id": "e8768dc722b54322",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "登出响应",
        "func": "// 无论将令牌加入黑名单是否成功，都返回登出成功响应\nmsg.payload = msg.logoutResponse;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 320,
        "wires": [
            [
                "bd6e9432646a2051"
            ]
        ]
    },
    {
        "id": "bd6e9432646a2051",
        "type": "http response",
        "z": "514ec94e7d382f6a",
        "name": "HTTP响应",
        "statusCode": "",
        "headers": {
            "Content-Type": "application/json",
            "Access-Control-Allow-Origin": "*"
        },
        "x": 1400,
        "y": 80,
        "wires": []
    },
    {
        "id": "9c3588b9315c3c1e",
        "type": "http in",
        "z": "514ec94e7d382f6a",
        "name": "注册接口",
        "url": "/api/auth/register/",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 400,
        "wires": [
            [
                "324a8392b5a934a5"
            ]
        ]
    },
    {
        "id": "324a8392b5a934a5",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "处理注册请求",
        "func": "// 获取注册信息\nconst username = msg.payload.username;\nconst password = msg.payload.password;\nconst email = msg.payload.email;\nconst phone = msg.payload.phone || '';\nconst company = msg.payload.company || '';\nconst company_id = msg.payload.company_id || '';\nconst department = msg.payload.department || '';\nconst department_id = msg.payload.department_id || '';\nconst role = msg.payload.role || 'user';\n\n// 验证参数\nif (!username || !password || !email) {\n    msg.statusCode = 400;\n    msg.payload = {\n        success: false,\n        error: {\n            code: \"INVALID_PARAMS\",\n            message: \"用户名、密码和邮箱不能为空\"\n        }\n    };\n    return msg;\n}\n\n// 验证邮箱格式\nconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\nif (!emailRegex.test(email)) {\n    msg.statusCode = 400;\n    msg.payload = {\n        success: false,\n        error: {\n            code: \"INVALID_EMAIL\",\n            message: \"邮箱格式不正确\"\n        }\n    };\n    return msg;\n}\n\n// 设置查询参数，检查用户名和邮箱是否已存在\nmsg.topic = \"SELECT * FROM users1 WHERE username = ? OR email = ?\";\nmsg.payload = [username, email];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 400,
        "wires": [
            [
                "615ee1c83264aaa1"
            ]
        ]
    },
    {
        "id": "615ee1c83264aaa1",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "检查用户是否存在",
        "x": 610,
        "y": 400,
        "wires": [
            [
                "cc1fe7f973854990"
            ]
        ]
    },
    {
        "id": "bce096ab91d12da3",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "准备创建用户",
        "func": "const bcrypt = global.get('bcrypt');\nif (!bcrypt) {\n    throw new Error('bcrypt module not found');\n}\n\nconst uuid = global.get('uuid');\n\n// 生成用户ID\nconst userId = uuid.v4();\n\n// 对密码进行加密\nconst salt = bcrypt.genSaltSync(10);\nif (!salt) {\n    throw new Error('Failed to generate salt');\n}\n\nconst hashedPassword = bcrypt.hashSync(msg.req.body.password, salt);\nif (!hashedPassword) {\n    throw new Error('Password hashing failed');\n}\n\n// 构建用户对象\nconst newUser = {\n    id: userId,\n    username: msg.req.body.username,\n    password: hashedPassword,\n    email: msg.req.body.email,\n    phone: msg.req.body.phone || '',\n    company: msg.req.body.company || '',\n    department: msg.req.body.department || '',\n    status: 1\n};\n\n// 设置SQL插入语句\nmsg.topic = \"INSERT INTO users1 (uuid, username, password, email, phone, company,department,  status) VALUES (?,  ?,  ?, ?, ?, ?, ?, ?)\";\nmsg.payload = [\n    userId, \n    newUser.username, \n    newUser.password, \n    newUser.email, \n    newUser.phone, \n    newUser.company, \n    newUser.department, \n    newUser.status\n];\n\n// 保存新用户对象，用于响应\nmsg.newUser = newUser;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 400,
        "wires": [
            [
                "9ed4c64de1f442a9"
            ]
        ]
    },
    {
        "id": "9ed4c64de1f442a9",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "创建用户",
        "x": 1140,
        "y": 400,
        "wires": [
            [
                "94b2c2ed156d3149"
            ]
        ]
    },
    {
        "id": "94b2c2ed156d3149",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "注册响应",
        "func": "// 创建用户成功后的响应\n\n// 不返回密码等敏感信息\nconst userInfo = {\n    id: msg.newUser.id,\n    username: msg.newUser.username,\n    email: msg.newUser.email,\n    company: msg.newUser.company,\n    department: msg.newUser.department,\n    role: msg.newUser.role\n};\n\nmsg.payload = {\n    success: true,\n    data: userInfo\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 400,
        "wires": [
            [
                "bd6e9432646a2051"
            ]
        ]
    },
    {
        "id": "cc1fe7f973854990",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "function 65",
        "func": "// 处理查询结果，检查是否已有用户\nif (msg.payload && msg.payload.length > 0) {\n    // 如果查询到已有用户，返回400错误\n    msg.statusCode = 400;\n    msg.payload = {\n        message: '该邮箱已被注册'\n    };\n    return [msg,null];\n} else {\n    // 如果没有重复用户，则继续处理创建新用户的逻辑\n    return [null,msg];\n}\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 400,
        "wires": [
            [
                "bd6e9432646a2051"
            ],
            [
                "bce096ab91d12da3"
            ]
        ]
    },
    {
        "id": "419564095f3b5838",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "function 18",
        "func": "\nconst query = `\n    SELECT * FROM company;\n`;\nmsg.topic = query;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 500,
        "wires": [
            [
                "c2e080ff30e25432"
            ]
        ]
    },
    {
        "id": "0b21bbd31fa67cf8",
        "type": "http in",
        "z": "514ec94e7d382f6a",
        "name": "获取公司信息",
        "url": "api/companies",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "419564095f3b5838",
                "73b2cd263c03fd18"
            ]
        ]
    },
    {
        "id": "c2e080ff30e25432",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "",
        "x": 530,
        "y": 500,
        "wires": [
            [
                "update-user-response",
                "3117fd1cfd6a06ab"
            ]
        ]
    },
    {
        "id": "2718baf06a75c02e",
        "type": "http in",
        "z": "514ec94e7d382f6a",
        "name": "获取用户列表",
        "url": "api/users",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "7eb2adb19fc8700a"
            ]
        ]
    },
    {
        "id": "7eb2adb19fc8700a",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "function 19",
        "func": "\nconst query = `\n    SELECT * FROM users1;\n`;\nmsg.topic = query;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 560,
        "wires": [
            [
                "5a2c0b8258e11c08"
            ]
        ]
    },
    {
        "id": "5a2c0b8258e11c08",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "",
        "x": 530,
        "y": 560,
        "wires": [
            [
                "update-user-response"
            ]
        ]
    },
    {
        "id": "update-user-response",
        "type": "http response",
        "z": "514ec94e7d382f6a",
        "name": "Send Updated User",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1320,
        "y": 620,
        "wires": []
    },
    {
        "id": "delete-user-endpoint",
        "type": "http in",
        "z": "514ec94e7d382f6a",
        "name": "删除用户",
        "url": "/api/users/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 700,
        "wires": [
            [
                "8caf43095817a5c0"
            ]
        ]
    },
    {
        "id": "delete-user-query",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "Delete User",
        "x": 550,
        "y": 700,
        "wires": [
            [
                "check-delete-result"
            ]
        ]
    },
    {
        "id": "check-delete-result",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "Check Delete Result",
        "func": "const result = msg.payload;\n\nif (result.affectedRows === 0) {\n    msg.statusCode = 404;\n    msg.payload = { error: '用户不存在' };\n    return [null, msg];\n}\n\nmsg.payload = { message: '删除用户成功' };\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 700,
        "wires": [
            [
                "update-user-response"
            ],
            [
                "update-user-response"
            ]
        ]
    },
    {
        "id": "8caf43095817a5c0",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "function 4",
        "func": "const userId = msg.req.params.id; // 获取请求中的用户ID\n\nif (!userId) {\n    msg.statusCode = 400;  // 如果未传入 ID，返回 400\n    msg.payload = { error: '缺少用户ID' };\n    return [null, msg];\n}\n\n// 使用事务来删除关联记录\nmsg.topic = `\n    START TRANSACTION;\n    DELETE FROM tickets WHERE creator_id = ${userId}; \n    DELETE FROM users1 WHERE id = ${userId}; \n    COMMIT;\n`;\n\nreturn [msg, null];\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 700,
        "wires": [
            [
                "delete-user-query"
            ]
        ]
    },
    {
        "id": "d4489cc0a3cb72c3",
        "type": "http in",
        "z": "514ec94e7d382f6a",
        "name": "更新用户角色",
        "url": "/api/users/:id/role",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "3fb88bf70869f5a4"
            ]
        ]
    },
    {
        "id": "3fb88bf70869f5a4",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "Prepare Update Query",
        "func": "const userId = msg.req.params.id;\nconst updates = msg.payload;\n\n// 防止更新密码 (需要单独的更改密码接口)\ndelete updates.password;\n\n// 防止更新created_at字段\ndelete updates.created_at;\n\n// 确保 updated_at 字段是有效的日期时间格式\nif (updates.updated_at) {\n    const validDateTime = new Date(updates.updated_at).toISOString().slice(0, 19).replace('T', ' ');\n    updates.updated_at = validDateTime; // 更新为正确的格式\n}\n\n// 构建SET子句\nconst setClauses = [];\nconst params = [];\n\nfor (const [key, value] of Object.entries(updates)) {\n    if (value !== undefined && value !== null) {\n        setClauses.push(`${key} = ?`);\n        params.push(value);\n    }\n}\n\nif (setClauses.length === 0) {\n    msg.statusCode = 400;\n    msg.payload = { error: '没有提供要更新的字段' };\n    return [null, msg];\n}\n\n// 添加用户ID作为WHERE条件的参数\nparams.push(userId);\n\nmsg.payload = params;\nmsg.topic = `UPDATE users1 SET ${setClauses.join(', ')} WHERE id = ?`;\n\nreturn [msg, null];\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 620,
        "wires": [
            [
                "b0b7bbddca8ecce6"
            ]
        ]
    },
    {
        "id": "b0b7bbddca8ecce6",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "Update User",
        "x": 550,
        "y": 620,
        "wires": [
            [
                "d6f48a18b4c26137"
            ]
        ]
    },
    {
        "id": "d6f48a18b4c26137",
        "type": "function",
        "z": "514ec94e7d382f6a",
        "name": "Check Update Result",
        "func": "const result = msg.payload;  // 获取前一个节点的结果\nconst userId = msg.req.params.id;  // 获取传入的用户ID\n\n// 判断数据库写入是否成功\nif (result.affectedRows === 0) {\n    msg.statusCode = 404;  // 设置状态码为404，表示写入失败\n    msg.payload = { error: '写入失败，用户不存在' };  // 错误信息\n    return [null, msg];  // 返回错误响应\n}\n\n// 写入成功后，执行查询操作\nmsg.topic = `SELECT * FROM users1 WHERE id = ?`;  // SQL查询语句，使用占位符\nmsg.payload = [userId]; // 作为参数数组传递（注意需要是数组格式）\n\n// 返回查询操作的结果\nreturn [msg, null];  // 返回包含查询操作的消息\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 620,
        "wires": [
            [
                "45934bfdab0feae0"
            ]
        ]
    },
    {
        "id": "45934bfdab0feae0",
        "type": "mysql",
        "z": "514ec94e7d382f6a",
        "mydb": "806ba83c98eb2e99",
        "name": "Get Updated User",
        "x": 950,
        "y": 620,
        "wires": [
            [
                "update-user-response"
            ]
        ]
    },
    {
        "id": "ef91cdfd8e1ece95",
        "type": "debug",
        "z": "514ec94e7d382f6a",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 180,
        "wires": []
    },
    {
        "id": "7bfa113b384b097e",
        "type": "debug",
        "z": "514ec94e7d382f6a",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 180,
        "wires": []
    },
    {
        "id": "119b10b15b07a8a7",
        "type": "debug",
        "z": "514ec94e7d382f6a",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 100,
        "wires": []
    },
    {
        "id": "481ffe7dad64abb3",
        "type": "debug",
        "z": "514ec94e7d382f6a",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 60,
        "wires": []
    },
    {
        "id": "25713032e80df106",
        "type": "debug",
        "z": "514ec94e7d382f6a",
        "name": "debug 30",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 20,
        "wires": []
    },
    {
        "id": "3117fd1cfd6a06ab",
        "type": "debug",
        "z": "514ec94e7d382f6a",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 460,
        "wires": []
    },
    {
        "id": "73b2cd263c03fd18",
        "type": "debug",
        "z": "514ec94e7d382f6a",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 460,
        "wires": []
    },
    {
        "id": "8f6a03f382340ceb",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/reports/dynamicQuery",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 220,
        "wires": [
            [
                "88a95c9bf0a64346"
            ]
        ]
    },
    {
        "id": "f21f1b655ce924d3",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 68",
        "func": "msg.payload = [\n  { label: \"高铁污水厂\", value: \"gt\" },\n  { label: \"五千吨处理站\", value: \"5000\" },\n  { label: \"污泥车间\", value: \"sludge\" },\n  { label: \"附属泵站\", value: \"pump\" },\n]\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "520f5a2473104f16"
            ]
        ]
    },
    {
        "id": "1012787e631f4fd6",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/reportStyles/get",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 280,
        "wires": [
            [
                "f21f1b655ce924d3"
            ]
        ]
    },
    {
        "id": "520f5a2473104f16",
        "type": "http response",
        "z": "f2c8135e089accd7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1290,
        "y": 240,
        "wires": []
    },
    {
        "id": "6d136f5e1b8ebf51",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 69",
        "func": "// 高铁污水厂(gt)的字段定义示例\nconst gtReportFields = {\n  groups: [\n    {\n      id: \"waterInfo\",\n      title: \"进出水情况\",\n      fields: [\n        { key: \"inflow\", label: \"进水流量\", type: \"number\", unit: \"m³\" },\n        { key: \"outflow\", label: \"出水流量\", type: \"number\", unit: \"m³\" },\n        { key: \"in_quality\", label: \"进水水质情况\", type: \"text\"},\n        { key: \"out_quality\",label: \"出水水质情况\",type: \"text\",},\n        { key: \"water_quality_anomalies\", label: \"水质异常\", type: \"text\" }\n      ]\n    },\n    {\n      id: \"equipmentInfo\",\n      title: \"设备运行情况\",\n      fields: [\n        { key: \"equipment_status\", label: \"设备状态\", type: \"text\" },\n        { key: \"equipment_issues\", label: \"设备故障\", type: \"text\" }\n      ]\n    },\n    {\n      id: \"medicineInfo\",\n      title: \"药剂投加情况\",\n      fields: [\n        { key: \"carbon_source\", label: \"碳源投加量\", type: \"number\", unit: \"L\" },\n        { key: \"phosphorus_removal\", label: \"除磷剂投加量\", type: \"number\", unit: \"L\" },\n        { key: \"disinfectant\", label: \"消毒剂投加量\", type: \"number\", unit: \"L\" },\n        { key: \"chemical_effect\", label: \"药剂效果\", type: \"text\" }\n      ]\n    },\n    {\n      id: \"sludgeInfo\",\n      title: \"污泥处理\",\n      fields: [\n        { key: \"sludge_quantity\", label: \"产泥量\", type: \"number\", unit: \"吨\" }\n      ]\n    },\n    {\n      id: \"inspectionInfo\",\n      title: \"巡查工作\",\n      fields: [\n        { key: \"other_notes\", label: \"巡查情况\", type: \"text\" }\n      ]\n    }\n  ],\n  operator: { key: \"operator\", label: \"值班员\", type: \"text\" }\n};\nmsg.payload = gtReportFields;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 40,
        "wires": [
            [
                "520f5a2473104f16"
            ]
        ]
    },
    {
        "id": "dc206ed3eea53d9f",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/reportTypes/get",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 120,
        "wires": [
            [
                "51737d3ec7708fef"
            ]
        ]
    },
    {
        "id": "22fa931335cac561",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 73",
        "func": "// 从 msg.payload 获取查询参数\nconst { startDate, endDate } = msg.req.query; // 假设是传递日期参数\n\n// 验证日期参数\nif (!startDate || !endDate) {\n    msg.payload = { message: '请提供开始和结束日期' };\n    return msg; // 结束\n}\n\n// 构建 SQL 查询\nconst query = `\n    SELECT * FROM daily_report\n    WHERE date BETWEEN ? AND ?\n    ORDER BY date DESC\n`;\n\n// 设置 SQL 查询到 msg.topic，并将参数放入 msg.payload\nmsg.topic = query;\nmsg.payload = [startDate, endDate]; // 查询参数\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 200,
        "wires": [
            [
                "7a23230a38e4841f"
            ]
        ]
    },
    {
        "id": "88a95c9bf0a64346",
        "type": "switch",
        "z": "f2c8135e089accd7",
        "name": "",
        "property": "req.query.reportType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "gt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5000",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sludge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pump",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 490,
        "y": 220,
        "wires": [
            [
                "22fa931335cac561"
            ],
            [
                "987b52a79f9cd20e"
            ],
            [
                "b081799eaea116b2"
            ],
            [
                "e9bdf046d4feb4f7"
            ]
        ]
    },
    {
        "id": "7a23230a38e4841f",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 860,
        "y": 260,
        "wires": [
            [
                "520f5a2473104f16"
            ]
        ]
    },
    {
        "id": "987b52a79f9cd20e",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 72",
        "func": "// 从 msg.payload 获取查询参数\nconst { startDate, endDate } = msg.payload; // 假设是传递日期参数\n\n// 验证日期参数\nif (!startDate || !endDate) {\n    msg.payload = { message: '请提供开始和结束日期' };\n    return msg; // 结束\n}\n\n// 构建 SQL 查询\nconst query = `\n    SELECT * FROM reports5000\n    WHERE date BETWEEN ? AND ?\n    ORDER BY date DESC\n`;\n\n// 设置 SQL 查询到 msg.topic，并将参数放入 msg.payload\nmsg.topic = query;\nmsg.payload = [startDate, endDate]; // 查询参数\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 240,
        "wires": [
            [
                "7a23230a38e4841f"
            ]
        ]
    },
    {
        "id": "51737d3ec7708fef",
        "type": "switch",
        "z": "f2c8135e089accd7",
        "name": "",
        "property": "payload.reportType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "gt",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "5000",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sludge",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "pump",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 470,
        "y": 120,
        "wires": [
            [
                "6d136f5e1b8ebf51"
            ],
            [
                "53cda735274ff8b7"
            ],
            [
                "d6c4bcd2fa48f22d"
            ],
            [
                "b0908386d2a9699c"
            ]
        ]
    },
    {
        "id": "d6c4bcd2fa48f22d",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 74",
        "func": "const gtReportFields = {\n  groups: [\n    {\n      id: \"sludgeInfo\",\n      title: \"污泥处理情况\",\n      fields: [\n        { key: \"sludge_production\", label: \"产泥量\", type: \"number\", unit: \"吨\" },\n      ]\n    },\n    {\n      id: \"medicineInfo\",\n      title: \"药剂投加情况\",\n      fields: [\n        { key: \"pac_dosage\", label: \"PAC投加量\", type: \"number\", unit: \"L\" },\n        { key: \"pam_dosage\", label: \"PAM投加量\", type: \"number\", unit: \"L\" }\n      ]\n    },\n    {\n      id: \"aoPoolInfo\",\n      title: \"AO池浓度监测\",\n      fields: [\n        { key: \"ao_pool_1_concentration\", label: \"AO池1浓度\", type: \"number\", unit: \"mg/L\" },\n        { key: \"ao_pool_2_concentration\", label: \"AO池2浓度\", type: \"number\", unit: \"mg/L\" },\n        { key: \"ao_pool_3_concentration\", label: \"AO池3浓度\", type: \"number\", unit: \"mg/L\" },\n        { key: \"water_content\", label: \"含水率\", type: \"number\", unit: \"%\" }\n      ]\n    },\n    {\n      id: \"equipmentInfo\",\n      title: \"设备运行情况\",\n      fields: [\n        { key: \"equipment_status\", label: \"压滤机运行状态\", type: \"text\" },\n        { key: \"dehydrator_status\", label: \"污泥螺杆泵运行状态\", type: \"text\" },\n        { key: \"belt_filter_status\", label: \"其他设备运行状态\", type: \"text\" }\n      ]\n    },\n    {\n      id: \"inspectionInfo\",\n      title: \"其他情况\",\n      fields: [\n        { key: \"other_notes\", label: \"备注/其他情况\", type: \"text\" }\n      ]\n    }\n  ],\n  operator: { key: \"operator\", label: \"操作员\", type: \"text\" },\n};\n\nmsg.payload = gtReportFields;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 120,
        "wires": [
            [
                "520f5a2473104f16"
            ]
        ]
    },
    {
        "id": "b081799eaea116b2",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 75",
        "func": "// 从 msg.payload 获取查询参数\nconst { startDate, endDate } = msg.payload; // 假设是传递日期参数\n\n// 验证日期参数\nif (!startDate || !endDate) {\n    msg.payload = { message: '请提供开始和结束日期' };\n    return msg; // 结束\n}\n\n// 构建 SQL 查询\nconst query = `\n    SELECT * FROM reports_sludge\n    WHERE date BETWEEN ? AND ?\n    ORDER BY date DESC\n`;\n\n// 设置 SQL 查询到 msg.topic，并将参数放入 msg.payload\nmsg.topic = query;\nmsg.payload = [startDate, endDate]; // 查询参数\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 280,
        "wires": [
            [
                "7a23230a38e4841f"
            ]
        ]
    },
    {
        "id": "53cda735274ff8b7",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 76",
        "func": "\nconst gtReportFields = {\n  groups: [\n    {\n      id: \"waterInfo\",\n      title: \"进出水情况\",\n      fields: [\n        { key: \"inflow\", label: \"进水流量\", type: \"number\", unit: \"m³\" },\n        { key: \"outflow\", label: \"出水流量\", type: \"number\", unit: \"m³\" },\n      ]\n    },\n    {\n      id: \"OutInfo\",\n      title: \"出水水质\",\n      fields: [\n        { key: \"inflow\", label: \"进水流量\", type: \"number\", unit: \"m³\" },\n        { key: \"outflow\", label: \"出水流量\", type: \"number\", unit: \"m³\" },\n        { key: \"out_quality\", label: \"出水水质情况\", type: \"text\", },\n        { key: \"water_quality_anomalies\", label: \"水质异常情况\", type: \"text\", },\n      ]\n    },\n    {\n      id: \"equipmentInfo\",\n      title: \"设备运行情况\",\n      fields: [\n        { key: \"aeration_system_status\", label: \"曝气系统运行状态\", type: \"text\" },\n        { key: \"backwash_system_status\", label: \"反洗系统运行状态\", type: \"text\" },\n        { key: \"inlet_pump_status\", label: \"进水泵系统运行状态\", type: \"text\" },\n        { key: \"magnetic_mixing_status\", label: \"磁混凝运行状态\", type: \"text\" },\n        { key: \"water_tank_status\", label: \"中间水箱与清水箱状态\", type: \"text\" },\n        { key: \"sludge_discharge_status\", label: \"剩余污泥排放情况\", type: \"text\" },        \n        { key: \"other_equipment_status\", label: \"其他设备设施运行情况\", type: \"text\" },     \n      ]\n    },\n    {\n      id: \"medicineInfo\",\n      title: \"药剂投加情况\",\n      fields: [\n        { key: \"flocculant_dosage\", label: \"PAM投加量\", type: \"number\", unit: \"KG\" },\n        { key: \"magnetic_powder_dosage\", label: \"PAC投加量\", type: \"number\", unit: \"L\" },\n        { key: \"magnetic_powder_dosage\", label: \"磁粉投加量\", type: \"number\", unit: \"KG\" },\n        { key: \"chemical_inventory\", label: \"各药剂剩余存量\", type: \"text\" }\n      ]\n    },\n    {\n      id: \"inspectionInfo\",\n      title: \"其他情况\",\n      fields: [\n        { key: \"other_notes\", label: \"其他备注\", type: \"text\" }\n      ]\n    }\n  ],\n  operator: { key: \"operator\", label: \"值班员\", type: \"text\" }\n};\nmsg.payload = gtReportFields;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 80,
        "wires": [
            [
                "520f5a2473104f16"
            ]
        ]
    },
    {
        "id": "e9bdf046d4feb4f7",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 77",
        "func": "// 从 msg.payload 获取查询参数\nconst { startDate, endDate } = msg.payload; // 假设是传递日期参数\n\n// 验证日期参数\nif (!startDate || !endDate) {\n    msg.payload = { message: '请提供开始和结束日期' };\n    return msg; // 结束\n}\n\n// 构建 SQL 查询\nconst query = `\n    SELECT * FROM pump_station_reports\n    WHERE date BETWEEN ? AND ?\n    ORDER BY date DESC\n`;\n\n// 设置 SQL 查询到 msg.topic，并将参数放入 msg.payload\nmsg.topic = query;\nmsg.payload = [startDate, endDate]; // 查询参数\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 320,
        "wires": [
            [
                "7a23230a38e4841f"
            ]
        ]
    },
    {
        "id": "b0908386d2a9699c",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 78",
        "func": "const pumpStationReportFields = {\n  groups: [\n    {\n      id: \"stationInfo\",\n      title: \"泵站基本信息\",\n      fields: [\n        { key: \"station_name\", label: \"泵站名称\", type: \"text\" },\n      ]\n    },\n    {\n      id: \"runningStatus\",\n      title: \"运行状态\",\n      fields: [\n        { key: \"pump_running_status\", label: \"泵站运行情况\", type: \"text\" },\n        { key: \"pump_status\", label: \"水泵运行状态\", type: \"text\" },\n        { key: \"electrical_status\", label: \"电气系统状态\", type: \"text\" },\n        { key: \"pump_tank_status\", label: \"泵池情况\", type: \"text\" }\n      ]\n    },\n    {\n      id: \"inspectionInfo\",\n      title: \"巡查与备注\",\n      fields: [\n        { key: \"abnormal_situations\", label: \"异常情况记录\", type: \"text\" },\n        { key: \"other_notes\", label: \"其他备注\", type: \"text\" }\n      ]\n    }\n  ],\n  operator: { key: \"operator\", label: \"操作员\", type: \"text\" },\n};\n\nmsg.payload = pumpStationReportFields;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 160,
        "wires": [
            [
                "520f5a2473104f16"
            ]
        ]
    },
    {
        "id": "c990a5882e3129da",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/reports5000",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 240,
        "y": 640,
        "wires": [
            [
                "1c4851d31bf33e58"
            ]
        ]
    },
    {
        "id": "1c4851d31bf33e58",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 5",
        "func": "// 获取传入的报告数据\nconst reportData = msg.payload;\n\n// 处理数值转换，确保不会出现 NaN\nconst toDecimal = (value) => {\n    if (value === '' || value === null || value === undefined || isNaN(parseFloat(value))) {\n        return null; // 避免 NaN，插入 NULL\n    }\n    return parseFloat(value);\n};\n\n// 构建 SQL 语句\nconst sql = `\n    INSERT INTO reports5000 (\n        date, operator, inflow, outflow, out_quality,\n        water_quality_anomalies, aeration_system_status,\n        backwash_system_status, inlet_pump_status,\n        magnetic_mixing_status, water_tank_status,\n        sludge_discharge_status, other_equipment_status,\n        flocculant_dosage, magnetic_powder_dosage,\n        chemical_inventory, other_notes, report_id, imagesurl\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n`;\n\n// 构建 SQL 参数\nconst params = [\n    reportData.date || null,\n    reportData.operator || null,\n    toDecimal(reportData.inflow),\n    toDecimal(reportData.outflow),\n    toDecimal(reportData.out_quality),\n    reportData.water_quality_anomalies || null,\n    reportData.aeration_system_status || null,\n    reportData.backwash_system_status || null,\n    reportData.inlet_pump_status || null,\n    reportData.magnetic_mixing_status || null,\n    reportData.water_tank_status || null,\n    reportData.sludge_discharge_status || null,\n    reportData.other_equipment_status || null,\n    toDecimal(reportData.flocculant_dosage),\n    toDecimal(reportData.magnetic_powder_dosage),\n    toDecimal(reportData.chemical_inventory),\n    reportData.other_notes || null,\n    reportData.report_id || null,\n    reportData.imagesurl || null\n];\n\n// 调试输出，检查数据是否正确\nnode.warn({ sql, params });\n\n// 发送到数据库插入节点\nmsg.topic = sql;\nmsg.payload = params;\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 640,
        "wires": [
            [
                "226b76329bae9382"
            ]
        ]
    },
    {
        "id": "226b76329bae9382",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 700,
        "y": 640,
        "wires": [
            [
                "9d4502c25f9bbf9a"
            ]
        ]
    },
    {
        "id": "0eee39f94875745b",
        "type": "http response",
        "z": "f2c8135e089accd7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 640,
        "wires": []
    },
    {
        "id": "9d4502c25f9bbf9a",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 8",
        "func": "if (msg.payload.affectedRows > 0) {\n    msg.payload = {\n        message: '日报数据已成功提交',\n        reportId: msg.payload.insertId\n    };\n    msg.statusCode = 201;  // HTTP 状态码\n} else {\n    msg.payload = { message: '插入数据失败' };\n    msg.statusCode = 500;  // HTTP 状态码\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 640,
        "wires": [
            [
                "0eee39f94875745b"
            ]
        ]
    },
    {
        "id": "ffc2f056213e04c8",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/reports5000/query",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 260,
        "y": 680,
        "wires": [
            [
                "7c7d8449904b5c7c"
            ]
        ]
    },
    {
        "id": "7c7d8449904b5c7c",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 9",
        "func": "// 从 msg.payload 获取查询参数\nconst { startDate, endDate } = msg.payload; // 假设是传递日期参数\n\n// 验证日期参数\nif (!startDate || !endDate) {\n    msg.payload = { message: '请提供开始和结束日期' };\n    return msg; // 结束\n}\n\n// 构建 SQL 查询\nconst query = `\n    SELECT * FROM reports5000\n    WHERE date BETWEEN ? AND ?\n    ORDER BY date DESC\n`;\n\n// 设置 SQL 查询到 msg.topic，并将参数放入 msg.payload\nmsg.topic = query;\nmsg.payload = [startDate, endDate]; // 查询参数\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 680,
        "wires": [
            [
                "442d1b33ce901774"
            ]
        ]
    },
    {
        "id": "442d1b33ce901774",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 700,
        "y": 680,
        "wires": [
            [
                "e2055a9bd7a5e6e1"
            ]
        ]
    },
    {
        "id": "e2055a9bd7a5e6e1",
        "type": "http response",
        "z": "f2c8135e089accd7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 680,
        "wires": []
    },
    {
        "id": "8dd616ed1a5ff90f",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "api/reports",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 230,
        "y": 720,
        "wires": [
            [
                "d74e253178e90917"
            ]
        ]
    },
    {
        "id": "d74e253178e90917",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 12",
        "func": "var time = global.get(\"mariaDBTime\"); \nconst {\n  date, operator, inflow, outflow, in_quality, out_quality, water_quality_anomalies,\n  equipment_status, equipment_issues, carbon_source, phosphorus_removal, disinfectant,\n  chemical_effect, sludge_quantity, other_notes, report_id, imagesurl, created_at\n} = msg.payload;\nvar report = flow.set(\"report\",msg.payload)\n// Prepare the SQL query and parameters\nmsg.topic = `\n  INSERT INTO daily_report (\n    date, operator, inflow, outflow, in_quality, out_quality, water_quality_anomalies,\n    equipment_status, equipment_issues, carbon_source, phosphorus_removal, disinfectant,\n    chemical_effect, sludge_quantity, other_notes, report_id, imagesurl, created_at\n  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n`;\nmsg.payload = [\n  date, operator, inflow, outflow, in_quality, out_quality, water_quality_anomalies,\n  equipment_status, equipment_issues, carbon_source, phosphorus_removal, disinfectant,\n  chemical_effect, sludge_quantity, other_notes, report_id, imagesurl, time\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 720,
        "wires": [
            [
                "5d5427d97494c8d5"
            ]
        ]
    },
    {
        "id": "5d5427d97494c8d5",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 700,
        "y": 720,
        "wires": [
            [
                "566ebb6b2256155d"
            ]
        ]
    },
    {
        "id": "566ebb6b2256155d",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 13",
        "func": "if (msg.payload.affectedRows > 0) {\n    // 成功：第一个输出端口\n    msg.payload = {\n        message: '日报数据已成功提交',\n        reportId: msg.payload.insertId\n    };\n    msg.statusCode = 201;  // HTTP 状态码\n    node.send([msg, null]);  // 成功发送到第一个输出点\n} else {\n    // 失败：第二个输出端口\n    msg.payload = { message: '插入数据失败' };\n    msg.statusCode = 500;  // HTTP 状态码\n    node.send([null, msg]);  // 失败发送到第二个输出点\n}\n\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 720,
        "wires": [
            [
                "2b078ae59da2fd4c"
            ],
            [
                "f37e7fa519840eb5"
            ]
        ]
    },
    {
        "id": "2b078ae59da2fd4c",
        "type": "http response",
        "z": "f2c8135e089accd7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1290,
        "y": 740,
        "wires": []
    },
    {
        "id": "ddb83426755557a2",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "api/reports/query",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 240,
        "y": 780,
        "wires": [
            [
                "dd63142095d0fc04"
            ]
        ]
    },
    {
        "id": "dd63142095d0fc04",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 14",
        "func": "// 从 msg.payload 获取查询参数\nconst { startDate, endDate } = msg.payload; // 假设是传递日期参数\n\n// 验证日期参数\nif (!startDate || !endDate) {\n    msg.payload = { message: '请提供开始和结束日期' };\n    return msg; // 结束\n}\n\n// 构建 SQL 查询\nconst query = `\n    SELECT * FROM daily_report\n    WHERE date BETWEEN ? AND ?\n    ORDER BY date DESC\n`;\n\n// 设置 SQL 查询到 msg.topic，并将参数放入 msg.payload\nmsg.topic = query;\nmsg.payload = [startDate, endDate]; // 查询参数\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 800,
        "wires": [
            [
                "6a312ccc1d74dbe5"
            ]
        ]
    },
    {
        "id": "6a312ccc1d74dbe5",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 700,
        "y": 800,
        "wires": [
            [
                "65a214231bcde630"
            ]
        ]
    },
    {
        "id": "65a214231bcde630",
        "type": "http response",
        "z": "f2c8135e089accd7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 800,
        "wires": []
    },
    {
        "id": "f37e7fa519840eb5",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "备用填报节点",
        "func": "var time = global.get(\"mariaDBTime\"); // 获取数据库时间\n\nvar report = flow.get(\"report\");\nlet {\n    date, operator, inflow, outflow, in_quality, out_quality, water_quality_anomalies,\n    equipment_status, equipment_issues, carbon_source, phosphorus_removal, disinfectant,\n    chemical_effect, sludge_quantity, other_notes, report_id, imagesurl\n} = report;\n\n// === 确保数据格式 ===\n// 确保日期格式正确\nif (!date || isNaN(Date.parse(date))) {\n    let now = new Date();\n    date = now.toISOString().split('T')[0];  // YYYY-MM-DD\n}\n\n// 确保 decimal(10,2) 类型字段正确\nconst ensureDecimal = (value) => {\n    if (typeof value === \"number\") return value.toFixed(2);\n    if (typeof value === \"string\") {\n        let num = parseFloat(value.replace(/[^0-9.]/g, \"\"));\n        return isNaN(num) ? \"0.00\" : num.toFixed(2);\n    }\n    return \"0.00\";\n};\n\ninflow = ensureDecimal(inflow);\noutflow = ensureDecimal(outflow);\ncarbon_source = ensureDecimal(carbon_source);\nphosphorus_removal = ensureDecimal(phosphorus_removal);\ndisinfectant = ensureDecimal(disinfectant);\nsludge_quantity = ensureDecimal(sludge_quantity);\n\n// 确保 varchar 和 text 类型字段正确\nconst ensureString = (value) => (typeof value === \"string\" ? value.trim() : \"\");\n\noperator = ensureString(operator) || \"未填写\";\nin_quality = ensureString(in_quality) || \"正常\";\nout_quality = ensureString(out_quality) || \"正常\";\nwater_quality_anomalies = ensureString(water_quality_anomalies) || \"无异常\";\nequipment_status = ensureString(equipment_status) || \"正常\";\nequipment_issues = ensureString(equipment_issues) || \"无故障\";\nchemical_effect = ensureString(chemical_effect) || \"良好\";\nother_notes = ensureString(other_notes) || \"无备注\";\nreport_id = ensureString(report_id) || `RID-${Date.now()}`;\nimagesurl = ensureString(imagesurl) || \"\";\n\n// === 记录警告 ===\nlet warnings = [];\nif (operator === \"未填写\") warnings.push(\"operator 为空，已设默认值\");\nif (report_id.startsWith(\"RID-\")) warnings.push(\"report_id 为空，已自动生成\");\nif (parseFloat(inflow) === 0.00 || parseFloat(outflow) === 0.00) warnings.push(\"流入流出数据异常\");\n\nif (warnings.length > 0) {\n    node.warn(\"数据格式警告: \" + warnings.join(\"; \"));\n}\n\n// === 构建 SQL ===\nmsg.topic = `\n    INSERT INTO daily_report (\n        date, operator, inflow, outflow, in_quality, out_quality, water_quality_anomalies,\n        equipment_status, equipment_issues, carbon_source, phosphorus_removal, disinfectant,\n        chemical_effect, sludge_quantity, other_notes, report_id, imagesurl, created_at\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n`;\n\nmsg.payload = [\n    date, operator, inflow, outflow, in_quality, out_quality, water_quality_anomalies,\n    equipment_status, equipment_issues, carbon_source, phosphorus_removal, disinfectant,\n    chemical_effect, sludge_quantity, other_notes, report_id, imagesurl, time\n];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 760,
        "wires": [
            [
                "129e88e5b3382692"
            ]
        ]
    },
    {
        "id": "129e88e5b3382692",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 700,
        "y": 760,
        "wires": [
            [
                "34c59dcd0e3503b6"
            ]
        ]
    },
    {
        "id": "34c59dcd0e3503b6",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 20",
        "func": "if (msg.payload.affectedRows > 0) {\n    msg.payload = {\n        message: '日报数据已成功提交（备用填报）',\n        reportId: msg.payload.insertId\n    };\n    msg.statusCode = 201;\n    node.send([msg, null]); // 成功\n} else {\n    msg.payload = { message: '插入数据失败（备用填报也失败）' };\n    msg.statusCode = 500;\n    node.send([null, msg]); // 最终失败\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 760,
        "wires": [
            [
                "2b078ae59da2fd4c"
            ]
        ]
    },
    {
        "id": "6cd7397876493a40",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/reports/exists",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 240,
        "y": 560,
        "wires": [
            [
                "f89e06a743a8e51c"
            ]
        ]
    },
    {
        "id": "f89e06a743a8e51c",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 22",
        "func": "// 获取输入参数\nconst date = msg.payload.date;   // 假设 msg.payload.date 传递的是日期\nconst operator = msg.payload.operator; // 假设 msg.payload.operator 传递的是操作员\n\n// 构建查询语句\nmsg.topic = `\n  SELECT COUNT(*) AS count\n  FROM daily_report\n  WHERE date = ? \n`;\n\n// 设置查询参数\nmsg.payload = [date];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 560,
        "wires": [
            [
                "ae6415098ebe893b"
            ]
        ]
    },
    {
        "id": "ae6415098ebe893b",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 700,
        "y": 560,
        "wires": [
            [
                "62e56c803ee27e5d"
            ]
        ]
    },
    {
        "id": "f54ce29c3cec30e1",
        "type": "http response",
        "z": "f2c8135e089accd7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 560,
        "wires": []
    },
    {
        "id": "62e56c803ee27e5d",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 24",
        "func": "// 假设MySQL查询结果在msg.payload中\nconst count = msg.payload[0].count;  // 获取查询结果的count字段\n\nif (count > 0) {\n    // 找到匹配记录\n    msg.payload = { exists: true };\n} else {\n    // 未找到匹配记录\n    msg.payload = { exists: false };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 560,
        "wires": [
            [
                "f54ce29c3cec30e1"
            ]
        ]
    },
    {
        "id": "db5b5eddfb0d27cb",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/reports5000/exists",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 260,
        "y": 600,
        "wires": [
            [
                "868e64c53e8123d0"
            ]
        ]
    },
    {
        "id": "868e64c53e8123d0",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 23",
        "func": "// 获取输入参数\nconst date = msg.payload.date;   // 假设 msg.payload.date 传递的是日期\nconst operator = msg.payload.operator; // 假设 msg.payload.operator 传递的是操作员\n\n// 构建查询语句\nmsg.topic = `\n  SELECT COUNT(*) AS count\n  FROM reports5000\n  WHERE date = ? \n`;\n\n// 设置查询参数\nmsg.payload = [date];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 600,
        "wires": [
            [
                "fcf3719c08844892"
            ]
        ]
    },
    {
        "id": "fcf3719c08844892",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 700,
        "y": 600,
        "wires": [
            [
                "51686ac4ceaf43dc"
            ]
        ]
    },
    {
        "id": "1f0d06d076e9195e",
        "type": "http response",
        "z": "f2c8135e089accd7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 600,
        "wires": []
    },
    {
        "id": "51686ac4ceaf43dc",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 25",
        "func": "// 假设MySQL查询结果在msg.payload中\nconst count = msg.payload[0].count;  // 获取查询结果的count字段\n\nif (count > 0) {\n    // 找到匹配记录\n    msg.payload = { exists: true };\n} else {\n    // 未找到匹配记录\n    msg.payload = { exists: false };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 600,
        "wires": [
            [
                "1f0d06d076e9195e"
            ]
        ]
    },
    {
        "id": "cda0a3e9773ebaf5",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "api/ReportsSludge",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 250,
        "y": 840,
        "wires": [
            [
                "2c9815fa1dc0b367"
            ]
        ]
    },
    {
        "id": "2c9815fa1dc0b367",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 54",
        "func": "// 获取传入的报告数据\nconst reportData = msg.payload;\n\n// 工具函数：将输入值转为 decimal，避免 NaN\nconst toDecimal = (value) => {\n    if (value === '' || value === null || value === undefined || isNaN(parseFloat(value))) {\n        return null;\n    }\n    return parseFloat(value);\n};\n\n// 构建 SQL 语句\nconst sql = `\n    INSERT INTO reports_sludge (\n        date,\n        operator,\n        sludge_production,\n        pac_dosage,\n        pam_dosage,\n        ao_pool_1_concentration,\n        ao_pool_2_concentration,\n        ao_pool_3_concentration,\n        water_content,\n        equipment_status,\n        dehydrator_status,\n        belt_filter_status,\n        other_notes,\n        report_id,\n        imagesurl,\n        created_at\n    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n`;\n\n// 构建 SQL 参数数组\nconst params = [\n    reportData.date || null,\n    reportData.operator || null,\n    toDecimal(reportData.sludge_production),\n    toDecimal(reportData.pac_dosage),\n    toDecimal(reportData.pam_dosage),\n    toDecimal(reportData.ao_pool_1_concentration),\n    toDecimal(reportData.ao_pool_2_concentration),\n    toDecimal(reportData.ao_pool_3_concentration),\n    toDecimal(reportData.water_content),\n    reportData.equipment_status || null,\n    reportData.dehydrator_status || null,\n    reportData.belt_filter_status || null,\n    reportData.other_notes || null,\n    reportData.report_id || null,\n    reportData.imagesurl || null,\n    reportData.created_at || new Date().toISOString().slice(0, 19).replace('T', ' ') // 如果没传，自动填当前时间\n];\n\n// 设置数据库操作\nmsg.topic = sql;\nmsg.payload = params;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 840,
        "wires": [
            [
                "38aebaf9d2f5300f"
            ]
        ]
    },
    {
        "id": "38aebaf9d2f5300f",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 700,
        "y": 840,
        "wires": [
            [
                "4e6d4c1f2c516b55"
            ]
        ]
    },
    {
        "id": "4e6d4c1f2c516b55",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 55",
        "func": "if (msg.payload.affectedRows > 0) {\n    msg.payload = {\n        message: '日报数据已成功提交',\n        reportId: msg.payload.insertId\n    };\n    msg.statusCode = 201;  // HTTP 状态码\n} else {\n    msg.payload = { message: '插入数据失败' };\n    msg.statusCode = 500;  // HTTP 状态码\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 840,
        "wires": [
            [
                "01968afe073be19c"
            ]
        ]
    },
    {
        "id": "01968afe073be19c",
        "type": "http response",
        "z": "f2c8135e089accd7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 880,
        "wires": []
    },
    {
        "id": "d771a419c9534ae2",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "api/ReportsSludge/exists",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 270,
        "y": 880,
        "wires": [
            [
                "4f3f0f3c73a04b78"
            ]
        ]
    },
    {
        "id": "4f3f0f3c73a04b78",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 56",
        "func": "// 获取输入参数\nconst date = msg.payload.date;   // 假设 msg.payload.date 传递的是日期\nconst operator = msg.payload.operator; // 假设 msg.payload.operator 传递的是操作员\n\n// 构建查询语句\nmsg.topic = `\n  SELECT COUNT(*) AS count\n  FROM reports_sludge\n  WHERE date = ? \n`;\n\n// 设置查询参数\nmsg.payload = [date];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 880,
        "wires": [
            [
                "934c438de2a6b026"
            ]
        ]
    },
    {
        "id": "934c438de2a6b026",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 700,
        "y": 880,
        "wires": [
            [
                "6f8d7ef708a9d33e"
            ]
        ]
    },
    {
        "id": "6f8d7ef708a9d33e",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 57",
        "func": "// 假设MySQL查询结果在msg.payload中\nconst count = msg.payload[0].count;  // 获取查询结果的count字段\n\nif (count > 0) {\n    // 找到匹配记录\n    msg.payload = { exists: true };\n} else {\n    // 未找到匹配记录\n    msg.payload = { exists: false };\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 880,
        "wires": [
            [
                "01968afe073be19c"
            ]
        ]
    },
    {
        "id": "8a794eb0feb66366",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/ReportsSludge/query",
        "method": "get",
        "upload": true,
        "swaggerDoc": "",
        "x": 270,
        "y": 920,
        "wires": [
            [
                "f1c8b6dadf95b789",
                "e5bd279d3480b902"
            ]
        ]
    },
    {
        "id": "f1c8b6dadf95b789",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 58",
        "func": "// 从 msg.payload 获取查询参数\nconst { startDate, endDate } = msg.payload; // 假设是传递日期参数\n\n// 验证日期参数\nif (!startDate || !endDate) {\n    msg.payload = { message: '请提供开始和结束日期' };\n    return msg; // 结束\n}\n\n// 构建 SQL 查询\nconst query = `\n    SELECT * FROM reports_sludge\n    WHERE date BETWEEN ? AND ?\n    ORDER BY date DESC\n`;\n\n// 设置 SQL 查询到 msg.topic，并将参数放入 msg.payload\nmsg.topic = query;\nmsg.payload = [startDate, endDate]; // 查询参数\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 920,
        "wires": [
            [
                "f599fb0ac60330e2"
            ]
        ]
    },
    {
        "id": "f599fb0ac60330e2",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 700,
        "y": 920,
        "wires": [
            [
                "01968afe073be19c"
            ]
        ]
    },
    {
        "id": "1b671de0b4598a45",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/pumpstations",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 980,
        "wires": [
            [
                "5a635b30e9d9de82"
            ]
        ]
    },
    {
        "id": "5a635b30e9d9de82",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 59",
        "func": "var pumpstations = [\n      {\n        \"id\": 1,\n        \"name\": \"侯楼泵站\",\n        \"location\": \"侯楼转盘\",\n        \"status\": \"active\"\n      },\n      {\n        \"id\": 2,\n        \"name\": \"科技泵站\",\n        \"location\": \"科技罐头厂门旁\",\n        \"status\": \"active\"\n      },\n      {\n        \"id\": 3,\n        \"name\": \"西关补水泵站\",\n        \"location\": \"西关城门\",\n        \"status\": \"active\"\n      },\n      {\n        \"id\": 4,\n        \"name\": \"火车站泵站\",\n        \"location\": \"中原路与到北麓交叉口\",\n        \"status\": \"active\"\n      },\n      {\n        \"id\": 5,\n        \"name\": \"401泵站\",\n        \"location\": \"401跨铁路桥下\",\n        \"status\": \"active\"\n      },\n      {\n        \"id\": 6,\n        \"name\": \"谢园泵站\",\n        \"location\": \"道北路南谢园村北边\",\n        \"status\": \"active\"\n      }\n    ]\n\nmsg.payload = pumpstations\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 980,
        "wires": [
            [
                "bbba321919130f81"
            ]
        ]
    },
    {
        "id": "b0f5ce20ff0cc80d",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/pumpreports",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 1020,
        "wires": [
            [
                "947c4999e58f852b"
            ]
        ]
    },
    {
        "id": "bbba321919130f81",
        "type": "http response",
        "z": "f2c8135e089accd7",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1170,
        "y": 1040,
        "wires": []
    },
    {
        "id": "947c4999e58f852b",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 60",
        "func": "// 解构前端传来的字段\nconst {\n\n    report_date,\n    operator,\n    station_name,\n    pump_running_status,\n    pump_status,\n    electrical_status,\n    pump_tank_status,\n    abnormal_situations,\n    other_notes,\n    report_id,\n    imagesurl\n} = msg.payload || {};\n\n// 必填校验\nif (!report_date || !operator || !station_name) {\n    msg.statusCode = 400;\n    msg.payload = {\n        error: \"必填字段缺失\",\n        message: \"report_date, operator, station_name 为必填项\"\n    };\n    return msg;\n}\n\n// 构建 SQL 语句\nmsg.topic = `\n  INSERT INTO pump_station_reports (\n    date,\n    operator,\n    station_name,\n    pump_running_status,\n    pump_status,\n    electrical_status,\n    pump_tank_status,\n    abnormal_situations,\n    other_notes,\n    report_id,\n    imagesurl\n  ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n  ON DUPLICATE KEY UPDATE\n    pump_running_status   = VALUES(pump_running_status),\n    pump_status           = VALUES(pump_status),\n    electrical_status     = VALUES(electrical_status),\n    pump_tank_status      = VALUES(pump_tank_status),\n    abnormal_situations   = VALUES(abnormal_situations),\n    other_notes           = VALUES(other_notes),\n    imagesurl             = VALUES(imagesurl),\n    updated_at            = CURRENT_TIMESTAMP\n`;\n\n// 准备参数数组（与 INSERT 列一一对应）\nmsg.payload = [\n    report_date,              // report_date\n    operator,                 // operator\n    station_name,             // station_name\n    pump_running_status || null,\n    pump_status || null,\n    electrical_status || null,\n    pump_tank_status || null,\n    abnormal_situations || null,\n    other_notes || null,\n    report_id,       // report_id（与 id 保持一致）\n    imagesurl || null\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1020,
        "wires": [
            [
                "1a57509b64f70a75"
            ]
        ]
    },
    {
        "id": "1a57509b64f70a75",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 720,
        "y": 1020,
        "wires": [
            [
                "961043d84fb467ff"
            ]
        ]
    },
    {
        "id": "961043d84fb467ff",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 62",
        "func": "if (msg.payload.affectedRows > 0) {\n    msg.payload = {\n        message: '数据已成功提交',\n        reportId: msg.payload.insertId\n    };\n    msg.statusCode = 201;  // HTTP 状态码\n} else {\n    msg.payload = { message: '插入数据失败' };\n    msg.statusCode = 500;  // HTTP 状态码\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1040,
        "wires": [
            [
                "bbba321919130f81"
            ]
        ]
    },
    {
        "id": "63dc7a652027ad19",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/pumpreports",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 1060,
        "wires": [
            [
                "54707014b5fce91a"
            ]
        ]
    },
    {
        "id": "54707014b5fce91a",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 61",
        "func": "// 从 payload 中解构需要的字段\nconst { report_date, operator, station_name } = msg.payload || {};\n\n// 必填校验\nif (!report_date || !operator || !station_name) {\n  msg.statusCode = 400;\n  msg.payload = {\n    error: \"必填字段缺失\",\n    message: \"report_date, operator, station_name 为必填项\"\n  };\n  return msg;\n}\n\n// 构建查重 SQL\nmsg.topic = `\n  SELECT COUNT(*) AS count\n    FROM pump_station_reports\n   WHERE date   = ?\n     AND operator      = ?\n     AND station_name  = ?\n`;\n\n// 参数数组与 SQL 中的问号一一对应\nmsg.payload = [\n  report_date,\n  operator,\n  station_name\n];\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1060,
        "wires": [
            [
                "4be9b390474c3554"
            ]
        ]
    },
    {
        "id": "4be9b390474c3554",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 720,
        "y": 1060,
        "wires": [
            [
                "bbba321919130f81"
            ]
        ]
    },
    {
        "id": "1a79e3fa01683536",
        "type": "http in",
        "z": "f2c8135e089accd7",
        "name": "",
        "url": "/api/pumpreports/query",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 260,
        "y": 1100,
        "wires": [
            [
                "26a9fc0879db9c28"
            ]
        ]
    },
    {
        "id": "26a9fc0879db9c28",
        "type": "function",
        "z": "f2c8135e089accd7",
        "name": "function 66",
        "func": "// 从 msg.payload 获取查询参数\nconst { startDate, endDate } = msg.payload; // 假设是传递日期参数\n\n// 验证日期参数\nif (!startDate || !endDate) {\n    msg.payload = { message: '请提供开始和结束日期' };\n    return msg; // 结束\n}\n\n// 构建 SQL 查询\nconst query = `\n    SELECT * FROM pump_station_reports\n    WHERE date BETWEEN ? AND ?\n    ORDER BY date DESC\n`;\n\n// 设置 SQL 查询到 msg.topic，并将参数放入 msg.payload\nmsg.topic = query;\nmsg.payload = [startDate, endDate]; // 查询参数\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1100,
        "wires": [
            [
                "3d0e446e7b70025f"
            ]
        ]
    },
    {
        "id": "3d0e446e7b70025f",
        "type": "mysql",
        "z": "f2c8135e089accd7",
        "mydb": "e3d5e9572467c502",
        "name": "",
        "x": 720,
        "y": 1100,
        "wires": [
            [
                "bbba321919130f81"
            ]
        ]
    },
    {
        "id": "e5bd279d3480b902",
        "type": "debug",
        "z": "f2c8135e089accd7",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 960,
        "wires": []
    },
    {
        "id": "e27f51847c0be5f9",
        "type": "inject",
        "z": "7eee9f5f113f7a64",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "17336c8c9d2ac641",
                "4dfd32d0c94b05e7"
            ]
        ]
    },
    {
        "id": "17336c8c9d2ac641",
        "type": "function",
        "z": "7eee9f5f113f7a64",
        "name": "function 70",
        "func": "// 获取当前系统时间（中国标准时间）\nvar now = new Date();\n\n// 提取所需的时间信息\nvar year = now.getFullYear();      // 年\nvar month = now.getMonth() + 1;    // 月（注意月份是从0开始的，所以要加1）\nvar day = now.getDate();           // 日\nvar hour = now.getHours();         // 小时\nvar minute = now.getMinutes();     // 分钟\nvar second = now.getSeconds();     // 秒\nvar dayOfWeek = now.getDay();      // 星期几（0=星期天, 1=星期一, ..., 6=星期六）\n\n// 创建时间字符串（例如：YYYY-MM-DD HH:mm:ss）\nvar formattedTime = year + '-' + ('0' + month).slice(-2) + '-' + ('0' + day).slice(-2) +\n                    ' ' + ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);\n\n// 将时间信息存储为全局变量\nglobal.set(\"cstTime\", {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second,\n    dayOfWeek: dayOfWeek,\n    formattedTime: formattedTime\n});\n\n// 返回消息对象，供调试或后续使用\nmsg.payload = global.get(\"cstTime\");\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "4dfd32d0c94b05e7",
        "type": "function",
        "z": "7eee9f5f113f7a64",
        "name": "function 71",
        "func": "// 获取当前系统时间（中国标准时间）\nvar now = new Date();\n\n// 提取所需的时间信息\nvar year = now.getFullYear();      // 年\nvar month = now.getMonth() + 1;    // 月（注意月份是从0开始的，所以要加1）\nvar day = now.getDate();           // 日\nvar hour = now.getHours();         // 小时\nvar minute = now.getMinutes();     // 分钟\nvar second = now.getSeconds();     // 秒\n\n// 创建适合MariaDB存储的时间字符串（YYYY-MM-DD HH:mm:ss）\nvar mariaDBTime = year + '-' + ('0' + month).slice(-2) + '-' + ('0' + day).slice(-2) +\n    ' ' + ('0' + hour).slice(-2) + ':' + ('0' + minute).slice(-2) + ':' + ('0' + second).slice(-2);\n\n// 将生成的时间字符串存储为全局变量，以便在其他节点中使用\nglobal.set(\"mariaDBTime\", mariaDBTime);\n\n// 将生成的时间字符串作为`msg.payload`返回，供后续节点使用\nmsg.payload = mariaDBTime;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "test-connection-in",
        "type": "http in",
        "z": "db-api-flow",
        "name": "测试数据库连接",
        "url": "/api/database/test-connection",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "prepare-test-connection"
            ]
        ]
    },
    {
        "id": "prepare-test-connection",
        "type": "function",
        "z": "db-api-flow",
        "name": "准备测试连接",
        "func": "// 从请求中获取数据库配置\nconst config = msg.payload;\n\n// 设置MySQL配置\nmsg.connectionConfig = {\n    host: config.host,\n    port: config.port || 3306,\n    user: config.username,\n    password: config.password,\n    database: config.database,\n    multipleStatements: true // 允许多语句查询\n};\n\n// 设置测试查询\nmsg.topic = \"SELECT 1 AS connected; SELECT VERSION() AS version;\";\n\n// 记录开始时间\nmsg.startTime = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 80,
        "wires": [
            [
                "test-connection-mysql"
            ]
        ]
    },
    {
        "id": "test-connection-mysql",
        "type": "mysql2",
        "z": "db-api-flow",
        "name": "测试连接",
        "server": "3ae3711f927f22fc",
        "bind": false,
        "topic": "",
        "x": 520,
        "y": 80,
        "wires": [
            [
                "process-test-result"
            ]
        ]
    },
    {
        "id": "process-test-result",
        "type": "function",
        "z": "db-api-flow",
        "name": "处理测试结果",
        "func": "// 处理查询结果\nconst results = msg.payload;\n\n// 检查是否有结果\nif (Array.isArray(results) && results.length >= 2) {\n    const connected = results[0][0];\n    const version = results[1][0];\n    \n    // 构建响应\n    msg.payload = {\n        success: true,\n        message: '数据库连接成功',\n        responseTime: Date.now() - msg.startTime,\n        data: connected,\n        version: version.version,\n        statusInfo: {\n            // 模拟状态信息\n            Threads_connected: '5',\n            Uptime: '3600',\n            Queries: '1000',\n            Slow_queries: '0'\n        }\n    };\n} else {\n    // 结果格式不正确\n    msg.payload = {\n        success: false,\n        message: '数据库连接测试返回了意外的结果格式',\n        responseTime: Date.now() - msg.startTime\n    };\n}\n\n// 设置CORS头\nmsg.headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, Content-Length, X-Requested-With',\n    'Content-Type': 'application/json'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 80,
        "wires": [
            [
                "test-connection-response"
            ]
        ]
    },
    {
        "id": "test-connection-response",
        "type": "http response",
        "z": "db-api-flow",
        "name": "返回结果",
        "statusCode": "200",
        "headers": {},
        "x": 980,
        "y": 80,
        "wires": []
    },
    {
        "id": "query-in",
        "type": "http in",
        "z": "db-api-flow",
        "name": "执行SQL查询",
        "url": "/api/database/query1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "prepare-query"
            ]
        ]
    },
    {
        "id": "prepare-query",
        "type": "function",
        "z": "db-api-flow",
        "name": "准备查询",
        "func": "// 从请求中获取数据\nconst { config, sql, params, includeFields } = msg.payload;\n\n// 设置MySQL配置\nmsg.connectionConfig = {\n    host: config.host,\n    port: config.port || 3306,\n    user: config.username,\n    password: config.password,\n    database: config.database\n};\n\n// 设置查询\nmsg.topic = sql;\nmsg.params = params || [];\n\n// 保存是否需要包含字段信息\nmsg.includeFields = includeFields;\n\n// 记录开始时间\nmsg.startTime = Date.now();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 180,
        "wires": [
            [
                "execute-query-mysql"
            ]
        ]
    },
    {
        "id": "execute-query-mysql",
        "type": "mysql2",
        "z": "db-api-flow",
        "name": "执行查询",
        "server": "3ae3711f927f22fc",
        "bind": false,
        "topic": "",
        "x": 530,
        "y": 180,
        "wires": [
            [
                "process-query-result",
                "f4f6359bf39019d9"
            ]
        ]
    },
    {
        "id": "process-query-result",
        "type": "function",
        "z": "db-api-flow",
        "name": "处理查询结果",
        "func": "// 计算查询时间\nconst queryTime = Date.now() - msg.startTime;\n\n// 处理查询结果\nconst result = msg.payload;\n\n// 检查结果格式\nif (Array.isArray(result) && result.length >= 1) {\n    const rows = result[0];\n    const fields = result.meta ? result.meta[0] : [];\n    \n    // 构建响应\n    if (msg.includeFields) {\n        // 如果需要包含字段信息\n        msg.payload = {\n            success: true,\n            rows: rows,\n            fields: fields,\n            queryTime: queryTime,\n            rowCount: rows.length\n        };\n    } else {\n        // 只返回行数据\n        msg.payload = {\n            success: true,\n            rows: rows,\n            queryTime: queryTime,\n            rowCount: rows.length\n        };\n    }\n} else {\n    // 结果格式不正确\n    msg.payload = {\n        success: false,\n        message: '查询返回了意外的结果格式',\n        queryTime: queryTime\n    };\n}\n\n// 设置CORS头\nmsg.headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, Content-Length, X-Requested-With',\n    'Content-Type': 'application/json'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 200,
        "wires": [
            [
                "query-response"
            ]
        ]
    },
    {
        "id": "query-response",
        "type": "http response",
        "z": "db-api-flow",
        "name": "返回结果",
        "statusCode": "200",
        "headers": {},
        "x": 960,
        "y": 180,
        "wires": []
    },
    {
        "id": "multi-query-in",
        "type": "http in",
        "z": "db-api-flow",
        "name": "执行多个SQL查询",
        "url": "/api/database/multi-query1",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "prepare-multi-query"
            ]
        ]
    },
    {
        "id": "prepare-multi-query",
        "type": "function",
        "z": "db-api-flow",
        "name": "初始化多查询",
        "func": "// 从请求中获取数据\nconst { config, queries } = msg.payload;\n\n// 设置MySQL配置\nmsg.connectionConfig = {\n    host: config.host,\n    port: config.port || 3306,\n    user: config.username,\n    password: config.password,\n    database: config.database,\n    multipleStatements: true // 允许多语句查询\n};\n\n// 初始化查询状态\nmsg.queries = queries || [];\nmsg.results = [];\n\n// 记录开始时间\nmsg.startTime = Date.now();\n\n// 检查是否有查询\nif (msg.queries.length === 0) {\n    // 没有查询，直接返回空结果\n    msg.payload = {\n        success: true,\n        results: [],\n        queryTime: 0\n    };\n    \n    // 设置CORS头\n    msg.headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type, Authorization, Content-Length, X-Requested-With',\n        'Content-Type': 'application/json'\n    };\n    \n    // 跳过查询执行，直接返回结果\n    return [null, msg];\n}\n\n// 使用事务执行所有查询\nlet combinedSql = \"START TRANSACTION;\";\nlet allParams = [];\n\n// 构建组合SQL\nfor (const query of msg.queries) {\n    combinedSql += \" \" + query.sql + \";\";\n    if (query.params && Array.isArray(query.params)) {\n        allParams = allParams.concat(query.params);\n    }\n}\n\ncombinedSql += \" COMMIT;\";\n\n// 设置查询\nmsg.topic = combinedSql;\nmsg.params = allParams;\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "execute-multi-query-mysql"
            ],
            []
        ]
    },
    {
        "id": "execute-multi-query-mysql",
        "type": "mysql2",
        "z": "db-api-flow",
        "name": "执行多查询",
        "server": "3ae3711f927f22fc",
        "bind": false,
        "topic": "",
        "x": 550,
        "y": 260,
        "wires": [
            [
                "process-multi-query-result"
            ]
        ]
    },
    {
        "id": "process-multi-query-result",
        "type": "function",
        "z": "db-api-flow",
        "name": "处理多查询结果",
        "func": "// 计算查询时间\nconst queryTime = Date.now() - msg.startTime;\n\n// 处理查询结果\nconst results = msg.payload;\n\n// 检查结果格式\nif (Array.isArray(results)) {\n    // 移除事务相关的结果（START TRANSACTION和COMMIT）\n    const queryResults = [];\n    \n    // 提取每个查询的结果\n    for (let i = 1; i < results.length - 1; i++) {\n        queryResults.push(results[i][0]);\n    }\n    \n    // 构建响应\n    msg.payload = {\n        success: true,\n        results: queryResults,\n        queryTime: queryTime\n    };\n} else {\n    // 结果格式不正确\n    msg.payload = {\n        success: false,\n        message: '查询返回了意外的结果格式',\n        queryTime: queryTime\n    };\n}\n\n// 设置CORS头\nmsg.headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, Content-Length, X-Requested-With',\n    'Content-Type': 'application/json'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 260,
        "wires": [
            [
                "multi-query-response"
            ]
        ]
    },
    {
        "id": "multi-query-response",
        "type": "http response",
        "z": "db-api-flow",
        "name": "返回结果",
        "statusCode": "200",
        "headers": {},
        "x": 960,
        "y": 260,
        "wires": []
    },
    {
        "id": "cors-preflight-in",
        "type": "http in",
        "z": "db-api-flow",
        "name": "CORS预检请求",
        "url": "/api/*",
        "method": "options",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "handle-cors"
            ]
        ]
    },
    {
        "id": "handle-cors",
        "type": "function",
        "z": "db-api-flow",
        "name": "处理CORS",
        "func": "// 设置CORS头\nmsg.headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization, Content-Length, X-Requested-With'\n};\n\n// 设置状态码\nmsg.statusCode = 204;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 400,
        "wires": [
            [
                "cors-response"
            ]
        ]
    },
    {
        "id": "cors-response",
        "type": "http response",
        "z": "db-api-flow",
        "name": "返回CORS响应",
        "statusCode": "204",
        "headers": {},
        "x": 560,
        "y": 400,
        "wires": []
    },
    {
        "id": "f4f6359bf39019d9",
        "type": "function",
        "z": "db-api-flow",
        "name": "格式化数据",
        "func": "// 获取查询结果\nconst result = msg.payload;\n\n// 使用Map进行去重（按interval_time去重）\nconst uniqueResults = new Map();\nresult.forEach(row => {\n    const time = row.time;\n    const value = row.gt_in_cod;\n    const intervalTime = row.interval_time;\n\n    // 以interval_time为键，去重\n    if (!uniqueResults.has(intervalTime)) {\n        uniqueResults.set(intervalTime, { time, value });\n    }\n});\n\n// 将去重后的结果转换为数组\nconst formattedResults = Array.from(uniqueResults.values());\n\n// 更新消息负载\nmsg.payload = formattedResults;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 140,
        "wires": [
            [
                "query-response"
            ]
        ]
    },
    {
        "id": "2348129d75075002",
        "type": "http in",
        "z": "db-api-flow",
        "name": "趋势图数据请求",
        "url": "/api/trend-data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 156,
        "y": 500.00000858306885,
        "wires": [
            [
                "858ae97e55833de9"
            ]
        ]
    },
    {
        "id": "b8f2390ddb507b78",
        "type": "mysql",
        "z": "db-api-flow",
        "mydb": "e3d5e9572467c502",
        "name": "查询数据",
        "x": 476,
        "y": 500.00000858306885,
        "wires": [
            [
                "6999f86e7ce83bd8"
            ]
        ]
    },
    {
        "id": "6999f86e7ce83bd8",
        "type": "function",
        "z": "db-api-flow",
        "name": "格式化数据",
        "func": "// 原始数据库查询结果\nconst data = msg.payload;\n\n// 定义字段与中文名称的映射表\nconst fieldMap = {\n    avg_gt_in_ll: \"进水流量（瞬时）\",\n    avg_gt_in_nh3: \"进水氨氮\",\n    avg_gt_in_cod: \"进水COD\",\n    avg_gt_out_ll: \"出水流量（瞬时）\",\n    avg_gt_out_nh3: \"出水氨氮\",\n    avg_gt_out_cod: \"出水COD\",\n    avg_gt_out_tn: \"出水总氮\",\n    avg_gt_out_tp: \"出水总磷\"\n};\n\n// 初始化分类后的结果\nlet result = {};\n\n// 遍历每个字段\nfor (const field in fieldMap) {\n    result[field] = {\n        name: fieldMap[field],\n        field: field,\n        data: []  // 用于存储时间序列\n    };\n}\n\n// 遍历每一条记录（每小时）\nfor (const row of data) {\n    const time = row.hour;\n    for (const field in fieldMap) {\n        if (row.hasOwnProperty(field)) {\n            result[field].data.push({\n                time: time,\n                value: parseFloat(row[field].toFixed(2))\n            });\n        }\n    }\n}\n\n// 最终将分类后的数据转换成数组（便于后续 UI 或图表处理）\nmsg.payload = Object.values(result);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 646,
        "y": 500.00000858306885,
        "wires": [
            [
                "bd518f9ac926055e"
            ]
        ]
    },
    {
        "id": "bd518f9ac926055e",
        "type": "http response",
        "z": "db-api-flow",
        "name": "返回趋势图数据",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 916,
        "y": 500.00000858306885,
        "wires": []
    },
    {
        "id": "858ae97e55833de9",
        "type": "function",
        "z": "db-api-flow",
        "name": "function 7",
        "func": "msg.topic = `\n  SELECT\n    DATE_FORMAT(time, '%Y-%m-%d %H:00:00') AS hour,\n    AVG(gt_in_ll)   AS avg_gt_in_ll,\n    AVG(gt_in_nh3)  AS avg_gt_in_nh3,\n    AVG(gt_in_cod)  AS avg_gt_in_cod,\n    AVG(gt_out_ll)  AS avg_gt_out_ll,\n    AVG(gt_out_nh3) AS avg_gt_out_nh3,\n    AVG(gt_out_cod) AS avg_gt_out_cod,\n    AVG(gt_out_tn)  AS avg_gt_out_tn,\n    AVG(gt_out_tp)  AS avg_gt_out_tp\n  FROM\n    gt_data\n  WHERE\n    time >= NOW() - INTERVAL 24 HOUR\n  GROUP BY\n    DATE_FORMAT(time, '%Y-%m-%d %H:00:00')\n  ORDER BY\n    hour;\n`;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 336,
        "y": 500.00000858306885,
        "wires": [
            [
                "b8f2390ddb507b78"
            ]
        ]
    },
    {
        "id": "calc_fm_srt",
        "type": "function",
        "z": "db-api-flow",
        "name": "计算F/M、SRT、SVI",
        "func": "// === 输入参数 ===\nlet Q = flow.get(\"avg_data.gt_in_ll\");                // m³/d\nlet COD = flow.get(\"avg_data.gt_in_cod\");             // mg/L\nlet SS_out = parseFloat(global.get(\"OUT_SS\"));          // mg/L\nlet SV30 = flow.get(\"sludge_data[0].settling_ratio\"); // mL/L\nlet MLSS = flow.get(\"sludge_data[0].concentration\");  // mg/L\nlet sludge_mass = flow.get(\"daily_data.sludge_quantity\");  // 吨/天\nlet water_content = flow.get(\"sludge_data[1].water_content\"); // %\nlet V = flow.get(\"v\");                                // m³\nlet carbon_dose = flow.get(\"daily_data.carbon_source\"); // L/d\n\n// 新增总氮参数 mg/L\nlet TN_in = flow.get(\"tn_data[0].tn\");\nlet TN_out = flow.get(\"avg_data.gt_out_tn\");\n\n// === 校验 ===\nif ([Q, COD, SS_out, SV30, MLSS, sludge_mass, water_content, V, carbon_dose, TN_in, TN_out].some(v => v === undefined || isNaN(v))) {\n    msg.payload = { error: \"缺少必要参数或格式错误！\" };\n    return msg; // 不 return null，而是继续返回 msg 到 http response\n}\n\n\n// === 核心计算 ===\nlet MLVSS = MLSS * 0.7;\nlet FM = (Q * COD) / (V * MLVSS);\nlet dry_sludge = sludge_mass * 1000 * (1 - water_content / 100);\nlet SS_out_load = Q * SS_out / 1000;\nlet total_mass = V * MLSS / 1000;\nlet SRT = total_mass / (dry_sludge + SS_out_load);\nlet SVI = SV30 * 1000 / MLSS;\n\n// === COD负荷目标计算 ===\nlet target_FM = 0.25; // 可调\nlet target_COD_load = target_FM * V * MLVSS; // mg\nlet target_COD_kg = target_COD_load / 1000; // kg/d\n\n// === 当前碳源COD投加 ===\nlet carbon_COD_kg = carbon_dose * 200 / 1000; // 200g/L = 200000 mg/L\n\n// === 总氮去除效率计算 ===\nlet TN_removal_eff = ((TN_in - TN_out) / TN_in) * 100;\n\n// === 建议 ===\nlet suggestions = [];\n\n// —— F/M 比建议 ——\nif (FM < 0.1) {\n    suggestions.push(\"F/M值为 \" + FM.toFixed(2) + \"，偏低，系统可能碳源不足。建议增加碳源。\");\n}\nif (FM > 0.4) {\n    suggestions.push(\"F/M值为 \" + FM.toFixed(2) + \"，偏高，系统可能负荷过重。可考虑优化进水或碳源控制。\");\n}\n\n// —— SRT 建议 ——\nif (SRT < 8) {\n    suggestions.push(`SRT为 ${SRT.toFixed(1)} 天，偏低。建议减少排泥或增加污泥回流。`);\n} else if (SRT > 20) {\n    suggestions.push(`SRT为 ${SRT.toFixed(1)} 天，偏高。可适当增加排泥量。`);\n}\n\n// —— SVI 建议 ——\nif (SVI > 150) {\n    suggestions.push(`SVI为 ${SVI.toFixed(1)} mL/g，沉降性较差，建议检查泥龄控制或回流系统。`);\n}\n\n// —— 碳源投加建议（定量） ——\nlet carbon_diff_kg = target_COD_kg - carbon_COD_kg;\nlet carbon_diff_L = carbon_diff_kg / 0.2; // 200g/L\n\nif (carbon_diff_L > 1) {\n    suggestions.push(`碳源（乙酸钠）当前投加为 ${carbon_dose} L/d，建议增加 ${carbon_diff_L.toFixed(1)} L/d，以满足目标F/M比 ${target_FM}。`);\n} else if (carbon_diff_L < -1) {\n    suggestions.push(`碳源（乙酸钠）当前投加为 ${carbon_dose} L/d，建议减少 ${Math.abs(carbon_diff_L).toFixed(1)} L/d，避免碳源浪费。`);\n} else {\n    suggestions.push(\"碳源投加接近合理范围，无需调整。\");\n}\n\n// —— 脱氮效率建议 —— \nif (TN_removal_eff < 50) {\n    suggestions.push(`脱氮效率为 ${TN_removal_eff.toFixed(1)}%，远低于合理值（建议 ≥70%）。建议检查碳源充足性、反硝化条件及运行参数。`);\n} else if (TN_removal_eff < 70) {\n    suggestions.push(`脱氮效率为 ${TN_removal_eff.toFixed(1)}%，偏低，建议复查碳源投加和反硝化控制策略。`);\n} else {\n    suggestions.push(`脱氮效率为 ${TN_removal_eff.toFixed(1)}%，表现良好。`);\n}\n\n// === 污泥产量合理性评估 ===\nlet COD_load_kg = Q * COD / 1000; // mg/L -> kg/d\nlet expected_sludge_kg = COD_load_kg * 0.6; // kg/d\nlet expected_sludge_t = expected_sludge_kg / 1000; // 吨/天\n\nlet sludge_range_min = expected_sludge_t * 0.8;\nlet sludge_range_max = expected_sludge_t * 1.2;\n\nif (sludge_mass < sludge_range_min) {\n    let diff = (sludge_range_min - sludge_mass).toFixed(2);\n    suggestions.push(`当前产泥量为 ${sludge_mass} 吨/天，偏少。建议增加产泥量约 ${diff} 吨/天。`);\n} else if (sludge_mass > sludge_range_max) {\n    let diff = (sludge_mass - sludge_range_max).toFixed(2);\n    suggestions.push(`当前产泥量为 ${sludge_mass} 吨/天，偏多。建议减少产泥量约 ${diff} 吨/天。`);\n} else {\n    suggestions.push(\"污泥产量在合理范围内，无需调整。\");\n}\n\n// === 输出 ===\nmsg.payload = {\n    input_data: {\n        Q, COD, SS_out, SV30, MLSS, sludge_mass, water_content, V, carbon_dose, TN_in, TN_out\n    },\n    result: {\n        F_M: parseFloat(FM.toFixed(2)),\n        SRT_days: parseFloat(SRT.toFixed(1)),\n        SVI: parseFloat(SVI.toFixed(1)),\n        carbon_COD_kg: parseFloat(carbon_COD_kg.toFixed(1)),\n        target_COD_kg: parseFloat(target_COD_kg.toFixed(1)),\n        TN_removal_efficiency: parseFloat(TN_removal_eff.toFixed(1)),\n        建议: suggestions\n    }\n};\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1020,
        "wires": [
            [
                "7a90504a96a8fc53"
            ]
        ]
    },
    {
        "id": "75f52ce4e215ccd2",
        "type": "function",
        "z": "db-api-flow",
        "name": "查询实时数据",
        "func": "// 昨天 08:00 到今天 08:00\nconst sql = `\n  SELECT \n    time,\n    gt_in_ll, gt_in_nh3, gt_in_cod,\n     gt_out_ll, gt_out_nh3, gt_out_cod, gt_out_tn, gt_out_tp\n  FROM gt_data\n  WHERE time >= DATE_SUB(CURDATE(), INTERVAL 1 DAY) + INTERVAL 8 HOUR\n    AND time < CURDATE() + INTERVAL 8 HOUR\n  ORDER BY time ASC\n`;\n\nmsg.topic = sql;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 760,
        "wires": [
            [
                "a0a9c2806ebb0353"
            ]
        ]
    },
    {
        "id": "70bf7c73112cb8f5",
        "type": "function",
        "z": "db-api-flow",
        "name": "实时数据平均数",
        "func": "let rows = msg.payload; // 数据数组\nlet sum = {};\nlet count = rows.length;\n\nif (count === 0) {\n    node.warn(\"没有查询到任何数据\");\n    return [[], []];\n}\n\n// 要统计的字段列表\nlet fields = [\n   \"gt_in_ll\", \"gt_in_nh3\", \"gt_in_cod\",\n   \"gt_out_ll\", \"gt_out_nh3\", \"gt_out_cod\",\n   \"gt_out_tn\", \"gt_out_tp\"\n];\n\n// 初始化累加器\nfields.forEach(f => sum[f] = 0);\n\n// 逐行处理\nrows.forEach(row => {\n  if (row.time) {\n    let t = new Date(row.time);\n    t.setHours(t.getHours() + 8);\n    row.time = t.toISOString().replace('T', ' ').slice(0, 19);\n  }\n  fields.forEach(f => {\n    let val = parseFloat(row[f]);\n    if (!isNaN(val)) {\n      sum[f] += val;\n    }\n  });\n});\n\n// 计算平均值（保持为浮点数）\nlet avg = {};\nfields.forEach(f => {\n  avg[f] = parseFloat((sum[f] / count).toFixed(2));\n});\nvar ao = flow.get(\"ao\")\n// 统一做单位换算（*6 和 *3.6*6）\nif (ao === 1 || ao === 2 || ao === 3) {\n  if (!isNaN(avg.gt_in_ll)) avg.gt_in_ll = avg.gt_in_ll * 6;\n  if (!isNaN(avg.gt_out_ll)) avg.gt_out_ll = avg.gt_out_ll * 3.6 * 6;\n\n  // ao=3时再乘以2\n  if (ao === 3) {\n    if (!isNaN(avg.gt_in_ll)) avg.gt_in_ll = avg.gt_in_ll * 2;\n    if (!isNaN(avg.gt_out_ll)) avg.gt_out_ll = avg.gt_out_ll * 2;\n  }\n\n  // 保留两位小数\n  if (!isNaN(avg.gt_in_ll)) avg.gt_in_ll = parseFloat(avg.gt_in_ll.toFixed(2));\n  if (!isNaN(avg.gt_out_ll)) avg.gt_out_ll = parseFloat(avg.gt_out_ll.toFixed(2));\n}\nflow.set(\"avg_data\", avg);\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 760,
        "wires": [
            [
                "aao_sql_function"
            ]
        ]
    },
    {
        "id": "a0a9c2806ebb0353",
        "type": "mysql",
        "z": "db-api-flow",
        "mydb": "e3d5e9572467c502",
        "name": "实时数据",
        "x": 740,
        "y": 760,
        "wires": [
            [
                "70bf7c73112cb8f5"
            ]
        ]
    },
    {
        "id": "aao_sql_function",
        "type": "function",
        "z": "db-api-flow",
        "name": "查询ao池mlss、sv30和污泥压榨含水率",
        "func": "\nvar ao = flow.get(\"ao\")\nlet pool = \"1号ao池\"; // 默认值\nif (ao === 1) {\n  pool = \"1号ao池\";\n} else if (ao === 2) {\n  pool = \"2号ao池\";\n} else if (ao === 3) {\n  pool = \"3号ao池\";\n}\n\nmsg.topic = `\n  SELECT time, sample_name, concentration, settling_ratio, water_content\n  FROM sludge_data\n  WHERE time = CURDATE() - INTERVAL 1 DAY\n    AND sample_name IN ('${pool}', '污泥压榨含水率')\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 840,
        "wires": [
            [
                "aao_mysql"
            ]
        ]
    },
    {
        "id": "aao_mysql",
        "type": "mysql",
        "z": "db-api-flow",
        "mydb": "e3d5e9572467c502",
        "name": "查询污泥化验表",
        "x": 500,
        "y": 840,
        "wires": [
            [
                "80f4ee772636aed4"
            ]
        ]
    },
    {
        "id": "4bd6f9e12d4065d8",
        "type": "function",
        "z": "db-api-flow",
        "name": "查询日报中的污泥产量和药剂投加量",
        "func": "msg.topic = `\nSELECT\n  date,\n  sludge_quantity,\n  carbon_source,\n  phosphorus_removal,\n  disinfectant\nFROM daily_report\nWHERE date >= CURDATE() - INTERVAL 3 DAY;\n`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 940,
        "wires": [
            [
                "20d0c65fcbaf98de"
            ]
        ]
    },
    {
        "id": "20d0c65fcbaf98de",
        "type": "mysql",
        "z": "db-api-flow",
        "mydb": "e3d5e9572467c502",
        "name": "日报数据",
        "x": 500,
        "y": 940,
        "wires": [
            [
                "59b32c83a53461fc"
            ]
        ]
    },
    {
        "id": "59b32c83a53461fc",
        "type": "function",
        "z": "db-api-flow",
        "name": "调整时间",
        "func": "let rows = msg.payload;\n\nrows.forEach(row => {\n  if (row.date) {\n    let t = new Date(row.date);\n    t.setHours(t.getHours() + 8); // 加 8 小时（UTC → 北京时间）\n    row.date = t.toISOString().replace('T', ' ').slice(0, 19); // 格式化\n  }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 940,
        "wires": [
            [
                "0bf84c24144405a0"
            ]
        ]
    },
    {
        "id": "80f4ee772636aed4",
        "type": "function",
        "z": "db-api-flow",
        "name": "调整时间",
        "func": "let rows = msg.payload; // 数据数组\n\nrows.forEach(row => {\n  if (row.time) {\n    let t = new Date(row.time);\n    t.setHours(t.getHours() + 8); // 加 8 小时\n    row.time = t.toISOString().replace('T', ' ').slice(0, 19); // 格式化为 'YYYY-MM-DD HH:mm:ss'\n  }\n});\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 840,
        "wires": [
            [
                "0846db67ac736c93"
            ]
        ]
    },
    {
        "id": "f28286ea7224bbc3",
        "type": "function",
        "z": "db-api-flow",
        "name": "输入好氧池容积",
        "func": "var ao = flow.get(\"ao\")\n// 解析 ao 值\nlet a = parseInt(ao);\n\n// 根据 ao 设置 v 的值\nif (a === 1 || a === 2) {\n    flow.set(\"v\", 1064.5);\n} else if (a === 3) {\n    flow.set(\"v\", 2653.6);\n} else {\n    node.warn(\"未识别的 ao 值\");\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1020,
        "wires": [
            [
                "calc_fm_srt",
                "af20759d9e45ab4b"
            ]
        ]
    },
    {
        "id": "0846db67ac736c93",
        "type": "function",
        "z": "db-api-flow",
        "name": "sludge_data",
        "func": "// 假设 msg.payload 是上面的 JSON\nflow.set(\"sludge_data\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 840,
        "wires": [
            [
                "2efe2ef07d80cd42"
            ]
        ]
    },
    {
        "id": "0bf84c24144405a0",
        "type": "function",
        "z": "db-api-flow",
        "name": "function 86",
        "func": "let rows = msg.payload; // 数据数组\nlet count = rows.length;\n\nif (count === 0) {\n    node.warn(\"没有数据\");\n    return [null, null];\n}\n\nlet sum = {\n    sludge_quantity: 0,\n    carbon_source: 0,\n    phosphorus_removal: 0,\n    disinfectant: 0\n};\n\n// 累加每一行的数值\nrows.forEach(row => {\n    sum.sludge_quantity += parseFloat(row.sludge_quantity) || 0;\n    sum.carbon_source += parseFloat(row.carbon_source) || 0;\n    sum.phosphorus_removal += parseFloat(row.phosphorus_removal) || 0;\n    sum.disinfectant += parseFloat(row.disinfectant) || 0;\n});\n\n// 计算平均值\nlet avg = {};\nfor (let key in sum) {\n    avg[key] = parseFloat((sum[key] / count).toFixed(2));\n}\n\n// 拷贝一份用于缩放处理\nlet scaled = { ...avg };\nvar a = flow.get(\"ao\")\n// 根据 msg.ao 进行缩放\nlet ao = parseInt(a);\nif (ao === 1 || ao === 2) {\n    for (let key in scaled) {\n        scaled[key] = parseFloat((scaled[key] / 3).toFixed(2));\n    }\n} else if (ao === 3) {\n    for (let key in scaled) {\n        scaled[key] = parseFloat((scaled[key] / 2).toFixed(2));\n    }\n}\n\n// 假设 msg.payload 是上面的 JSON\nflow.set(\"daily_data\", scaled);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 940,
        "wires": [
            [
                "f28286ea7224bbc3"
            ]
        ]
    },
    {
        "id": "ca28ac10d3a51528",
        "type": "function",
        "z": "db-api-flow",
        "name": "function 88",
        "func": "\nflow.set(\"ao\",parseFloat(msg.payload.ao));\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 760,
        "wires": [
            [
                "75f52ce4e215ccd2"
            ]
        ]
    },
    {
        "id": "2efe2ef07d80cd42",
        "type": "function",
        "z": "db-api-flow",
        "name": "查询进水总氮",
        "func": "\nmsg.topic = `\nSELECT sample_name, tn, time\nFROM huayan_data\nWHERE sample_name = '高铁厂进水'\n  AND DATE(time) = CURDATE() - INTERVAL 1 DAY;\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 880,
        "wires": [
            [
                "7b1e0fbc520b1ba2"
            ]
        ]
    },
    {
        "id": "7b1e0fbc520b1ba2",
        "type": "mysql",
        "z": "db-api-flow",
        "mydb": "e3d5e9572467c502",
        "name": "查询污泥化验表",
        "x": 380,
        "y": 880,
        "wires": [
            [
                "b9b7f39e150efa4a"
            ]
        ]
    },
    {
        "id": "b9b7f39e150efa4a",
        "type": "function",
        "z": "db-api-flow",
        "name": "调整时间",
        "func": "let rows = msg.payload; // 数据数组\n\nrows.forEach(row => {\n  if (row.time) {\n    let t = new Date(row.time);\n    t.setHours(t.getHours() + 8); // 加 8 小时\n    row.time = t.toISOString().replace('T', ' ').slice(0, 19); // 格式化为 'YYYY-MM-DD HH:mm:ss'\n  }\n});\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 880,
        "wires": [
            [
                "e3099b58e795cb8b"
            ]
        ]
    },
    {
        "id": "e3099b58e795cb8b",
        "type": "function",
        "z": "db-api-flow",
        "name": "tn_data",
        "func": "// 假设 msg.payload 是上面的 JSON\nflow.set(\"tn_data\", msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 880,
        "wires": [
            [
                "4bd6f9e12d4065d8"
            ]
        ]
    },
    {
        "id": "7cb69147b7b08ab3",
        "type": "http in",
        "z": "db-api-flow",
        "name": "",
        "url": "/api/getgongyidata",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 760,
        "wires": [
            [
                "ca28ac10d3a51528"
            ]
        ]
    },
    {
        "id": "7a90504a96a8fc53",
        "type": "http response",
        "z": "db-api-flow",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 1020,
        "wires": []
    },
    {
        "id": "1397edf588902067",
        "type": "http in",
        "z": "db-api-flow",
        "name": "趋势图数据请求",
        "url": "/api/trend-data2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 156,
        "y": 540.0000085830688,
        "wires": [
            [
                "fce3854ab45bd22c"
            ]
        ]
    },
    {
        "id": "fce3854ab45bd22c",
        "type": "function",
        "z": "db-api-flow",
        "name": "function 87",
        "func": "\n\n\n// 昨天 08:00 到今天 08:00\nconst sql = `\n  SELECT\n  id,\n  date,\n  operator,\n  inflow,\n  outflow,\n  in_quality,\n  out_quality,\n  water_quality_anomalies,\n  equipment_status,\n  equipment_issues,\n  carbon_source,\n  phosphorus_removal,\n  disinfectant,\n  chemical_effect,\n  sludge_quantity,\n  other_notes,\n  report_id,\n  imagesurl,\n  created_at\nFROM daily_report\nWHERE date >= CURDATE() - INTERVAL 7 DAY\nORDER BY date ASC\n`;\nmsg.topic = sql;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 326,
        "y": 540.0000085830688,
        "wires": [
            [
                "8a99d933237306ce"
            ]
        ]
    },
    {
        "id": "8a99d933237306ce",
        "type": "mysql",
        "z": "db-api-flow",
        "mydb": "e3d5e9572467c502",
        "name": "日报数据",
        "x": 476,
        "y": 540.0000085830688,
        "wires": [
            [
                "98d702470616371b"
            ]
        ]
    },
    {
        "id": "98d702470616371b",
        "type": "function",
        "z": "db-api-flow",
        "name": "调整时间",
        "func": "let rows = msg.payload;\n\nrows.forEach(row => {\n  if (row.date) {\n    let t = new Date(row.date);\n    t.setHours(t.getHours() + 8); // 加 8 小时（UTC → 北京时间）\n    row.date = t.toISOString().replace('T', ' ').slice(0, 19); // 格式化\n  }\n});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 616,
        "y": 540.0000085830688,
        "wires": [
            [
                "8e6980b25babb8bd",
                "ceff7fafa36ff482"
            ]
        ]
    },
    {
        "id": "8e6980b25babb8bd",
        "type": "function",
        "z": "db-api-flow",
        "name": "function 89",
        "func": "let rows = msg.payload;\nlet raw = [];\n\nrows.forEach(row => {\n    let in_quality = row.in_quality || '';\n    let out_quality = row.out_quality || '';\n\n    let data = {\n        time: row.date,  // ✅ 改为 time 字段，适配统一结构\n        operator: row.operator,\n\n        inflow: parseFloat(row.inflow),\n        outflow: parseFloat(row.outflow),\n\n        in_cod_avg: parseFloat((in_quality.match(/进水COD平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n        in_cod_max: parseFloat((in_quality.match(/最高COD(\\d+(\\.\\d+)?)/) || [])[1]),\n        in_nh3_avg: parseFloat((in_quality.match(/氨氮平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n\n        out_cod_avg: parseFloat((out_quality.match(/COD平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n        out_nh3_avg: parseFloat((out_quality.match(/氨氮平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n        out_tp_avg: parseFloat((out_quality.match(/总磷平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n        out_tn_avg: parseFloat((out_quality.match(/总氮平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n\n        carbon_source: parseFloat(row.carbon_source),\n        phosphorus_removal: parseFloat(row.phosphorus_removal),\n        disinfectant: parseFloat(row.disinfectant),\n\n        sludge_quantity: parseFloat(row.sludge_quantity)\n    };\n\n    raw.push(data);\n});\n\n// ✅ 字段映射表（英文键 → 中文字段名）\nconst labelMap = {\n    inflow: \"进水流量 (m³/d)\",\n    outflow: \"出水流量 (m³/d)\",\n    in_cod_avg: \"进水COD平均值\",\n    in_cod_max: \"进水COD最大值\",\n    in_nh3_avg: \"进水氨氮平均值\",\n    out_cod_avg: \"出水COD平均值\",\n    out_nh3_avg: \"出水氨氮平均值\",\n    out_tp_avg: \"出水总磷平均值\",\n    out_tn_avg: \"出水总氮平均值\",\n    carbon_source: \"碳源投加量 (L/d)\",\n    phosphorus_removal: \"除磷剂投加量 (L/d)\",\n    disinfectant: \"消毒剂投加量 (L/d)\",\n    sludge_quantity: \"污泥产量 (吨/d)\"\n};\n\nlet output = [];\n\n// ✅ 将 raw 中的数据格式化为：以时间为主键，字段为中文名\nraw.forEach(row => {\n    let formatted = { time: row.time };\n    for (let key in labelMap) {\n        if (!isNaN(row[key])) {\n            formatted[labelMap[key]] = row[key];\n        }\n    }\n    output.push(formatted);\n});\n\nmsg.payload = output;\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 766,
        "y": 540.0000085830688,
        "wires": [
            [
                "bd518f9ac926055e"
            ]
        ]
    },
    {
        "id": "ceff7fafa36ff482",
        "type": "function",
        "z": "db-api-flow",
        "name": "function 40",
        "func": "let rows = msg.payload;\nlet raw = [];\n\nrows.forEach(row => {\n    let in_quality = row.in_quality || '';\n    let out_quality = row.out_quality || '';\n\n    let data = {\n        date: row.date,\n        operator: row.operator,\n\n        // ✅ 进出水水量\n        inflow: parseFloat(row.inflow),\n        outflow: parseFloat(row.outflow),\n\n        // ✅ 进水水质\n        in_cod_avg: parseFloat((in_quality.match(/进水COD平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n        in_cod_max: parseFloat((in_quality.match(/最高COD(\\d+(\\.\\d+)?)/) || [])[1]),\n        in_nh3_avg: parseFloat((in_quality.match(/氨氮平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n\n        // ✅ 出水水质\n        out_cod_avg: parseFloat((out_quality.match(/COD平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n        out_nh3_avg: parseFloat((out_quality.match(/氨氮平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n        out_tp_avg: parseFloat((out_quality.match(/总磷平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n        out_tn_avg: parseFloat((out_quality.match(/总氮平均值(\\d+(\\.\\d+)?)/) || [])[1]),\n\n        // ✅ 药剂投加\n        carbon_source: parseFloat(row.carbon_source),\n        phosphorus_removal: parseFloat(row.phosphorus_removal),\n        disinfectant: parseFloat(row.disinfectant),\n\n        // ✅ 污泥产量\n        sludge_quantity: parseFloat(row.sludge_quantity)\n    };\n\n    raw.push(data);\n});\n\n// ✅ 字段映射表\nconst labelMap = {\n    inflow: \"进水流量 (m³/d)\",\n    outflow: \"出水流量 (m³/d)\",\n    in_cod_avg: \"进水COD平均值\",\n    in_cod_max: \"进水COD最大值\",\n    in_nh3_avg: \"进水氨氮平均值\",\n    out_cod_avg: \"出水COD平均值\",\n    out_nh3_avg: \"出水氨氮平均值\",\n    out_tp_avg: \"出水总磷平均值\",\n    out_tn_avg: \"出水总氮平均值\",\n    carbon_source: \"碳源投加量 (L/d)\",\n    phosphorus_removal: \"除磷剂投加量 (L/d)\",\n    disinfectant: \"消毒剂投加量 (L/d)\",\n    sludge_quantity: \"污泥产量 (吨/d)\"\n};\n\nconst keys = Object.keys(labelMap);\n\n// 构造系列数组（使用中文名）\nlet series = keys.map(key => ({\n    name: labelMap[key],\n    data: []\n}));\n\n// 填充每个系列的数据\nraw.forEach(row => {\n    keys.forEach(key => {\n        const value = row[key];\n        if (!isNaN(value)) {\n            const label = labelMap[key];\n            const seriesItem = series.find(s => s.name === label);\n            seriesItem.data.push({ time: row.date, value });\n        }\n    });\n});\n\nmsg.payload = series;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 766,
        "y": 600.0000085830688,
        "wires": [
            []
        ]
    },
    {
        "id": "ea4eb2116b197a68",
        "type": "function",
        "z": "db-api-flow",
        "name": "function 83",
        "func": "// === 输入参数 ===\n// 获取原始参数并检查存在性及数值有效性\nconst rawParams = {\n    'avg_data.gt_in_ll': flow.get(\"avg_data.gt_in_ll\"),\n    'avg_data.gt_in_cod': flow.get(\"avg_data.gt_in_cod\"),\n    'OUT_SS': global.get(\"OUT_SS\"),\n    'sludge_data[0].settling_ratio': flow.get(\"sludge_data[0].settling_ratio\"),\n    'sludge_data[0].concentration': flow.get(\"sludge_data[0].concentration\"),\n    'daily_data.sludge_quantity': flow.get(\"daily_data.sludge_quantity\"),\n    'sludge_data[1].water_content': flow.get(\"sludge_data[1].water_content\"),\n    'v': flow.get(\"v\"),\n    'daily_data.carbon_source': flow.get(\"daily_data.carbon_source\"),\n    'tn_data[0].tn': flow.get(\"tn_data[0].tn\"),\n    'avg_data.gt_out_tn': flow.get(\"avg_data.gt_out_tn\")\n};\n\nlet missing = [];  // 存储缺失参数\nlet invalid = [];  // 存储无效数值参数\n\n// 参数校验\nObject.entries(rawParams).forEach(([key, value]) => {\n    if (value === undefined || value === null) {\n        missing.push(key);\n    } else {\n        // 尝试转换为数值\n        const numVal = parseFloat(value);\n        if (isNaN(numVal)) {\n            invalid.push(key);\n        }\n    }\n});\n\n// 构造错误信息\nif (missing.length > 0 || invalid.length > 0) {\n    let errorMsg = \"\";\n    if (missing.length > 0) {\n        errorMsg += `缺少以下参数：${missing.join(\"，\")}。`;\n    }\n    if (invalid.length > 0) {\n        errorMsg += `以下参数格式错误（非数值）：${invalid.join(\"，\")}。`;\n    }\n    msg.payload = { error: errorMsg };\n    return msg;\n}\n\n// === 参数预处理 ===\nlet Q = parseFloat(rawParams['avg_data.gt_in_ll']);               // m³/d\nlet COD = parseFloat(rawParams['avg_data.gt_in_cod']);            // mg/L\nlet SS_out = parseFloat(rawParams['OUT_SS']);                     // mg/L\nlet SV30 = parseFloat(rawParams['sludge_data[0].settling_ratio']) * 10; // mL/L\nlet MLSS = parseFloat(rawParams['sludge_data[0].concentration']); // mg/L\nlet sludge_mass = parseFloat(rawParams['daily_data.sludge_quantity']); // 吨/天\nlet water_content = parseFloat(rawParams['sludge_data[1].water_content']); // %\nlet V = parseFloat(rawParams['v']);                               // m³\nlet carbon_dose = parseFloat(rawParams['daily_data.carbon_source']); // L/d\nlet TN_in = parseFloat(rawParams['tn_data[0].tn']);               // mg/L\nlet TN_out = parseFloat(rawParams['avg_data.gt_out_tn']);         // mg/L\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "af20759d9e45ab4b",
        "type": "function",
        "z": "db-api-flow",
        "name": "计算F/M、SRT、SVI",
        "func": "// === 输入参数 ===\n// 获取原始参数并检查存在性及数值有效性\nconst rawParams = {\n    'avg_data.gt_in_ll': flow.get(\"avg_data.gt_in_ll\"),\n    'avg_data.gt_in_cod': flow.get(\"avg_data.gt_in_cod\"),\n    'OUT_SS': global.get(\"OUT_SS\"),\n    'sludge_data[0].settling_ratio': flow.get(\"sludge_data[0].settling_ratio\"),\n    'sludge_data[0].concentration': flow.get(\"sludge_data[0].concentration\"),\n    'daily_data.sludge_quantity': flow.get(\"daily_data.sludge_quantity\"),\n    'sludge_data[1].water_content': flow.get(\"sludge_data[1].water_content\"),\n    'v': flow.get(\"v\"),\n    'daily_data.carbon_source': flow.get(\"daily_data.carbon_source\"),\n    'tn_data[0].tn': flow.get(\"tn_data[0].tn\"),\n    'avg_data.gt_out_tn': flow.get(\"avg_data.gt_out_tn\")\n};\n\nlet missing = [];  // 存储缺失参数\nlet invalid = [];  // 存储无效数值参数\n\n// 参数校验\nObject.entries(rawParams).forEach(([key, value]) => {\n    if (value === undefined || value === null) {\n        missing.push(key);\n    } else {\n        // 尝试转换为数值\n        const numVal = parseFloat(value);\n        if (isNaN(numVal)) {\n            invalid.push(key);\n        }\n    }\n});\n\n// 构造错误信息\nif (missing.length > 0 || invalid.length > 0) {\n    let errorMsg = \"\";\n    if (missing.length > 0) {\n        errorMsg += `缺少以下参数：${missing.join(\"，\")}。`;\n    }\n    if (invalid.length > 0) {\n        errorMsg += `以下参数格式错误（非数值）：${invalid.join(\"，\")}。`;\n    }\n    msg.payload = { error: errorMsg };\n    return msg;\n}\n\n// === 参数预处理 ===\nlet Q = parseFloat(rawParams['avg_data.gt_in_ll']);               // m³/d\nlet COD = parseFloat(rawParams['avg_data.gt_in_cod']);            // mg/L\nlet SS_out = parseFloat(rawParams['OUT_SS']);                     // mg/L\nlet SV30 = parseFloat(rawParams['sludge_data[0].settling_ratio']) * 10; // mL/L\nlet MLSS = parseFloat(rawParams['sludge_data[0].concentration']); // mg/L\nlet sludge_mass = parseFloat(rawParams['daily_data.sludge_quantity']); // 吨/天\nlet water_content = parseFloat(rawParams['sludge_data[1].water_content']); // %\nlet V = parseFloat(rawParams['v']);                               // m³\nlet carbon_dose = parseFloat(rawParams['daily_data.carbon_source']); // L/d\nlet TN_in = parseFloat(rawParams['tn_data[0].tn']);               // mg/L\nlet TN_out = parseFloat(rawParams['avg_data.gt_out_tn']);         // mg/L\n\n\n\n// === 核心计算 ===\nlet MLVSS = MLSS * 0.7;\nlet FM = (Q * COD) / (V * MLVSS);\nlet dry_sludge = sludge_mass * 1000 * (1 - water_content / 100);\nlet SS_out_load = Q * SS_out / 1000;\nlet total_mass = V * MLSS / 1000;\nlet SRT = total_mass / (dry_sludge + SS_out_load);\nlet SVI = SV30 * 1000 / MLSS;\n\n// === COD负荷目标计算 ===\nlet target_FM = 0.25; // 可调\nlet target_COD_load = target_FM * V * MLVSS; // mg\nlet target_COD_kg = target_COD_load / 1000; // kg/d\n\n// === 当前碳源COD投加 ===\nlet carbon_COD_kg = carbon_dose * 200 / 1000; // 200g/L = 200000 mg/L\n\n// === 总氮去除效率计算 ===\nlet TN_removal_eff = ((TN_in - TN_out) / TN_in) * 100;\n\n// === 建议 ===\nlet suggestions = [];\n\n// —— F/M 比建议 ——\nif (FM < 0.1) {\n    suggestions.push(\"F/M值为 \" + FM.toFixed(2) + \"，偏低，系统可能碳源不足。建议增加碳源。\");\n}\nif (FM > 0.4) {\n    suggestions.push(\"F/M值为 \" + FM.toFixed(2) + \"，偏高，系统可能负荷过重。可考虑优化进水或碳源控制。\");\n}\n\n// —— SRT 建议 ——\nif (SRT < 8) {\n    suggestions.push(`SRT为 ${SRT.toFixed(1)} 天，偏低。建议减少排泥或增加污泥回流。`);\n} else if (SRT > 20) {\n    suggestions.push(`SRT为 ${SRT.toFixed(1)} 天，偏高。可适当增加排泥量。`);\n}\n\n// —— SVI 建议 ——\nif (SVI > 150) {\n    suggestions.push(`SVI为 ${SVI.toFixed(1)} mL/g，沉降性较差，建议检查泥龄控制或回流系统。`);\n}\n\n// —— 碳源投加建议（定量） ——\nlet carbon_diff_kg = target_COD_kg - carbon_COD_kg;\nlet carbon_diff_L = carbon_diff_kg / 0.2; // 200g/L\n\nif (carbon_diff_L > 1) {\n    suggestions.push(`碳源（乙酸钠）当前投加为 ${carbon_dose} L/d，建议增加 ${carbon_diff_L.toFixed(1)} L/d，以满足目标F/M比 ${target_FM}。`);\n} else if (carbon_diff_L < -1) {\n    suggestions.push(`碳源（乙酸钠）当前投加为 ${carbon_dose} L/d，建议减少 ${Math.abs(carbon_diff_L).toFixed(1)} L/d，避免碳源浪费。`);\n} else {\n    suggestions.push(\"碳源投加接近合理范围，无需调整。\");\n}\n\n// —— 脱氮效率建议 —— \nif (TN_removal_eff < 50) {\n    suggestions.push(`脱氮效率为 ${TN_removal_eff.toFixed(1)}%，远低于合理值（建议 ≥70%）。建议检查碳源充足性、反硝化条件及运行参数。`);\n} else if (TN_removal_eff < 70) {\n    suggestions.push(`脱氮效率为 ${TN_removal_eff.toFixed(1)}%，偏低，建议复查碳源投加和反硝化控制策略。`);\n} else {\n    suggestions.push(`脱氮效率为 ${TN_removal_eff.toFixed(1)}%，表现良好。`);\n}\n\n// === 污泥产量合理性评估 ===\nlet COD_load_kg = Q * COD / 1000; // mg/L -> kg/d\nlet expected_sludge_kg = COD_load_kg * 0.6; // kg/d\nlet expected_sludge_t = expected_sludge_kg / 1000; // 吨/天\n\nlet sludge_range_min = expected_sludge_t * 0.8;\nlet sludge_range_max = expected_sludge_t * 1.2;\n\nif (sludge_mass < sludge_range_min) {\n    let diff = (sludge_range_min - sludge_mass).toFixed(2);\n    suggestions.push(`当前产泥量为 ${sludge_mass} 吨/天，偏少。建议增加产泥量约 ${diff} 吨/天。`);\n} else if (sludge_mass > sludge_range_max) {\n    let diff = (sludge_mass - sludge_range_max).toFixed(2);\n    suggestions.push(`当前产泥量为 ${sludge_mass} 吨/天，偏多。建议减少产泥量约 ${diff} 吨/天。`);\n} else {\n    suggestions.push(\"污泥产量在合理范围内，无需调整。\");\n}\n\n// === 输出 ===\nmsg.payload = {\n    input_data: {\n        Q, COD, SS_out, SV30, MLSS, sludge_mass, water_content, V, carbon_dose, TN_in, TN_out\n    },\n    result: {\n        F_M: parseFloat(FM.toFixed(2)),\n        SRT_days: parseFloat(SRT.toFixed(1)),\n        SVI: parseFloat(SVI.toFixed(1)),\n        carbon_COD_kg: parseFloat(carbon_COD_kg.toFixed(1)),\n        target_COD_kg: parseFloat(target_COD_kg.toFixed(1)),\n        TN_removal_efficiency: parseFloat(TN_removal_eff.toFixed(1)),\n        建议: suggestions\n    }\n};\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "82885cc919d7c016",
        "type": "http in",
        "z": "db-api-flow",
        "name": "站点趋势图数据请求",
        "url": "/api/get-sitet1-trenddata",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "5551bcca5944d9cc"
            ]
        ]
    },
    {
        "id": "5551bcca5944d9cc",
        "type": "switch",
        "z": "db-api-flow",
        "name": "",
        "property": "payload.siteId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 1240,
        "wires": [
            [
                "135bf4c8b53cb3a2"
            ]
        ]
    },
    {
        "id": "603485649d17acf5",
        "type": "function",
        "z": "db-api-flow",
        "name": "查询实时数据",
        "func": "const { dataPointId, startTime, endTime, requestId } = msg.payload;\n\n// 校验必填参数\nif (!dataPointId || !startTime || !endTime) {\n  msg.payload = {\n    success: false,\n    error: '缺少 dataPointId、startTime 或 endTime 参数'\n  };\n  return msg;\n}\n\n// 数据表名（请替换为你自己的表名）\nconst tableName = \"gt_data\";\n\n// 构建 SQL 查询语句\nmsg.topic = `\n  SELECT time, ${dataPointId}\n  FROM ${tableName}\n  WHERE time BETWEEN '${startTime}' AND '${endTime}'\n  ORDER BY time ASC\n`;\n\n// 把 requestId 也带下去供后续节点使用（可选）\nmsg.requestId = requestId;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1220,
        "wires": [
            [
                "996da2692e129d8e"
            ]
        ]
    },
    {
        "id": "996da2692e129d8e",
        "type": "mysql",
        "z": "db-api-flow",
        "mydb": "e3d5e9572467c502",
        "name": "实时数据",
        "x": 660,
        "y": 1260,
        "wires": [
            [
                "24342c70d7b9217e"
            ]
        ]
    },
    {
        "id": "a0b050f7beb68456",
        "type": "http response",
        "z": "db-api-flow",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 1180,
        "wires": []
    },
    {
        "id": "get_data_points",
        "type": "function",
        "z": "db-api-flow",
        "name": "获取数据点",
        "func": "msg.payload = {\n  success: true,\n  data: [\n    { id: 'gt_in_lj', name: '进水累计', unit: 'm³' },\n    { id: 'gt_in_ll', name: '进水流量', unit: 'm³/h' },\n    { id: 'gt_in_nh3', name: '进水氨氮', unit: 'mg/L' },\n    { id: 'gt_in_cod', name: '进水COD', unit: 'mg/L' },\n    { id: 'gt_out_lj', name: '出水累计', unit: 'm³' },\n    { id: 'gt_out_ll', name: '出水流量', unit: 'm³/h' },\n    { id: 'gt_out_nh3', name: '出水氨氮', unit: 'mg/L' },\n    { id: 'gt_out_cod', name: '出水COD', unit: 'mg/L' },\n    { id: 'gt_out_tn', name: '出水总氮', unit: 'mg/L' },\n    { id: 'gt_out_tp', name: '出水总磷', unit: 'mg/L' }\n  ]\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1180,
        "wires": [
            [
                "a0b050f7beb68456"
            ]
        ]
    },
    {
        "id": "135bf4c8b53cb3a2",
        "type": "switch",
        "z": "db-api-flow",
        "name": "",
        "property": "payload.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "getDataPoints",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "getTrendData",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 1240,
        "wires": [
            [
                "get_data_points"
            ],
            [
                "603485649d17acf5"
            ]
        ]
    },
    {
        "id": "24342c70d7b9217e",
        "type": "function",
        "z": "db-api-flow",
        "name": "function 90",
        "func": "const rows = msg.payload;\n\n// 动态识别除 \"time\" 以外的字段名（例如 gt_in_lj）\nconst dataPointId = rows.length > 0\n  ? Object.keys(rows[0]).find(key => key !== 'time')\n  : null;\n\n// 如果数据为空或字段未识别，返回错误\nif (!dataPointId) {\n  msg.payload = {\n    success: false,\n    error: '查询结果为空或未识别到有效字段'\n  };\n  return msg;\n}\n\n// 拆分时间和值数组\nconst times = rows.map(row => row.time);\nconst values = rows.map(row => row[dataPointId]);\n\n// 构造前端需要的格式\nmsg.payload = {\n  success: true,\n  data: {\n    times,\n    values\n  }\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1260,
        "wires": [
            [
                "a0b050f7beb68456"
            ]
        ]
    },
    {
        "id": "a608ae966e36c7d3",
        "type": "http in",
        "z": "db-api-flow",
        "name": "获取数据库表列表",
        "url": "/api/database/tables",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1440,
        "wires": [
            [
                "fda503144289ffb8"
            ]
        ]
    },
    {
        "id": "fda503144289ffb8",
        "type": "function",
        "z": "db-api-flow",
        "name": "查询所有表",
        "func": "// 连接MariaDB/MySQL并获取所有表\nconst query = \"SHOW TABLES\";\n\n// 调用MariaDB节点\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1440,
        "wires": [
            [
                "82c42657eecfc838"
            ]
        ]
    },
    {
        "id": "82c42657eecfc838",
        "type": "mysql",
        "z": "db-api-flow",
        "mydb": "e3d5e9572467c502",
        "name": "MariaDB查询",
        "x": 550,
        "y": 1440,
        "wires": [
            [
                "c20b123f855a0ef1"
            ]
        ]
    },
    {
        "id": "c20b123f855a0ef1",
        "type": "function",
        "z": "db-api-flow",
        "name": "格式化表格数据",
        "func": "// 处理数据库返回的表格数据\nconst tables = msg.payload;\n\n// 格式化表数据为前端需要的格式\nconst formattedTables = [];\n\n// 遍历所有表\nfor (const table of tables) {\n    const tableName = Object.values(table)[0]; // 获取表名\n    \n    // 创建表格对象\n    formattedTables.push({\n        name: tableName,\n        label: formatTableName(tableName), // 格式化表名为显示名称\n        description: getTableDescription(tableName)\n    });\n}\n\n// 格式化表名为显示名称的函数\nfunction formatTableName(tableName) {\n    // 替换下划线为空格，首字母大写\n    return tableName\n        .split('_')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// 获取表描述的函数(可以根据业务逻辑扩展)\nfunction getTableDescription(tableName) {\n    const descriptions = {\n        'water_quality': '水质数据表',\n        'flow_data': '流量数据表',\n        'energy_consumption': '能耗数据表',\n        'equipment_status': '设备状态表',\n        'maintenance_records': '维护记录表',\n        'alarm_logs': '报警记录表'\n    };\n    \n    return descriptions[tableName] || `${formatTableName(tableName)}数据表`;\n}\n\n// 返回API响应\nmsg.payload = {\n    success: true,\n    message: '获取表格列表成功',\n    data: formattedTables\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1440,
        "wires": [
            [
                "2027a83386b5ed3b"
            ]
        ]
    },
    {
        "id": "2027a83386b5ed3b",
        "type": "http response",
        "z": "db-api-flow",
        "name": "返回表格列表",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 990,
        "y": 1440,
        "wires": []
    },
    {
        "id": "09cd4799b48053ae",
        "type": "http in",
        "z": "db-api-flow",
        "name": "获取表字段",
        "url": "/api/database/fields",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1520,
        "wires": [
            [
                "7fbc129dc193b79c"
            ]
        ]
    },
    {
        "id": "7fbc129dc193b79c",
        "type": "function",
        "z": "db-api-flow",
        "name": "验证输入参数",
        "func": "// 验证是否提供了表名\nif (!msg.req.query.tableName) {\n    msg.statusCode = 400;\n    msg.payload = {\n        success: false,\n        message: '缺少必需的tableName参数'\n    };\n    return [null, msg];\n}\n\n// 安全检查和SQL注入防御\nconst tableName = msg.req.query.tableName;\nconst safeTablePattern = /^[a-zA-Z0-9_]+$/;\n\nif (!safeTablePattern.test(tableName)) {\n    msg.statusCode = 400;\n    msg.payload = {\n        success: false,\n        message: '无效的表名格式'\n    };\n    return [null, msg];\n}\n\n// 构建查询表结构的SQL\nmsg.tableName = tableName;\nmsg.topic = `DESCRIBE ${tableName}`;\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1520,
        "wires": [
            [
                "4d0683657574c6d9"
            ],
            [
                "762abb2cdb4bb681"
            ]
        ]
    },
    {
        "id": "4d0683657574c6d9",
        "type": "mysql",
        "z": "db-api-flow",
        "mydb": "e3d5e9572467c502",
        "name": "查询表字段",
        "x": 540,
        "y": 1520,
        "wires": [
            [
                "0d44c88002661ff1"
            ]
        ]
    },
    {
        "id": "0d44c88002661ff1",
        "type": "function",
        "z": "db-api-flow",
        "name": "格式化字段数据",
        "func": "// 处理数据库返回的字段数据\nconst fields = msg.payload;\nconst tableName = msg.tableName;\n\n// 格式化字段数据为前端需要的格式\nconst formattedFields = [];\n\n// 遍历所有字段\nfor (const field of fields) {\n    // 创建字段对象\n    formattedFields.push({\n        name: field.Field,\n        label: formatFieldName(field.Field), // 格式化字段名为显示名称\n        type: field.Type,\n        required: field.Null === 'NO',\n        isPrimaryKey: field.Key === 'PRI',\n        defaultValue: field.Default,\n        description: getFieldDescription(tableName, field.Field)\n    });\n}\n\n// 格式化字段名为显示名称的函数\nfunction formatFieldName(fieldName) {\n    // 替换下划线为空格，首字母大写\n    return fieldName\n        .split('_')\n        .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n        .join(' ');\n}\n\n// 获取字段描述的函数(可以根据业务逻辑扩展)\nfunction getFieldDescription(tableName, fieldName) {\n    const descriptions = {\n        'water_quality': {\n            'ph': 'pH值',\n            'cod': '化学需氧量',\n            'bod': '生化需氧量',\n            'nh3n': '氨氮',\n            'ss': '悬浮物',\n            'tn': '总氮',\n            'tp': '总磷'\n        },\n        'flow_data': {\n            'flow_rate': '流量',\n            'daily_flow': '日累计流量',\n            'monthly_flow': '月累计流量'\n        }\n    };\n    \n    return descriptions[tableName]?.[fieldName] || formatFieldName(fieldName);\n}\n\n// 返回API响应\nmsg.payload = {\n    success: true,\n    message: '获取字段列表成功',\n    data: formattedFields\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1520,
        "wires": [
            [
                "6fd077d698a84492"
            ]
        ]
    },
    {
        "id": "6fd077d698a84492",
        "type": "http response",
        "z": "db-api-flow",
        "name": "返回字段列表",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 980,
        "y": 1520,
        "wires": []
    },
    {
        "id": "762abb2cdb4bb681",
        "type": "http response",
        "z": "db-api-flow",
        "name": "返回错误信息",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 550,
        "y": 1600,
        "wires": []
    },
    {
        "id": "4fe2addf309e972f",
        "type": "http in",
        "z": "db-api-flow",
        "name": "执行查询",
        "url": "/api/database/query",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1680,
        "wires": [
            [
                "71703d82891a9f8f"
            ]
        ]
    },
    {
        "id": "71703d82891a9f8f",
        "type": "function",
        "z": "db-api-flow",
        "name": "验证查询参数",
        "func": "// 验证是否提供了表名和查询条件\nif (!msg.payload.table) {\n    msg.statusCode = 400;\n    msg.payload = {\n        success: false,\n        message: '缺少必需的table参数'\n    };\n    return [null, msg];\n}\n\n// 安全检查和SQL注入防御\nconst tableName = msg.payload.table;\nconst safeTablePattern = /^[a-zA-Z0-9_]+$/;\n\nif (!safeTablePattern.test(tableName)) {\n    msg.statusCode = 400;\n    msg.payload = {\n        success: false,\n        message: '无效的表名格式'\n    };\n    return [null, msg];\n}\n\n// 获取查询条件\nconst query = msg.payload.query;\nconst sql = msg.payload.sql;\n\n// 构建查询SQL - 在实际环境中，应使用参数化查询\n// 注意：这里使用了传入的SQL，实际环境中应该进行更严格的验证和转换\n// 此示例仅供演示，生产环境应当使用参数化查询来防止SQL注入\nconst limit = 1000; // 限制返回记录数\n\n// 使用传入的SQL，假设已经包含了WHERE子句\nmsg.topic = `SELECT * FROM ${tableName} LIMIT ${limit}`;\n\nif (sql && sql.trim() !== '') {\n    // 假设SQL只包含WHERE子句\n    msg.topic = `SELECT * FROM ${tableName} WHERE ${sql} LIMIT ${limit}`;\n}\n\nreturn [msg, null];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 1680,
        "wires": [
            [
                "1cea966597d21c29"
            ],
            [
                "762abb2cdb4bb681"
            ]
        ]
    },
    {
        "id": "1cea966597d21c29",
        "type": "mysql",
        "z": "db-api-flow",
        "mydb": "e3d5e9572467c502",
        "name": "执行SQL查询",
        "x": 550,
        "y": 1680,
        "wires": [
            [
                "40cd72b52d1980eb"
            ]
        ]
    },
    {
        "id": "40cd72b52d1980eb",
        "type": "function",
        "z": "db-api-flow",
        "name": "格式化查询结果",
        "func": "// 处理查询结果\nconst results = msg.payload;\n\n// 格式化时间/日期字段\nconst formattedResults = results.map(row => {\n    const formattedRow = {};\n    \n    // 遍历行中的每个字段\n    for (const key in row) {\n        // 检查是否为日期对象\n        if (row[key] instanceof Date) {\n            // 格式化日期\n            formattedRow[key] = row[key].toISOString();\n        } else {\n            formattedRow[key] = row[key];\n        }\n    }\n    \n    return formattedRow;\n});\n\n// 返回API响应\nmsg.payload = {\n    success: true,\n    message: '查询执行成功',\n    data: formattedResults,\n    count: formattedResults.length\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1680,
        "wires": [
            [
                "e25d5618ecaae694"
            ]
        ]
    },
    {
        "id": "e25d5618ecaae694",
        "type": "http response",
        "z": "db-api-flow",
        "name": "返回查询结果",
        "statusCode": "200",
        "headers": {
            "content-type": "application/json"
        },
        "x": 980,
        "y": 1680,
        "wires": []
    },
    {
        "id": "api-configs-save",
        "type": "http in",
        "z": "api-configs-individual-flow",
        "name": "保存API配置",
        "url": "/api/api-configs/save",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 80,
        "wires": [
            [
                "api-configs-cors-middleware"
            ]
        ]
    },
    {
        "id": "api-configs-cors-middleware",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "CORS中间件",
        "func": "// 设置CORS头部\nif (msg.req.method === 'OPTIONS') {\n    // 处理OPTIONS预检请求\n    msg.headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization',\n        'Access-Control-Max-Age': '3600',\n        'Content-Length': '0'\n    };\n    msg.statusCode = 204;\n    msg.payload = '';\n    return [msg, null]; // 发送到第一个输出，跳过后续处理\n}\n\n// 为所有响应添加CORS头部\nmsg._cors = {\n    headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization'\n    }\n};\n\n// 继续正常处理\nreturn [null, msg]; // 发送到第二个输出，继续处理",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 80,
        "wires": [
            [
                "api-configs-cors-response"
            ],
            [
                "api-configs-save-debug",
                "api-configs-prepare-table"
            ]
        ]
    },
    {
        "id": "api-configs-cors-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "CORS响应",
        "statusCode": "204",
        "headers": {},
        "x": 650,
        "y": 20,
        "wires": []
    },
    {
        "id": "api-configs-save-debug",
        "type": "debug",
        "z": "api-configs-individual-flow",
        "name": "请求数据",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 120,
        "wires": []
    },
    {
        "id": "api-configs-prepare-table",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "准备创建表",
        "func": "// 从请求中获取API配置数据\nconst apiConfigs = msg.payload.apiConfigs;\n\nif (!apiConfigs) {\n    msg.payload = {\n        success: false,\n        message: '未提供API配置'\n    };\n    \n    // 添加CORS头部\n    if (msg._cors && msg._cors.headers) {\n        msg.headers = { ...msg._cors.headers, 'Content-Type': 'application/json' };\n    }\n    \n    return [msg, null]; // 发送错误响应\n}\n\n// 准备批量插入或更新的数据\nconst timestamp = new Date().toISOString();\nconst apiKeys = Object.keys(apiConfigs);\nconst totalCount = apiKeys.length;\n\n// 首先创建表（如果不存在）\n// 使用更合适的表结构，每个API是一条记录\nmsg.topic = `\nCREATE TABLE IF NOT EXISTS api_configs (\n    api_key VARCHAR(255) PRIMARY KEY,\n    name VARCHAR(255),\n    url TEXT,\n    method VARCHAR(50),\n    category VARCHAR(100),\n    status VARCHAR(50),\n    description TEXT,\n    config_json LONGTEXT,\n    timestamp VARCHAR(50),\n    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n`;\n\n// 保存数据以便后续处理\nmsg._apiData = {\n    apiConfigs: apiConfigs,\n    apiKeys: apiKeys,\n    timestamp: timestamp,\n    totalCount: totalCount,\n    currentIndex: 0,\n    successCount: 0,\n    errorCount: 0,\n    errors: [],\n    batchSize: 10, // 每批处理的API数量\n    currentBatch: 0\n};\n\n\nreturn [null, msg]; // 继续处理",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 80,
        "wires": [
            [
                "api-configs-error-http-response"
            ],
            [
                "api-configs-create-table"
            ]
        ]
    },
    {
        "id": "api-configs-create-table",
        "type": "mysql",
        "z": "api-configs-individual-flow",
        "mydb": "328d33290f226639",
        "name": "创建表",
        "x": 920,
        "y": 80,
        "wires": [
            [
                "api-configs-prepare-batch"
            ]
        ]
    },
    {
        "id": "api-configs-prepare-batch",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "准备批量处理",
        "func": "// 获取之前保存的API数据\nconst apiData = msg._apiData;\nconst apiConfigs = apiData.apiConfigs;\nconst apiKeys = apiData.apiKeys;\nconst batchSize = apiData.batchSize;\nconst currentBatch = apiData.currentBatch;\nconst startIndex = currentBatch * batchSize;\nlet endIndex = startIndex + batchSize;\n\n// 确保不超出数组范围\nif (endIndex > apiKeys.length) {\n    endIndex = apiKeys.length;\n}\n\n// 检查是否已处理完所有批次\nif (startIndex >= apiKeys.length) {\n    // 所有API已处理完毕，返回结果\n    msg.payload = {\n        success: true,\n        message: `成功保存 ${apiData.successCount} 个API配置，失败 ${apiData.errorCount} 个`,\n        timestamp: apiData.timestamp,\n        totalCount: apiData.totalCount,\n        successCount: apiData.successCount,\n        errorCount: apiData.errorCount,\n        errors: apiData.errors\n    };\n    \n    // 添加CORS头部\n    if (msg._cors && msg._cors.headers) {\n        msg.headers = { ...msg._cors.headers, 'Content-Type': 'application/json' };\n    }\n    \n    // 清除临时数据\n    delete msg._apiData;\n    \n    return [msg, null]; // 发送到第一个输出，返回最终结果\n}\n\n// 准备当前批次的SQL语句\nlet sqlValues = [];\nlet params = [];\n\n// 构建批量插入的VALUES部分\nfor (let i = startIndex; i < endIndex; i++) {\n    const apiKey = apiKeys[i];\n    const apiConfig = apiConfigs[apiKey];\n    \n    // 将API配置转换为JSON字符串\n    const configJson = JSON.stringify(apiConfig);\n    \n    // 添加参数\n    params.push(\n        apiKey,\n        apiConfig.name || '',\n        apiConfig.url || '',\n        apiConfig.method || '',\n        apiConfig.category || '',\n        apiConfig.status || 'enabled',\n        apiConfig.description || '',\n        configJson,\n        apiData.timestamp\n    );\n    \n    // 添加占位符\n    sqlValues.push('(?, ?, ?, ?, ?, ?, ?, ?, ?)');\n}\n\n// 构建完整的SQL语句\nmsg.topic = `REPLACE INTO api_configs \n            (api_key, name, url, method, category, status, description, config_json, timestamp) \n            VALUES ${sqlValues.join(', ')}`;\n\n// 设置参数\nmsg.payload = params;\n\n// 设置MySQL节点需要的特殊属性\nmsg.queryType = \"prepared\";\n\n// 更新批次计数\napiData.currentBatch++;\n\nreturn [null, msg]; // 发送到第二个输出，继续处理",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 80,
        "wires": [
            [
                "api-configs-save-http-response"
            ],
            [
                "api-configs-execute-batch"
            ]
        ]
    },
    {
        "id": "api-configs-execute-batch",
        "type": "mysql",
        "z": "api-configs-individual-flow",
        "mydb": "328d33290f226639",
        "name": "执行批量保存",
        "x": 1320,
        "y": 120,
        "wires": [
            [
                "api-configs-process-batch-result"
            ]
        ]
    },
    {
        "id": "api-configs-process-batch-result",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "处理批量结果",
        "func": "// 获取之前保存的API数据\nconst apiData = msg._apiData;\nconst batchSize = apiData.batchSize;\nconst currentBatch = apiData.currentBatch - 1; // 当前已处理的批次\nconst startIndex = currentBatch * batchSize;\nlet endIndex = startIndex + batchSize;\n\n// 确保不超出数组范围\nif (endIndex > apiData.apiKeys.length) {\n    endIndex = apiData.apiKeys.length;\n}\n\n// 检查操作是否成功\nif (msg.payload && msg.payload.affectedRows > 0) {\n    // 更新成功计数\n    apiData.successCount += (endIndex - startIndex);\n} else {\n    // 更新失败计数\n    apiData.errorCount += (endIndex - startIndex);\n    \n    // 记录失败的API\n    for (let i = startIndex; i < endIndex; i++) {\n        apiData.errors.push({\n            apiKey: apiData.apiKeys[i],\n            error: 'MySQL操作未影响任何行'\n        });\n    }\n}\n\n\n\n// 继续处理下一批\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 120,
        "wires": [
            [
                "api-configs-prepare-batch"
            ]
        ]
    },
    {
        "id": "api-configs-save-http-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "返回保存结果",
        "statusCode": "",
        "headers": {},
        "x": 1320,
        "y": 40,
        "wires": []
    },
    {
        "id": "api-configs-get",
        "type": "http in",
        "z": "api-configs-individual-flow",
        "name": "获取API配置",
        "url": "/api/api-configs/get",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "api-configs-get-cors-middleware",
                "96f9e47f49158ab8"
            ]
        ]
    },
    {
        "id": "api-configs-get-cors-middleware",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "CORS中间件",
        "func": "// 设置CORS头部\nif (msg.req.method === 'OPTIONS') {\n    // 处理OPTIONS预检请求\n    msg.headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization',\n        'Access-Control-Max-Age': '3600',\n        'Content-Length': '0'\n    };\n    msg.statusCode = 204;\n    msg.payload = '';\n    return [msg, null]; // 发送到第一个输出，跳过后续处理\n}\n\n// 为所有响应添加CORS头部\nmsg._cors = {\n    headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization'\n    }\n};\n\n// 继续正常处理\nreturn [null, msg]; // 发送到第二个输出，继续处理",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 140,
        "wires": [
            [
                "api-configs-cors-response"
            ],
            [
                "api-configs-get-function"
            ]
        ]
    },
    {
        "id": "api-configs-get-function",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "准备查询",
        "func": "// 准备SQL查询 - 获取所有API配置\nmsg.topic = 'SELECT * FROM api_configs ORDER BY api_key';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 180,
        "wires": [
            [
                "api-configs-execute-get"
            ]
        ]
    },
    {
        "id": "api-configs-execute-get",
        "type": "mysql",
        "z": "api-configs-individual-flow",
        "mydb": "328d33290f226639",
        "name": "执行查询",
        "x": 720,
        "y": 180,
        "wires": [
            [
                "api-configs-get-response"
            ]
        ]
    },
    {
        "id": "api-configs-get-response",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "准备响应",
        "func": "// 检查是否有结果\nif (!msg.payload || msg.payload.length === 0) {\n    msg.payload = {\n        success: false,\n        message: '未找到API配置'\n    };\n    \n    // 添加CORS头部\n    if (msg._cors && msg._cors.headers) {\n        msg.headers = { ...msg._cors.headers, 'Content-Type': 'application/json' };\n    }\n    \n    return msg;\n}\n\n// 将结果转换为前端期望的格式\nconst apiConfigs = {};\nlet timestamp = '';\n\n// 处理每个API配置\nmsg.payload.forEach(row => {\n    try {\n        // 解析JSON字符串\n        const config = JSON.parse(row.config_json);\n        \n        // 将API配置添加到结果对象中\n        apiConfigs[row.api_key] = config;\n        \n        // 使用第一个记录的时间戳作为整体时间戳\n        if (!timestamp) {\n            timestamp = row.timestamp;\n        }\n    } catch (error) {\n        // 忽略解析错误的记录\n        console.error(`解析API配置失败: ${row.api_key}`, error);\n    }\n});\n\n// 返回API配置\nmsg.payload = {\n    success: true,\n    message: `成功获取 ${Object.keys(apiConfigs).length} 个API配置`,\n    timestamp: timestamp,\n    data: apiConfigs\n};\n\n// 添加CORS头部\nif (msg._cors && msg._cors.headers) {\n    msg.headers = { ...msg._cors.headers, 'Content-Type': 'application/json' };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 180,
        "wires": [
            [
                "api-configs-get-http-response"
            ]
        ]
    },
    {
        "id": "api-configs-get-http-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "返回API配置",
        "statusCode": "",
        "headers": {},
        "x": 1120,
        "y": 180,
        "wires": []
    },
    {
        "id": "api-configs-delete",
        "type": "http in",
        "z": "api-configs-individual-flow",
        "name": "删除API配置",
        "url": "/api/api-configs/delete",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "api-configs-delete-cors-middleware"
            ]
        ]
    },
    {
        "id": "api-configs-delete-cors-middleware",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "CORS中间件",
        "func": "// 设置CORS头部\nif (msg.req.method === 'OPTIONS') {\n    // 处理OPTIONS预检请求\n    msg.headers = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization',\n        'Access-Control-Max-Age': '3600',\n        'Content-Length': '0'\n    };\n    msg.statusCode = 204;\n    msg.payload = '';\n    return [msg, null]; // 发送到第一个输出，跳过后续处理\n}\n\n// 为所有响应添加CORS头部\nmsg._cors = {\n    headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization'\n    }\n};\n\n// 继续正常处理\nreturn [null, msg]; // 发送到第二个输出，继续处理",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 240,
        "wires": [
            [
                "api-configs-cors-response"
            ],
            [
                "api-configs-delete-function"
            ]
        ]
    },
    {
        "id": "api-configs-delete-function",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "准备删除",
        "func": "// 准备SQL查询 - 删除所有API配置\nmsg.topic = 'DELETE FROM api_configs';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 240,
        "wires": [
            [
                "api-configs-execute-delete"
            ]
        ]
    },
    {
        "id": "api-configs-execute-delete",
        "type": "mysql",
        "z": "api-configs-individual-flow",
        "mydb": "328d33290f226639",
        "name": "执行删除",
        "x": 720,
        "y": 240,
        "wires": [
            [
                "api-configs-delete-response"
            ]
        ]
    },
    {
        "id": "api-configs-delete-response",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "准备响应",
        "func": "// 返回成功响应\nmsg.payload = {\n    success: true,\n    message: '成功删除API配置',\n    timestamp: new Date().toISOString(),\n    affectedRows: msg.payload.affectedRows || 0\n};\n\n// 添加CORS头部\nif (msg._cors && msg._cors.headers) {\n    msg.headers = { ...msg._cors.headers, 'Content-Type': 'application/json' };\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 240,
        "wires": [
            [
                "api-configs-delete-http-response"
            ]
        ]
    },
    {
        "id": "api-configs-delete-http-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "返回删除结果",
        "statusCode": "",
        "headers": {},
        "x": 1120,
        "y": 240,
        "wires": []
    },
    {
        "id": "api-configs-error-handler",
        "type": "catch",
        "z": "api-configs-individual-flow",
        "name": "错误处理",
        "scope": null,
        "uncaught": false,
        "x": 120,
        "y": 300,
        "wires": [
            [
                "api-configs-error-debug",
                "api-configs-error-response"
            ]
        ]
    },
    {
        "id": "api-configs-error-debug",
        "type": "debug",
        "z": "api-configs-individual-flow",
        "name": "错误信息",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 300,
        "wires": []
    },
    {
        "id": "api-configs-error-response",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "准备错误响应",
        "func": "// 准备错误响应\nmsg.payload = {\n    success: false,\n    message: '操作失败',\n    error: msg.error ? msg.error.message || String(msg.error) : '未知错误'\n};\n\n// 添加CORS头部\nmsg.headers = {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n    'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept, Authorization'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 340,
        "wires": [
            [
                "api-configs-error-http-response"
            ]
        ]
    },
    {
        "id": "api-configs-error-http-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "返回错误结果",
        "statusCode": "500",
        "headers": {},
        "x": 560,
        "y": 340,
        "wires": []
    },
    {
        "id": "96f9e47f49158ab8",
        "type": "debug",
        "z": "api-configs-individual-flow",
        "name": "debug 35",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 180,
        "wires": []
    },
    {
        "id": "forms-get-all",
        "type": "http in",
        "z": "api-configs-individual-flow",
        "name": "Get All Forms",
        "url": "/api/forms",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 640,
        "wires": [
            [
                "forms-get-all-function",
                "2db97de2c567ba74"
            ]
        ]
    },
    {
        "id": "forms-get-all-function",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "Process Get All Forms",
        "func": "// Get forms from context or database\nconst storedForms = global.get('forms') || [];\n\n// Return success response\nmsg.payload = {\n    success: true,\n    message: `Successfully retrieved ${storedForms.length} forms`,\n    data: storedForms\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 640,
        "wires": [
            [
                "forms-get-all-response",
                "2db97de2c567ba74"
            ]
        ]
    },
    {
        "id": "forms-get-all-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "Return Forms List",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 630,
        "y": 640,
        "wires": []
    },
    {
        "id": "forms-get-by-id",
        "type": "http in",
        "z": "api-configs-individual-flow",
        "name": "Get Form By ID",
        "url": "/api/forms/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 700,
        "wires": [
            [
                "forms-get-by-id-function",
                "02950076369bba26"
            ]
        ]
    },
    {
        "id": "forms-get-by-id-function",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "Process Get Form By ID",
        "func": "// Get form ID from request parameters\nconst formId = msg.req.params.id;\n\n// Get forms from context or database\nconst storedForms = global.get('forms') || [];\n\n// Find the requested form\nconst form = storedForms.find(form => form.id === formId);\n\nif (!form) {\n    msg.payload = {\n        success: false,\n        message: `Form with ID ${formId} not found`\n    };\n    msg.statusCode = 404;\n    return msg;\n}\n\n// Return success response\nmsg.payload = {\n    success: true,\n    message: 'Form found',\n    data: form\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 700,
        "wires": [
            [
                "forms-get-by-id-response",
                "02950076369bba26"
            ]
        ]
    },
    {
        "id": "forms-get-by-id-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "Return Form",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 620,
        "y": 700,
        "wires": []
    },
    {
        "id": "forms-create",
        "type": "http in",
        "z": "api-configs-individual-flow",
        "name": "Create Form",
        "url": "/api/forms",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 760,
        "wires": [
            [
                "forms-create-function",
                "a8bce5fbe8f3a818"
            ]
        ]
    },
    {
        "id": "forms-create-function",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "Process Create Form",
        "func": "// Get form data from request\nconst formData = msg.payload;\n\n// Validate required fields\nif (!formData.title || !formData.embedUrl) {\n    msg.payload = {\n        success: false,\n        message: 'Title and embed URL are required'\n    };\n    msg.statusCode = 400;\n    return msg;\n}\n\n// Get existing forms\nconst storedForms = global.get('forms') || [];\n\n// Create new form with unique ID and timestamp\nconst newForm = {\n    id: Date.now().toString(),\n    title: formData.title,\n    embedUrl: formData.embedUrl,\n    description: formData.description || '',\n    status: formData.status || 'active',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n};\n\n// Add to forms array and save to global context\nstoredForms.push(newForm);\nglobal.set('forms', storedForms);\n\n// Return success response\nmsg.payload = {\n    success: true,\n    message: 'Form created successfully',\n    data: newForm\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 760,
        "wires": [
            [
                "forms-create-response",
                "a8bce5fbe8f3a818"
            ]
        ]
    },
    {
        "id": "forms-create-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "Return Created Form",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 640,
        "y": 760,
        "wires": []
    },
    {
        "id": "forms-update",
        "type": "http in",
        "z": "api-configs-individual-flow",
        "name": "Update Form",
        "url": "/api/forms/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 820,
        "wires": [
            [
                "forms-update-function",
                "cc93e37cb7155a83"
            ]
        ]
    },
    {
        "id": "forms-update-function",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "Process Update Form",
        "func": "// Get form ID from request parameters\nconst formId = msg.req.params.id;\n\n// Get form data from request\nconst formData = msg.payload;\n\n// Get existing forms\nconst storedForms = global.get('forms') || [];\n\n// Find the form to update\nconst formIndex = storedForms.findIndex(form => form.id === formId);\n\nif (formIndex === -1) {\n    msg.payload = {\n        success: false,\n        message: `Form with ID ${formId} not found`\n    };\n    msg.statusCode = 404;\n    return msg;\n}\n\n// Update form with new data\nconst updatedForm = {\n    ...storedForms[formIndex],\n    title: formData.title || storedForms[formIndex].title,\n    embedUrl: formData.embedUrl || storedForms[formIndex].embedUrl,\n    description: formData.description !== undefined ? formData.description : storedForms[formIndex].description,\n    status: formData.status || storedForms[formIndex].status,\n    updatedAt: new Date().toISOString()\n};\n\n// Update the form in the array\nstoredForms[formIndex] = updatedForm;\n\n// Save updated forms to global context\nglobal.set('forms', storedForms);\n\n// Return success response\nmsg.payload = {\n    success: true,\n    message: 'Form updated successfully',\n    data: updatedForm\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 820,
        "wires": [
            [
                "forms-update-response",
                "cc93e37cb7155a83"
            ]
        ]
    },
    {
        "id": "forms-update-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "Return Updated Form",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 640,
        "y": 820,
        "wires": []
    },
    {
        "id": "forms-delete",
        "type": "http in",
        "z": "api-configs-individual-flow",
        "name": "Delete Form",
        "url": "/api/forms/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 880,
        "wires": [
            [
                "forms-delete-function",
                "81ef4bf9cf0aad19"
            ]
        ]
    },
    {
        "id": "forms-delete-function",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "Process Delete Form",
        "func": "// Get form ID from request parameters\nconst formId = msg.req.params.id;\n\n// Get existing forms\nconst storedForms = global.get('forms') || [];\n\n// Find the form to delete\nconst formIndex = storedForms.findIndex(form => form.id === formId);\n\nif (formIndex === -1) {\n    msg.payload = {\n        success: false,\n        message: `Form with ID ${formId} not found`\n    };\n    msg.statusCode = 404;\n    return msg;\n}\n\n// Remove the form from the array\nstoredForms.splice(formIndex, 1);\n\n// Save updated forms to global context\nglobal.set('forms', storedForms);\n\n// Also remove form submissions\nconst storedSubmissions = global.get('formSubmissions') || {};\ndelete storedSubmissions[formId];\nglobal.set('formSubmissions', storedSubmissions);\n\n// Return success response\nmsg.payload = {\n    success: true,\n    message: 'Form deleted successfully'\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 880,
        "wires": [
            [
                "forms-delete-response",
                "81ef4bf9cf0aad19"
            ]
        ]
    },
    {
        "id": "forms-delete-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "Return Delete Result",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 640,
        "y": 880,
        "wires": []
    },
    {
        "id": "forms-submit",
        "type": "http in",
        "z": "api-configs-individual-flow",
        "name": "Submit Form",
        "url": "/api/forms/:id/submit",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 940,
        "wires": [
            [
                "forms-submit-function",
                "e22070ac1db0ed49"
            ]
        ]
    },
    {
        "id": "forms-submit-function",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "Process Form Submission",
        "func": "// Get form ID from request parameters\nconst formId = msg.req.params.id;\n\n// Get form data from request\nconst formData = msg.payload;\n\n// Get existing forms to verify form exists\nconst storedForms = global.get('forms') || [];\nconst form = storedForms.find(form => form.id === formId);\n\nif (!form) {\n    msg.payload = {\n        success: false,\n        message: `Form with ID ${formId} not found`\n    };\n    msg.statusCode = 404;\n    return msg;\n}\n\n// Get existing submissions\nconst storedSubmissions = global.get('formSubmissions') || {};\n\n// Initialize array for this form if it doesn't exist\nif (!storedSubmissions[formId]) {\n    storedSubmissions[formId] = [];\n}\n\n// Create new submission entry\nconst newSubmission = {\n    id: Date.now().toString(),\n    formId: formId,\n    data: formData,\n    submittedBy: msg.req.headers['x-user-id'] || 'anonymous',\n    submittedAt: new Date().toISOString(),\n    status: 'pending'\n};\n\n// Add to submissions and save to global context\nstoredSubmissions[formId].push(newSubmission);\nglobal.set('formSubmissions', storedSubmissions);\n\n// Set the submission for further processing\nmsg.submission = newSubmission;\n\n// Return success response\nmsg.payload = {\n    success: true,\n    message: 'Form submitted successfully',\n    data: {\n        submissionId: newSubmission.id,\n        timestamp: newSubmission.submittedAt\n    }\n};\n\nreturn [msg, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 940,
        "wires": [
            [
                "forms-submit-response",
                "e22070ac1db0ed49"
            ],
            [
                "forms-process-submission"
            ]
        ]
    },
    {
        "id": "forms-submit-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "Return Submission Result",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 660,
        "y": 940,
        "wires": []
    },
    {
        "id": "forms-process-submission",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "Process Submission Data",
        "func": "// Get the submission from the message\nconst submission = msg.submission;\n\n// Perform any additional processing here\n// For example, sending data to external systems, transforming data, etc.\n\n// Update submission status to processed\nconst storedSubmissions = global.get('formSubmissions') || {};\nconst formSubmissions = storedSubmissions[submission.formId] || [];\n\nconst submissionIndex = formSubmissions.findIndex(sub => sub.id === submission.id);\nif (submissionIndex !== -1) {\n    formSubmissions[submissionIndex].status = 'processed';\n    storedSubmissions[submission.formId] = formSubmissions;\n    global.set('formSubmissions', storedSubmissions);\n}\n\n// Log the processed submission\nnode.log(`Processed form submission: ${submission.id} for form: ${submission.formId}`);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 1000,
        "wires": [
            [
                "ef17042183b256a5"
            ]
        ]
    },
    {
        "id": "forms-get-submissions",
        "type": "http in",
        "z": "api-configs-individual-flow",
        "name": "Get Form Submissions",
        "url": "/api/forms/:id/submissions",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1060,
        "wires": [
            [
                "forms-get-submissions-function",
                "32bb6ba03b9a7d09"
            ]
        ]
    },
    {
        "id": "forms-get-submissions-function",
        "type": "function",
        "z": "api-configs-individual-flow",
        "name": "Process Get Submissions",
        "func": "// Get form ID from request parameters\nconst formId = msg.req.params.id;\n\n// Get stored submissions\nconst storedSubmissions = global.get('formSubmissions') || {};\nconst formSubmissions = storedSubmissions[formId] || [];\n\n// Return success response\nmsg.payload = {\n    success: true,\n    message: `Successfully retrieved ${formSubmissions.length} submissions`,\n    data: formSubmissions\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1060,
        "wires": [
            [
                "forms-get-submissions-response",
                "32bb6ba03b9a7d09"
            ]
        ]
    },
    {
        "id": "forms-get-submissions-response",
        "type": "http response",
        "z": "api-configs-individual-flow",
        "name": "Return Submissions",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 650,
        "y": 1060,
        "wires": []
    },
    {
        "id": "2db97de2c567ba74",
        "type": "debug",
        "z": "api-configs-individual-flow",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 580,
        "wires": []
    },
    {
        "id": "02950076369bba26",
        "type": "debug",
        "z": "api-configs-individual-flow",
        "name": "debug 26",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 600,
        "wires": []
    },
    {
        "id": "a8bce5fbe8f3a818",
        "type": "debug",
        "z": "api-configs-individual-flow",
        "name": "debug 28",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 680,
        "wires": []
    },
    {
        "id": "cc93e37cb7155a83",
        "type": "debug",
        "z": "api-configs-individual-flow",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 720,
        "wires": []
    },
    {
        "id": "81ef4bf9cf0aad19",
        "type": "debug",
        "z": "api-configs-individual-flow",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 780,
        "wires": []
    },
    {
        "id": "e22070ac1db0ed49",
        "type": "debug",
        "z": "api-configs-individual-flow",
        "name": "debug 38",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 840,
        "wires": []
    },
    {
        "id": "32bb6ba03b9a7d09",
        "type": "debug",
        "z": "api-configs-individual-flow",
        "name": "debug 39",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 900,
        "wires": []
    },
    {
        "id": "ef17042183b256a5",
        "type": "debug",
        "z": "api-configs-individual-flow",
        "name": "debug 40",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 960,
        "wires": []
    }
]